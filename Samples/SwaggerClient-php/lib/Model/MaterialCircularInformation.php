<?php
/**
 * MaterialCircularInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Madaster Private API
 *
 * The Madaster Private API endpoint.
 *
 * OpenAPI spec version: 1.1
 * Contact: service@madaster.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MaterialCircularInformation Class Doc Comment
 *
 * @category Class
 * @description The circular properties of the element
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MaterialCircularInformation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MaterialCircularInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'recycled_percentage_feedstock' => 'double',
        'rapid_renewables_percentage_feedstock' => 'double',
        'virgin_percentage_feedstock' => 'double',
        'recycled_percentage_end_of_life' => 'double',
        'landfill_percentage_end_of_life' => 'double',
        'incineration_percentage_end_of_life' => 'double',
        'efficiency_percentage_recycling_feedstock' => 'double',
        'efficiency_percentage_recycling_end_of_life' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'recycled_percentage_feedstock' => 'double',
        'rapid_renewables_percentage_feedstock' => 'double',
        'virgin_percentage_feedstock' => 'double',
        'recycled_percentage_end_of_life' => 'double',
        'landfill_percentage_end_of_life' => 'double',
        'incineration_percentage_end_of_life' => 'double',
        'efficiency_percentage_recycling_feedstock' => 'double',
        'efficiency_percentage_recycling_end_of_life' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'recycled_percentage_feedstock' => 'recycledPercentageFeedstock',
        'rapid_renewables_percentage_feedstock' => 'rapidRenewablesPercentageFeedstock',
        'virgin_percentage_feedstock' => 'virginPercentageFeedstock',
        'recycled_percentage_end_of_life' => 'recycledPercentageEndOfLife',
        'landfill_percentage_end_of_life' => 'landfillPercentageEndOfLife',
        'incineration_percentage_end_of_life' => 'incinerationPercentageEndOfLife',
        'efficiency_percentage_recycling_feedstock' => 'efficiencyPercentageRecyclingFeedstock',
        'efficiency_percentage_recycling_end_of_life' => 'efficiencyPercentageRecyclingEndOfLife'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'recycled_percentage_feedstock' => 'setRecycledPercentageFeedstock',
        'rapid_renewables_percentage_feedstock' => 'setRapidRenewablesPercentageFeedstock',
        'virgin_percentage_feedstock' => 'setVirginPercentageFeedstock',
        'recycled_percentage_end_of_life' => 'setRecycledPercentageEndOfLife',
        'landfill_percentage_end_of_life' => 'setLandfillPercentageEndOfLife',
        'incineration_percentage_end_of_life' => 'setIncinerationPercentageEndOfLife',
        'efficiency_percentage_recycling_feedstock' => 'setEfficiencyPercentageRecyclingFeedstock',
        'efficiency_percentage_recycling_end_of_life' => 'setEfficiencyPercentageRecyclingEndOfLife'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'recycled_percentage_feedstock' => 'getRecycledPercentageFeedstock',
        'rapid_renewables_percentage_feedstock' => 'getRapidRenewablesPercentageFeedstock',
        'virgin_percentage_feedstock' => 'getVirginPercentageFeedstock',
        'recycled_percentage_end_of_life' => 'getRecycledPercentageEndOfLife',
        'landfill_percentage_end_of_life' => 'getLandfillPercentageEndOfLife',
        'incineration_percentage_end_of_life' => 'getIncinerationPercentageEndOfLife',
        'efficiency_percentage_recycling_feedstock' => 'getEfficiencyPercentageRecyclingFeedstock',
        'efficiency_percentage_recycling_end_of_life' => 'getEfficiencyPercentageRecyclingEndOfLife'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['recycled_percentage_feedstock'] = isset($data['recycled_percentage_feedstock']) ? $data['recycled_percentage_feedstock'] : null;
        $this->container['rapid_renewables_percentage_feedstock'] = isset($data['rapid_renewables_percentage_feedstock']) ? $data['rapid_renewables_percentage_feedstock'] : null;
        $this->container['virgin_percentage_feedstock'] = isset($data['virgin_percentage_feedstock']) ? $data['virgin_percentage_feedstock'] : null;
        $this->container['recycled_percentage_end_of_life'] = isset($data['recycled_percentage_end_of_life']) ? $data['recycled_percentage_end_of_life'] : null;
        $this->container['landfill_percentage_end_of_life'] = isset($data['landfill_percentage_end_of_life']) ? $data['landfill_percentage_end_of_life'] : null;
        $this->container['incineration_percentage_end_of_life'] = isset($data['incineration_percentage_end_of_life']) ? $data['incineration_percentage_end_of_life'] : null;
        $this->container['efficiency_percentage_recycling_feedstock'] = isset($data['efficiency_percentage_recycling_feedstock']) ? $data['efficiency_percentage_recycling_feedstock'] : null;
        $this->container['efficiency_percentage_recycling_end_of_life'] = isset($data['efficiency_percentage_recycling_end_of_life']) ? $data['efficiency_percentage_recycling_end_of_life'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['recycled_percentage_feedstock'] === null) {
            $invalidProperties[] = "'recycled_percentage_feedstock' can't be null";
        }
        if (($this->container['recycled_percentage_feedstock'] > 1)) {
            $invalidProperties[] = "invalid value for 'recycled_percentage_feedstock', must be smaller than or equal to 1.";
        }

        if (($this->container['recycled_percentage_feedstock'] < 0)) {
            $invalidProperties[] = "invalid value for 'recycled_percentage_feedstock', must be bigger than or equal to 0.";
        }

        if ($this->container['rapid_renewables_percentage_feedstock'] === null) {
            $invalidProperties[] = "'rapid_renewables_percentage_feedstock' can't be null";
        }
        if (($this->container['rapid_renewables_percentage_feedstock'] > 1)) {
            $invalidProperties[] = "invalid value for 'rapid_renewables_percentage_feedstock', must be smaller than or equal to 1.";
        }

        if (($this->container['rapid_renewables_percentage_feedstock'] < 0)) {
            $invalidProperties[] = "invalid value for 'rapid_renewables_percentage_feedstock', must be bigger than or equal to 0.";
        }

        if ($this->container['recycled_percentage_end_of_life'] === null) {
            $invalidProperties[] = "'recycled_percentage_end_of_life' can't be null";
        }
        if (($this->container['recycled_percentage_end_of_life'] > 1)) {
            $invalidProperties[] = "invalid value for 'recycled_percentage_end_of_life', must be smaller than or equal to 1.";
        }

        if (($this->container['recycled_percentage_end_of_life'] < 0)) {
            $invalidProperties[] = "invalid value for 'recycled_percentage_end_of_life', must be bigger than or equal to 0.";
        }

        if ($this->container['landfill_percentage_end_of_life'] === null) {
            $invalidProperties[] = "'landfill_percentage_end_of_life' can't be null";
        }
        if (($this->container['landfill_percentage_end_of_life'] > 1)) {
            $invalidProperties[] = "invalid value for 'landfill_percentage_end_of_life', must be smaller than or equal to 1.";
        }

        if (($this->container['landfill_percentage_end_of_life'] < 0)) {
            $invalidProperties[] = "invalid value for 'landfill_percentage_end_of_life', must be bigger than or equal to 0.";
        }

        if ($this->container['efficiency_percentage_recycling_feedstock'] === null) {
            $invalidProperties[] = "'efficiency_percentage_recycling_feedstock' can't be null";
        }
        if (($this->container['efficiency_percentage_recycling_feedstock'] > 1)) {
            $invalidProperties[] = "invalid value for 'efficiency_percentage_recycling_feedstock', must be smaller than or equal to 1.";
        }

        if (($this->container['efficiency_percentage_recycling_feedstock'] < 0)) {
            $invalidProperties[] = "invalid value for 'efficiency_percentage_recycling_feedstock', must be bigger than or equal to 0.";
        }

        if ($this->container['efficiency_percentage_recycling_end_of_life'] === null) {
            $invalidProperties[] = "'efficiency_percentage_recycling_end_of_life' can't be null";
        }
        if (($this->container['efficiency_percentage_recycling_end_of_life'] > 1)) {
            $invalidProperties[] = "invalid value for 'efficiency_percentage_recycling_end_of_life', must be smaller than or equal to 1.";
        }

        if (($this->container['efficiency_percentage_recycling_end_of_life'] < 0)) {
            $invalidProperties[] = "invalid value for 'efficiency_percentage_recycling_end_of_life', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets recycled_percentage_feedstock
     *
     * @return double
     */
    public function getRecycledPercentageFeedstock()
    {
        return $this->container['recycled_percentage_feedstock'];
    }

    /**
     * Sets recycled_percentage_feedstock
     *
     * @param double $recycled_percentage_feedstock The percentage of the material's feedstock that comes from recycled sources
     *
     * @return $this
     */
    public function setRecycledPercentageFeedstock($recycled_percentage_feedstock)
    {

        if (($recycled_percentage_feedstock > 1)) {
            throw new \InvalidArgumentException('invalid value for $recycled_percentage_feedstock when calling MaterialCircularInformation., must be smaller than or equal to 1.');
        }
        if (($recycled_percentage_feedstock < 0)) {
            throw new \InvalidArgumentException('invalid value for $recycled_percentage_feedstock when calling MaterialCircularInformation., must be bigger than or equal to 0.');
        }

        $this->container['recycled_percentage_feedstock'] = $recycled_percentage_feedstock;

        return $this;
    }

    /**
     * Gets rapid_renewables_percentage_feedstock
     *
     * @return double
     */
    public function getRapidRenewablesPercentageFeedstock()
    {
        return $this->container['rapid_renewables_percentage_feedstock'];
    }

    /**
     * Sets rapid_renewables_percentage_feedstock
     *
     * @param double $rapid_renewables_percentage_feedstock The percentage of the material's feedstock that comes from rapidly renewable sources
     *
     * @return $this
     */
    public function setRapidRenewablesPercentageFeedstock($rapid_renewables_percentage_feedstock)
    {

        if (($rapid_renewables_percentage_feedstock > 1)) {
            throw new \InvalidArgumentException('invalid value for $rapid_renewables_percentage_feedstock when calling MaterialCircularInformation., must be smaller than or equal to 1.');
        }
        if (($rapid_renewables_percentage_feedstock < 0)) {
            throw new \InvalidArgumentException('invalid value for $rapid_renewables_percentage_feedstock when calling MaterialCircularInformation., must be bigger than or equal to 0.');
        }

        $this->container['rapid_renewables_percentage_feedstock'] = $rapid_renewables_percentage_feedstock;

        return $this;
    }

    /**
     * Gets virgin_percentage_feedstock
     *
     * @return double
     */
    public function getVirginPercentageFeedstock()
    {
        return $this->container['virgin_percentage_feedstock'];
    }

    /**
     * Sets virgin_percentage_feedstock
     *
     * @param double $virgin_percentage_feedstock The percentage of the material's feedstock that comes from virgin sources
     *
     * @return $this
     */
    public function setVirginPercentageFeedstock($virgin_percentage_feedstock)
    {
        $this->container['virgin_percentage_feedstock'] = $virgin_percentage_feedstock;

        return $this;
    }

    /**
     * Gets recycled_percentage_end_of_life
     *
     * @return double
     */
    public function getRecycledPercentageEndOfLife()
    {
        return $this->container['recycled_percentage_end_of_life'];
    }

    /**
     * Sets recycled_percentage_end_of_life
     *
     * @param double $recycled_percentage_end_of_life The percentage of the material that can be recycled at its end of life
     *
     * @return $this
     */
    public function setRecycledPercentageEndOfLife($recycled_percentage_end_of_life)
    {

        if (($recycled_percentage_end_of_life > 1)) {
            throw new \InvalidArgumentException('invalid value for $recycled_percentage_end_of_life when calling MaterialCircularInformation., must be smaller than or equal to 1.');
        }
        if (($recycled_percentage_end_of_life < 0)) {
            throw new \InvalidArgumentException('invalid value for $recycled_percentage_end_of_life when calling MaterialCircularInformation., must be bigger than or equal to 0.');
        }

        $this->container['recycled_percentage_end_of_life'] = $recycled_percentage_end_of_life;

        return $this;
    }

    /**
     * Gets landfill_percentage_end_of_life
     *
     * @return double
     */
    public function getLandfillPercentageEndOfLife()
    {
        return $this->container['landfill_percentage_end_of_life'];
    }

    /**
     * Sets landfill_percentage_end_of_life
     *
     * @param double $landfill_percentage_end_of_life The percentage of the material that will go to the landfill at its end of life
     *
     * @return $this
     */
    public function setLandfillPercentageEndOfLife($landfill_percentage_end_of_life)
    {

        if (($landfill_percentage_end_of_life > 1)) {
            throw new \InvalidArgumentException('invalid value for $landfill_percentage_end_of_life when calling MaterialCircularInformation., must be smaller than or equal to 1.');
        }
        if (($landfill_percentage_end_of_life < 0)) {
            throw new \InvalidArgumentException('invalid value for $landfill_percentage_end_of_life when calling MaterialCircularInformation., must be bigger than or equal to 0.');
        }

        $this->container['landfill_percentage_end_of_life'] = $landfill_percentage_end_of_life;

        return $this;
    }

    /**
     * Gets incineration_percentage_end_of_life
     *
     * @return double
     */
    public function getIncinerationPercentageEndOfLife()
    {
        return $this->container['incineration_percentage_end_of_life'];
    }

    /**
     * Sets incineration_percentage_end_of_life
     *
     * @param double $incineration_percentage_end_of_life The percentage of the material that will be incinerated at its end of life
     *
     * @return $this
     */
    public function setIncinerationPercentageEndOfLife($incineration_percentage_end_of_life)
    {
        $this->container['incineration_percentage_end_of_life'] = $incineration_percentage_end_of_life;

        return $this;
    }

    /**
     * Gets efficiency_percentage_recycling_feedstock
     *
     * @return double
     */
    public function getEfficiencyPercentageRecyclingFeedstock()
    {
        return $this->container['efficiency_percentage_recycling_feedstock'];
    }

    /**
     * Sets efficiency_percentage_recycling_feedstock
     *
     * @param double $efficiency_percentage_recycling_feedstock The efficiency of the recycling process that led to the feedstock
     *
     * @return $this
     */
    public function setEfficiencyPercentageRecyclingFeedstock($efficiency_percentage_recycling_feedstock)
    {

        if (($efficiency_percentage_recycling_feedstock > 1)) {
            throw new \InvalidArgumentException('invalid value for $efficiency_percentage_recycling_feedstock when calling MaterialCircularInformation., must be smaller than or equal to 1.');
        }
        if (($efficiency_percentage_recycling_feedstock < 0)) {
            throw new \InvalidArgumentException('invalid value for $efficiency_percentage_recycling_feedstock when calling MaterialCircularInformation., must be bigger than or equal to 0.');
        }

        $this->container['efficiency_percentage_recycling_feedstock'] = $efficiency_percentage_recycling_feedstock;

        return $this;
    }

    /**
     * Gets efficiency_percentage_recycling_end_of_life
     *
     * @return double
     */
    public function getEfficiencyPercentageRecyclingEndOfLife()
    {
        return $this->container['efficiency_percentage_recycling_end_of_life'];
    }

    /**
     * Sets efficiency_percentage_recycling_end_of_life
     *
     * @param double $efficiency_percentage_recycling_end_of_life The efficiency of the recycling process when the material reaches its end of life
     *
     * @return $this
     */
    public function setEfficiencyPercentageRecyclingEndOfLife($efficiency_percentage_recycling_end_of_life)
    {

        if (($efficiency_percentage_recycling_end_of_life > 1)) {
            throw new \InvalidArgumentException('invalid value for $efficiency_percentage_recycling_end_of_life when calling MaterialCircularInformation., must be smaller than or equal to 1.');
        }
        if (($efficiency_percentage_recycling_end_of_life < 0)) {
            throw new \InvalidArgumentException('invalid value for $efficiency_percentage_recycling_end_of_life when calling MaterialCircularInformation., must be bigger than or equal to 0.');
        }

        $this->container['efficiency_percentage_recycling_end_of_life'] = $efficiency_percentage_recycling_end_of_life;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


