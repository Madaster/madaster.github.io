<?php
/**
 * Material
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Madaster Private API
 *
 * The Madaster Private API endpoint.
 *
 * OpenAPI spec version: 1.1
 * Contact: service@madaster.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Material Class Doc Comment
 *
 * @category Class
 * @description A material
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Material implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Material';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => '\Swagger\Client\Model\MultiLingualString',
        'element_family' => 'string',
        'description' => '\Swagger\Client\Model\MultiLingualString1',
        'supplier' => 'string',
        'specific_weight' => 'double',
        'life_time' => 'int',
        'circular' => '\Swagger\Client\Model\MaterialCircularInformation',
        'financial' => '\Swagger\Client\Model\MaterialFinancialInformation',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'element_family' => null,
        'description' => null,
        'supplier' => null,
        'specific_weight' => 'double',
        'life_time' => 'int32',
        'circular' => null,
        'financial' => null,
        'id' => 'uuid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'element_family' => 'elementFamily',
        'description' => 'description',
        'supplier' => 'supplier',
        'specific_weight' => 'specificWeight',
        'life_time' => 'lifeTime',
        'circular' => 'circular',
        'financial' => 'financial',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'element_family' => 'setElementFamily',
        'description' => 'setDescription',
        'supplier' => 'setSupplier',
        'specific_weight' => 'setSpecificWeight',
        'life_time' => 'setLifeTime',
        'circular' => 'setCircular',
        'financial' => 'setFinancial',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'element_family' => 'getElementFamily',
        'description' => 'getDescription',
        'supplier' => 'getSupplier',
        'specific_weight' => 'getSpecificWeight',
        'life_time' => 'getLifeTime',
        'circular' => 'getCircular',
        'financial' => 'getFinancial',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['element_family'] = isset($data['element_family']) ? $data['element_family'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['supplier'] = isset($data['supplier']) ? $data['supplier'] : null;
        $this->container['specific_weight'] = isset($data['specific_weight']) ? $data['specific_weight'] : null;
        $this->container['life_time'] = isset($data['life_time']) ? $data['life_time'] : null;
        $this->container['circular'] = isset($data['circular']) ? $data['circular'] : null;
        $this->container['financial'] = isset($data['financial']) ? $data['financial'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['element_family'] === null) {
            $invalidProperties[] = "'element_family' can't be null";
        }
        if ($this->container['specific_weight'] === null) {
            $invalidProperties[] = "'specific_weight' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return \Swagger\Client\Model\MultiLingualString
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \Swagger\Client\Model\MultiLingualString $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets element_family
     *
     * @return string
     */
    public function getElementFamily()
    {
        return $this->container['element_family'];
    }

    /**
     * Sets element_family
     *
     * @param string $element_family The element family
     *
     * @return $this
     */
    public function setElementFamily($element_family)
    {
        $this->container['element_family'] = $element_family;

        return $this;
    }

    /**
     * Gets description
     *
     * @return \Swagger\Client\Model\MultiLingualString1
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \Swagger\Client\Model\MultiLingualString1 $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets supplier
     *
     * @return string
     */
    public function getSupplier()
    {
        return $this->container['supplier'];
    }

    /**
     * Sets supplier
     *
     * @param string $supplier The supplier of the material
     *
     * @return $this
     */
    public function setSupplier($supplier)
    {
        $this->container['supplier'] = $supplier;

        return $this;
    }

    /**
     * Gets specific_weight
     *
     * @return double
     */
    public function getSpecificWeight()
    {
        return $this->container['specific_weight'];
    }

    /**
     * Sets specific_weight
     *
     * @param double $specific_weight The specific weight of the material, in kg / m3
     *
     * @return $this
     */
    public function setSpecificWeight($specific_weight)
    {
        $this->container['specific_weight'] = $specific_weight;

        return $this;
    }

    /**
     * Gets life_time
     *
     * @return int
     */
    public function getLifeTime()
    {
        return $this->container['life_time'];
    }

    /**
     * Sets life_time
     *
     * @param int $life_time The lifetime of the material, in years
     *
     * @return $this
     */
    public function setLifeTime($life_time)
    {
        $this->container['life_time'] = $life_time;

        return $this;
    }

    /**
     * Gets circular
     *
     * @return \Swagger\Client\Model\MaterialCircularInformation
     */
    public function getCircular()
    {
        return $this->container['circular'];
    }

    /**
     * Sets circular
     *
     * @param \Swagger\Client\Model\MaterialCircularInformation $circular The circular properties of the material
     *
     * @return $this
     */
    public function setCircular($circular)
    {
        $this->container['circular'] = $circular;

        return $this;
    }

    /**
     * Gets financial
     *
     * @return \Swagger\Client\Model\MaterialFinancialInformation
     */
    public function getFinancial()
    {
        return $this->container['financial'];
    }

    /**
     * Sets financial
     *
     * @param \Swagger\Client\Model\MaterialFinancialInformation $financial The financial properties of the material
     *
     * @return $this
     */
    public function setFinancial($financial)
    {
        $this->container['financial'] = $financial;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


