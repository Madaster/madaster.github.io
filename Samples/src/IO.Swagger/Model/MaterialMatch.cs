/* 
 * Madaster Private API
 *
 * The Madaster Private API endpoint.
 *
 * OpenAPI spec version: 1.1
 * Contact: service@madaster.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A material match
    /// </summary>
    [DataContract]
    public partial class MaterialMatch :  IEquatable<MaterialMatch>, IValidatableObject
    {
        /// <summary>
        /// The type of match to look for
        /// </summary>
        /// <value>The type of match to look for</value>
        public enum MatchTypeEnum
        {
            
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            
            NUMBER_0 = 0,
            
            /// <summary>
            /// Enum NUMBER_10 for value: 10
            /// </summary>
            
            NUMBER_10 = 10,
            
            /// <summary>
            /// Enum NUMBER_20 for value: 20
            /// </summary>
            
            NUMBER_20 = 20
        }

        /// <summary>
        /// The type of match to look for
        /// </summary>
        /// <value>The type of match to look for</value>
        [DataMember(Name="matchType", EmitDefaultValue=false)]
        public MatchTypeEnum? MatchType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialMatch" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MaterialMatch() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialMatch" /> class.
        /// </summary>
        /// <param name="value">The value that this material will match to (required).</param>
        /// <param name="matchType">The type of match to look for.</param>
        public MaterialMatch(string value = default(string), MatchTypeEnum? matchType = default(MatchTypeEnum?))
        {
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for MaterialMatch and cannot be null");
            }
            else
            {
                this.Value = value;
            }
            this.MatchType = matchType;
        }
        
        /// <summary>
        /// The value that this material will match to
        /// </summary>
        /// <value>The value that this material will match to</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MaterialMatch {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  MatchType: ").Append(MatchType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MaterialMatch);
        }

        /// <summary>
        /// Returns true if MaterialMatch instances are equal
        /// </summary>
        /// <param name="input">Instance of MaterialMatch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MaterialMatch input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.MatchType == input.MatchType ||
                    (this.MatchType != null &&
                    this.MatchType.Equals(input.MatchType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.MatchType != null)
                    hashCode = hashCode * 59 + this.MatchType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
