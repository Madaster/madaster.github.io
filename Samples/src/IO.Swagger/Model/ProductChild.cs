/* 
 * Madaster Private API
 *
 * The Madaster Private API endpoint.
 *
 * OpenAPI spec version: 1.1
 * Contact: service@madaster.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A product child
    /// </summary>
    [DataContract]
    public partial class ProductChild :  IEquatable<ProductChild>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductChild" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductChild() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductChild" /> class.
        /// </summary>
        /// <param name="value">The value of this child relation, so how much of the child can be found in the parent product, with a unit depending on the relation type (required).</param>
        /// <param name="childId">The identifier of the child (required).</param>
        /// <param name="circular">The circular information about this child relation.</param>
        public ProductChild(double? value = default(double?), Guid? childId = default(Guid?), ProductChildCircularInformation circular = default(ProductChildCircularInformation))
        {
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for ProductChild and cannot be null");
            }
            else
            {
                this.Value = value;
            }
            // to ensure "childId" is required (not null)
            if (childId == null)
            {
                throw new InvalidDataException("childId is a required property for ProductChild and cannot be null");
            }
            else
            {
                this.ChildId = childId;
            }
            this.Circular = circular;
        }
        
        /// <summary>
        /// The value of this child relation, so how much of the child can be found in the parent product, with a unit depending on the relation type
        /// </summary>
        /// <value>The value of this child relation, so how much of the child can be found in the parent product, with a unit depending on the relation type</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public double? Value { get; set; }

        /// <summary>
        /// The identifier of the child
        /// </summary>
        /// <value>The identifier of the child</value>
        [DataMember(Name="childId", EmitDefaultValue=false)]
        public Guid? ChildId { get; set; }

        /// <summary>
        /// The circular information about this child relation
        /// </summary>
        /// <value>The circular information about this child relation</value>
        [DataMember(Name="circular", EmitDefaultValue=false)]
        public ProductChildCircularInformation Circular { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductChild {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ChildId: ").Append(ChildId).Append("\n");
            sb.Append("  Circular: ").Append(Circular).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductChild);
        }

        /// <summary>
        /// Returns true if ProductChild instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductChild to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductChild input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.ChildId == input.ChildId ||
                    (this.ChildId != null &&
                    this.ChildId.Equals(input.ChildId))
                ) && 
                (
                    this.Circular == input.Circular ||
                    (this.Circular != null &&
                    this.Circular.Equals(input.Circular))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.ChildId != null)
                    hashCode = hashCode * 59 + this.ChildId.GetHashCode();
                if (this.Circular != null)
                    hashCode = hashCode * 59 + this.Circular.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
