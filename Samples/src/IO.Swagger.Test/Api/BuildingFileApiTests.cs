/* 
 * Madaster Private API
 *
 * The Madaster Private API endpoint.
 *
 * OpenAPI spec version: 1.1
 * Contact: service@madaster.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing BuildingFileApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class BuildingFileApiTests
    {
        private BuildingFileApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new BuildingFileApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of BuildingFileApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' BuildingFileApi
            //Assert.IsInstanceOfType(typeof(BuildingFileApi), instance, "instance is a BuildingFileApi");
        }

        
        /// <summary>
        /// Test ApiV11BuildingsByBuildingIdFilesByIdActivePost
        /// </summary>
        [Test]
        public void ApiV11BuildingsByBuildingIdFilesByIdActivePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? buildingId = null;
            //Guid? id = null;
            //bool? isActive = null;
            //var response = instance.ApiV11BuildingsByBuildingIdFilesByIdActivePost(buildingId, id, isActive);
            //Assert.IsInstanceOf<BuildingFileResponse> (response, "response is BuildingFileResponse");
        }
        
        /// <summary>
        /// Test ApiV11BuildingsByBuildingIdFilesByIdDelete
        /// </summary>
        [Test]
        public void ApiV11BuildingsByBuildingIdFilesByIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? buildingId = null;
            //Guid? id = null;
            //instance.ApiV11BuildingsByBuildingIdFilesByIdDelete(buildingId, id);
            
        }
        
        /// <summary>
        /// Test ApiV11BuildingsByBuildingIdFilesByIdDownloadGet
        /// </summary>
        [Test]
        public void ApiV11BuildingsByBuildingIdFilesByIdDownloadGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? buildingId = null;
            //Guid? id = null;
            //var response = instance.ApiV11BuildingsByBuildingIdFilesByIdDownloadGet(buildingId, id);
            //Assert.IsInstanceOf<V11FileDownloadResponse> (response, "response is V11FileDownloadResponse");
        }
        
        /// <summary>
        /// Test ApiV11BuildingsByBuildingIdFilesByIdGet
        /// </summary>
        [Test]
        public void ApiV11BuildingsByBuildingIdFilesByIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? buildingId = null;
            //Guid? id = null;
            //var response = instance.ApiV11BuildingsByBuildingIdFilesByIdGet(buildingId, id);
            //Assert.IsInstanceOf<BuildingFileResponse> (response, "response is BuildingFileResponse");
        }
        
        /// <summary>
        /// Test ApiV11BuildingsByBuildingIdFilesByIdSetimportingPost
        /// </summary>
        [Test]
        public void ApiV11BuildingsByBuildingIdFilesByIdSetimportingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? buildingId = null;
            //Guid? id = null;
            //instance.ApiV11BuildingsByBuildingIdFilesByIdSetimportingPost(buildingId, id);
            
        }
        
        /// <summary>
        /// Test ApiV11BuildingsByBuildingIdFilesByIdStartrefinementPost
        /// </summary>
        [Test]
        public void ApiV11BuildingsByBuildingIdFilesByIdStartrefinementPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? buildingId = null;
            //Guid? id = null;
            //instance.ApiV11BuildingsByBuildingIdFilesByIdStartrefinementPost(buildingId, id);
            
        }
        
        /// <summary>
        /// Test ApiV11BuildingsByBuildingIdFilesByIdStatusGet
        /// </summary>
        [Test]
        public void ApiV11BuildingsByBuildingIdFilesByIdStatusGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? buildingId = null;
            //Guid? id = null;
            //var response = instance.ApiV11BuildingsByBuildingIdFilesByIdStatusGet(buildingId, id);
            //Assert.IsInstanceOf<BuildingFileStatusResponse> (response, "response is BuildingFileStatusResponse");
        }
        
        /// <summary>
        /// Test ApiV11BuildingsByBuildingIdFilesByIdUploadPost
        /// </summary>
        [Test]
        public void ApiV11BuildingsByBuildingIdFilesByIdUploadPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? buildingId = null;
            //Guid? id = null;
            //System.IO.Stream attachment = null;
            //instance.ApiV11BuildingsByBuildingIdFilesByIdUploadPost(buildingId, id, attachment);
            
        }
        
        /// <summary>
        /// Test ApiV11BuildingsByBuildingIdFilesGet
        /// </summary>
        [Test]
        public void ApiV11BuildingsByBuildingIdFilesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? buildingId = null;
            //var response = instance.ApiV11BuildingsByBuildingIdFilesGet(buildingId);
            //Assert.IsInstanceOf<List<BuildingFileResponse>> (response, "response is List<BuildingFileResponse>");
        }
        
        /// <summary>
        /// Test ApiV11BuildingsByBuildingIdFilesPost
        /// </summary>
        [Test]
        public void ApiV11BuildingsByBuildingIdFilesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? buildingId = null;
            //V11BuildingFileRequest buildingFile = null;
            //var response = instance.ApiV11BuildingsByBuildingIdFilesPost(buildingId, buildingFile);
            //Assert.IsInstanceOf<BuildingFileResponse> (response, "response is BuildingFileResponse");
        }
        
    }

}
