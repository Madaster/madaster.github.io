/* 
 * Madaster Private API
 *
 * The Madaster Private API endpoint.
 *
 * OpenAPI spec version: 1.1
 * Contact: service@madaster.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ProductApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ProductApiTests
    {
        private ProductApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ProductApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ProductApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ProductApi
            //Assert.IsInstanceOfType(typeof(ProductApi), instance, "instance is a ProductApi");
        }

        
        /// <summary>
        /// Test ApiV11ProductsByIdChildrenGet
        /// </summary>
        [Test]
        public void ApiV11ProductsByIdChildrenGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //var response = instance.ApiV11ProductsByIdChildrenGet(id);
            //Assert.IsInstanceOf<List<ProductChild>> (response, "response is List<ProductChild>");
        }
        
        /// <summary>
        /// Test ApiV11ProductsByIdChildrenPost
        /// </summary>
        [Test]
        public void ApiV11ProductsByIdChildrenPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //ProductChild child = null;
            //var response = instance.ApiV11ProductsByIdChildrenPost(id, child);
            //Assert.IsInstanceOf<ProductChild> (response, "response is ProductChild");
        }
        
        /// <summary>
        /// Test ApiV11ProductsByIdChildrenPut
        /// </summary>
        [Test]
        public void ApiV11ProductsByIdChildrenPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //List<ProductChild> children = null;
            //var response = instance.ApiV11ProductsByIdChildrenPut(id, children);
            //Assert.IsInstanceOf<List<ProductChild>> (response, "response is List<ProductChild>");
        }
        
        /// <summary>
        /// Test ApiV11ProductsByIdFinancialvaluesGet
        /// </summary>
        [Test]
        public void ApiV11ProductsByIdFinancialvaluesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //var response = instance.ApiV11ProductsByIdFinancialvaluesGet(id);
            //Assert.IsInstanceOf<List<ProductFinancialValue>> (response, "response is List<ProductFinancialValue>");
        }
        
        /// <summary>
        /// Test ApiV11ProductsByIdFinancialvaluesPost
        /// </summary>
        [Test]
        public void ApiV11ProductsByIdFinancialvaluesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //ProductFinancialValue value = null;
            //var response = instance.ApiV11ProductsByIdFinancialvaluesPost(id, value);
            //Assert.IsInstanceOf<ProductFinancialValue> (response, "response is ProductFinancialValue");
        }
        
        /// <summary>
        /// Test ApiV11ProductsByIdFinancialvaluesPut
        /// </summary>
        [Test]
        public void ApiV11ProductsByIdFinancialvaluesPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //List<ProductFinancialValue> values = null;
            //var response = instance.ApiV11ProductsByIdFinancialvaluesPut(id, values);
            //Assert.IsInstanceOf<List<ProductFinancialValue>> (response, "response is List<ProductFinancialValue>");
        }
        
        /// <summary>
        /// Test ApiV11ProductsByIdGet
        /// </summary>
        [Test]
        public void ApiV11ProductsByIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //var response = instance.ApiV11ProductsByIdGet(id);
            //Assert.IsInstanceOf<Product> (response, "response is Product");
        }
        
        /// <summary>
        /// Test ApiV11ProductsByIdMatchesGet
        /// </summary>
        [Test]
        public void ApiV11ProductsByIdMatchesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //var response = instance.ApiV11ProductsByIdMatchesGet(id);
            //Assert.IsInstanceOf<List<ProductMatch>> (response, "response is List<ProductMatch>");
        }
        
        /// <summary>
        /// Test ApiV11ProductsByIdMatchesPost
        /// </summary>
        [Test]
        public void ApiV11ProductsByIdMatchesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //ProductMatch match = null;
            //var response = instance.ApiV11ProductsByIdMatchesPost(id, match);
            //Assert.IsInstanceOf<ProductMatch> (response, "response is ProductMatch");
        }
        
        /// <summary>
        /// Test ApiV11ProductsByIdMatchesPut
        /// </summary>
        [Test]
        public void ApiV11ProductsByIdMatchesPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //List<ProductMatch> matches = null;
            //var response = instance.ApiV11ProductsByIdMatchesPut(id, matches);
            //Assert.IsInstanceOf<List<ProductMatch>> (response, "response is List<ProductMatch>");
        }
        
        /// <summary>
        /// Test ApiV11ProductsByIdPut
        /// </summary>
        [Test]
        public void ApiV11ProductsByIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //Product product = null;
            //var response = instance.ApiV11ProductsByIdPut(id, product);
            //Assert.IsInstanceOf<Product> (response, "response is Product");
        }
        
        /// <summary>
        /// Test ApiV11ProductsGet
        /// </summary>
        [Test]
        public void ApiV11ProductsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiV11ProductsGet();
            //Assert.IsInstanceOf<List<Product>> (response, "response is List<Product>");
        }
        
        /// <summary>
        /// Test ApiV11ProductsPost
        /// </summary>
        [Test]
        public void ApiV11ProductsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Product product = null;
            //var response = instance.ApiV11ProductsPost(product);
            //Assert.IsInstanceOf<Product> (response, "response is Product");
        }
        
    }

}
