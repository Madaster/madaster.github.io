/* 
 * Madaster Private API
 *
 * The Madaster Private API endpoint.
 *
 * OpenAPI spec version: 1.1
 * Contact: service@madaster.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Madaster.API.Client;
using Madaster.API.Model;

namespace Madaster.API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBuildingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the circular information of a building.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>string</returns>
        string ApiV11BuildingsByIdCircularGet (Guid? id);

        /// <summary>
        /// Gets the circular information of a building.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiV11BuildingsByIdCircularGetWithHttpInfo (Guid? id);
        /// <summary>
        /// Deletes the building and all related data.
        /// </summary>
        /// <remarks>
        /// &lt;returns&gt;              The building was successfully deleted.              &lt;/returns&gt;              Sample request:              &#x60;&#x60;&#x60;              DELETE api/[version]/buildings/[id]/delete              &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns></returns>
        void ApiV11BuildingsByIdDelete (Guid? id);

        /// <summary>
        /// Deletes the building and all related data.
        /// </summary>
        /// <remarks>
        /// &lt;returns&gt;              The building was successfully deleted.              &lt;/returns&gt;              Sample request:              &#x60;&#x60;&#x60;              DELETE api/[version]/buildings/[id]/delete              &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV11BuildingsByIdDeleteWithHttpInfo (Guid? id);
        /// <summary>
        /// Schedules the generation of a PDF building passport.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/exportexcelpassport  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="acceptLanguage">The culture to use for the request (optional, default to en)</param>
        /// <returns></returns>
        void ApiV11BuildingsByIdExportexcelpassportPost (Guid? id, string acceptLanguage = null);

        /// <summary>
        /// Schedules the generation of a PDF building passport.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/exportexcelpassport  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="acceptLanguage">The culture to use for the request (optional, default to en)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV11BuildingsByIdExportexcelpassportPostWithHttpInfo (Guid? id, string acceptLanguage = null);
        /// <summary>
        /// Schedules the generation of a PDF building passport.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/exportpassport  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="acceptLanguage">The culture to use for the request (optional, default to en)</param>
        /// <returns></returns>
        void ApiV11BuildingsByIdExportpassportPost (Guid? id, string acceptLanguage = null);

        /// <summary>
        /// Schedules the generation of a PDF building passport.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/exportpassport  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="acceptLanguage">The culture to use for the request (optional, default to en)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV11BuildingsByIdExportpassportPostWithHttpInfo (Guid? id, string acceptLanguage = null);
        /// <summary>
        /// Gets the financial information of a building.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="request">The request model specifying optional calculation variables. (optional)</param>
        /// <returns>string</returns>
        string ApiV11BuildingsByIdFinancialGet (Guid? id, V11BuildingFinancialInformationRequest request = null);

        /// <summary>
        /// Gets the financial information of a building.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="request">The request model specifying optional calculation variables. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiV11BuildingsByIdFinancialGetWithHttpInfo (Guid? id, V11BuildingFinancialInformationRequest request = null);
        /// <summary>
        /// Gets a building by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>BuildingResponse</returns>
        BuildingResponse ApiV11BuildingsByIdGet (Guid? id);

        /// <summary>
        /// Gets a building by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>ApiResponse of BuildingResponse</returns>
        ApiResponse<BuildingResponse> ApiV11BuildingsByIdGetWithHttpInfo (Guid? id);
        /// <summary>
        /// Adds an image to a building.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/images  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="attachment">The logo file.</param>
        /// <returns>string</returns>
        string ApiV11BuildingsByIdImagesPost (Guid? id, System.IO.Stream attachment);

        /// <summary>
        /// Adds an image to a building.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/images  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="attachment">The logo file.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiV11BuildingsByIdImagesPostWithHttpInfo (Guid? id, System.IO.Stream attachment);
        /// <summary>
        /// Schedules the building for proccesing, recalculates all data.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/process  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns></returns>
        void ApiV11BuildingsByIdProcessPost (Guid? id);

        /// <summary>
        /// Schedules the building for proccesing, recalculates all data.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/process  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV11BuildingsByIdProcessPostWithHttpInfo (Guid? id);
        /// <summary>
        /// Replaces a building.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/buildings/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="building">The building model. (optional)</param>
        /// <returns>BuildingResponse</returns>
        BuildingResponse ApiV11BuildingsByIdPut (Guid? id, BuildingRequest building = null);

        /// <summary>
        /// Replaces a building.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/buildings/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="building">The building model. (optional)</param>
        /// <returns>ApiResponse of BuildingResponse</returns>
        ApiResponse<BuildingResponse> ApiV11BuildingsByIdPutWithHttpInfo (Guid? id, BuildingRequest building = null);
        /// <summary>
        /// Gets all users for a building.
        /// </summary>
        /// <remarks>
        /// Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/buildings/[id]/users  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>List&lt;V11UserRightResponse&gt;</returns>
        List<V11UserRightResponse> ApiV11BuildingsByIdUsersGet (Guid? id);

        /// <summary>
        /// Gets all users for a building.
        /// </summary>
        /// <remarks>
        /// Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/buildings/[id]/users  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>ApiResponse of List&lt;V11UserRightResponse&gt;</returns>
        ApiResponse<List<V11UserRightResponse>> ApiV11BuildingsByIdUsersGetWithHttpInfo (Guid? id);
        /// <summary>
        /// Replaces the security of a users for a building.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/portfolios/[id]/users  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="users">The users to set. (optional)</param>
        /// <returns>V11UserRightResponse</returns>
        V11UserRightResponse ApiV11BuildingsByIdUsersPut (Guid? id, List<V11UserRightRequest> users = null);

        /// <summary>
        /// Replaces the security of a users for a building.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/portfolios/[id]/users  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="users">The users to set. (optional)</param>
        /// <returns>ApiResponse of V11UserRightResponse</returns>
        ApiResponse<V11UserRightResponse> ApiV11BuildingsByIdUsersPutWithHttpInfo (Guid? id, List<V11UserRightRequest> users = null);
        /// <summary>
        /// Gets building validation parameters.
        /// </summary>
        /// <remarks>
        /// Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/buildings/[id]/validate  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>List&lt;V11ValidationGraph&gt;</returns>
        List<V11ValidationGraph> ApiV11BuildingsByIdValidateGet (Guid? id);

        /// <summary>
        /// Gets building validation parameters.
        /// </summary>
        /// <remarks>
        /// Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/buildings/[id]/validate  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>ApiResponse of List&lt;V11ValidationGraph&gt;</returns>
        ApiResponse<List<V11ValidationGraph>> ApiV11BuildingsByIdValidateGetWithHttpInfo (Guid? id);
        /// <summary>
        /// Gets all buildings.
        /// </summary>
        /// <remarks>
        /// Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/buildings  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;BuildingResponse&gt;</returns>
        List<BuildingResponse> ApiV11BuildingsGet ();

        /// <summary>
        /// Gets all buildings.
        /// </summary>
        /// <remarks>
        /// Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/buildings  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;BuildingResponse&gt;</returns>
        ApiResponse<List<BuildingResponse>> ApiV11BuildingsGetWithHttpInfo ();
        /// <summary>
        /// Adds a building.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="building">The building model. (optional)</param>
        /// <returns>BuildingResponse</returns>
        BuildingResponse ApiV11BuildingsPost (V11BuildingRequest building = null);

        /// <summary>
        /// Adds a building.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="building">The building model. (optional)</param>
        /// <returns>ApiResponse of BuildingResponse</returns>
        ApiResponse<BuildingResponse> ApiV11BuildingsPostWithHttpInfo (V11BuildingRequest building = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets the circular information of a building.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiV11BuildingsByIdCircularGetAsync (Guid? id);

        /// <summary>
        /// Gets the circular information of a building.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiV11BuildingsByIdCircularGetAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// Deletes the building and all related data.
        /// </summary>
        /// <remarks>
        /// &lt;returns&gt;              The building was successfully deleted.              &lt;/returns&gt;              Sample request:              &#x60;&#x60;&#x60;              DELETE api/[version]/buildings/[id]/delete              &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV11BuildingsByIdDeleteAsync (Guid? id);

        /// <summary>
        /// Deletes the building and all related data.
        /// </summary>
        /// <remarks>
        /// &lt;returns&gt;              The building was successfully deleted.              &lt;/returns&gt;              Sample request:              &#x60;&#x60;&#x60;              DELETE api/[version]/buildings/[id]/delete              &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV11BuildingsByIdDeleteAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// Schedules the generation of a PDF building passport.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/exportexcelpassport  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="acceptLanguage">The culture to use for the request (optional, default to en)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV11BuildingsByIdExportexcelpassportPostAsync (Guid? id, string acceptLanguage = null);

        /// <summary>
        /// Schedules the generation of a PDF building passport.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/exportexcelpassport  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="acceptLanguage">The culture to use for the request (optional, default to en)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV11BuildingsByIdExportexcelpassportPostAsyncWithHttpInfo (Guid? id, string acceptLanguage = null);
        /// <summary>
        /// Schedules the generation of a PDF building passport.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/exportpassport  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="acceptLanguage">The culture to use for the request (optional, default to en)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV11BuildingsByIdExportpassportPostAsync (Guid? id, string acceptLanguage = null);

        /// <summary>
        /// Schedules the generation of a PDF building passport.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/exportpassport  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="acceptLanguage">The culture to use for the request (optional, default to en)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV11BuildingsByIdExportpassportPostAsyncWithHttpInfo (Guid? id, string acceptLanguage = null);
        /// <summary>
        /// Gets the financial information of a building.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="request">The request model specifying optional calculation variables. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiV11BuildingsByIdFinancialGetAsync (Guid? id, V11BuildingFinancialInformationRequest request = null);

        /// <summary>
        /// Gets the financial information of a building.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="request">The request model specifying optional calculation variables. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiV11BuildingsByIdFinancialGetAsyncWithHttpInfo (Guid? id, V11BuildingFinancialInformationRequest request = null);
        /// <summary>
        /// Gets a building by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>Task of BuildingResponse</returns>
        System.Threading.Tasks.Task<BuildingResponse> ApiV11BuildingsByIdGetAsync (Guid? id);

        /// <summary>
        /// Gets a building by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>Task of ApiResponse (BuildingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildingResponse>> ApiV11BuildingsByIdGetAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// Adds an image to a building.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/images  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="attachment">The logo file.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiV11BuildingsByIdImagesPostAsync (Guid? id, System.IO.Stream attachment);

        /// <summary>
        /// Adds an image to a building.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/images  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="attachment">The logo file.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiV11BuildingsByIdImagesPostAsyncWithHttpInfo (Guid? id, System.IO.Stream attachment);
        /// <summary>
        /// Schedules the building for proccesing, recalculates all data.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/process  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV11BuildingsByIdProcessPostAsync (Guid? id);

        /// <summary>
        /// Schedules the building for proccesing, recalculates all data.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/process  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV11BuildingsByIdProcessPostAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// Replaces a building.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/buildings/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="building">The building model. (optional)</param>
        /// <returns>Task of BuildingResponse</returns>
        System.Threading.Tasks.Task<BuildingResponse> ApiV11BuildingsByIdPutAsync (Guid? id, BuildingRequest building = null);

        /// <summary>
        /// Replaces a building.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/buildings/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="building">The building model. (optional)</param>
        /// <returns>Task of ApiResponse (BuildingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildingResponse>> ApiV11BuildingsByIdPutAsyncWithHttpInfo (Guid? id, BuildingRequest building = null);
        /// <summary>
        /// Gets all users for a building.
        /// </summary>
        /// <remarks>
        /// Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/buildings/[id]/users  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>Task of List&lt;V11UserRightResponse&gt;</returns>
        System.Threading.Tasks.Task<List<V11UserRightResponse>> ApiV11BuildingsByIdUsersGetAsync (Guid? id);

        /// <summary>
        /// Gets all users for a building.
        /// </summary>
        /// <remarks>
        /// Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/buildings/[id]/users  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>Task of ApiResponse (List&lt;V11UserRightResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V11UserRightResponse>>> ApiV11BuildingsByIdUsersGetAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// Replaces the security of a users for a building.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/portfolios/[id]/users  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="users">The users to set. (optional)</param>
        /// <returns>Task of V11UserRightResponse</returns>
        System.Threading.Tasks.Task<V11UserRightResponse> ApiV11BuildingsByIdUsersPutAsync (Guid? id, List<V11UserRightRequest> users = null);

        /// <summary>
        /// Replaces the security of a users for a building.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/portfolios/[id]/users  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="users">The users to set. (optional)</param>
        /// <returns>Task of ApiResponse (V11UserRightResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V11UserRightResponse>> ApiV11BuildingsByIdUsersPutAsyncWithHttpInfo (Guid? id, List<V11UserRightRequest> users = null);
        /// <summary>
        /// Gets building validation parameters.
        /// </summary>
        /// <remarks>
        /// Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/buildings/[id]/validate  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>Task of List&lt;V11ValidationGraph&gt;</returns>
        System.Threading.Tasks.Task<List<V11ValidationGraph>> ApiV11BuildingsByIdValidateGetAsync (Guid? id);

        /// <summary>
        /// Gets building validation parameters.
        /// </summary>
        /// <remarks>
        /// Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/buildings/[id]/validate  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>Task of ApiResponse (List&lt;V11ValidationGraph&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V11ValidationGraph>>> ApiV11BuildingsByIdValidateGetAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// Gets all buildings.
        /// </summary>
        /// <remarks>
        /// Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/buildings  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;BuildingResponse&gt;</returns>
        System.Threading.Tasks.Task<List<BuildingResponse>> ApiV11BuildingsGetAsync ();

        /// <summary>
        /// Gets all buildings.
        /// </summary>
        /// <remarks>
        /// Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/buildings  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;BuildingResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BuildingResponse>>> ApiV11BuildingsGetAsyncWithHttpInfo ();
        /// <summary>
        /// Adds a building.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="building">The building model. (optional)</param>
        /// <returns>Task of BuildingResponse</returns>
        System.Threading.Tasks.Task<BuildingResponse> ApiV11BuildingsPostAsync (V11BuildingRequest building = null);

        /// <summary>
        /// Adds a building.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="building">The building model. (optional)</param>
        /// <returns>Task of ApiResponse (BuildingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildingResponse>> ApiV11BuildingsPostAsyncWithHttpInfo (V11BuildingRequest building = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BuildingApi : IBuildingApi
    {
        private Madaster.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BuildingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BuildingApi(String basePath)
        {
            this.Configuration = new Madaster.API.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Madaster.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BuildingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BuildingApi(Madaster.API.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Madaster.API.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Madaster.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Madaster.API.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Madaster.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets the circular information of a building. 
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>string</returns>
        public string ApiV11BuildingsByIdCircularGet (Guid? id)
        {
             ApiResponse<string> localVarResponse = ApiV11BuildingsByIdCircularGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the circular information of a building. 
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ApiV11BuildingsByIdCircularGetWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingApi->ApiV11BuildingsByIdCircularGet");

            var localVarPath = "/api/v1.1/buildings/{id}/circular";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByIdCircularGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Gets the circular information of a building. 
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiV11BuildingsByIdCircularGetAsync (Guid? id)
        {
             ApiResponse<string> localVarResponse = await ApiV11BuildingsByIdCircularGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the circular information of a building. 
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ApiV11BuildingsByIdCircularGetAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingApi->ApiV11BuildingsByIdCircularGet");

            var localVarPath = "/api/v1.1/buildings/{id}/circular";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByIdCircularGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Deletes the building and all related data. &lt;returns&gt;              The building was successfully deleted.              &lt;/returns&gt;              Sample request:              &#x60;&#x60;&#x60;              DELETE api/[version]/buildings/[id]/delete              &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns></returns>
        public void ApiV11BuildingsByIdDelete (Guid? id)
        {
             ApiV11BuildingsByIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes the building and all related data. &lt;returns&gt;              The building was successfully deleted.              &lt;/returns&gt;              Sample request:              &#x60;&#x60;&#x60;              DELETE api/[version]/buildings/[id]/delete              &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV11BuildingsByIdDeleteWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingApi->ApiV11BuildingsByIdDelete");

            var localVarPath = "/api/v1.1/buildings/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the building and all related data. &lt;returns&gt;              The building was successfully deleted.              &lt;/returns&gt;              Sample request:              &#x60;&#x60;&#x60;              DELETE api/[version]/buildings/[id]/delete              &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV11BuildingsByIdDeleteAsync (Guid? id)
        {
             await ApiV11BuildingsByIdDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes the building and all related data. &lt;returns&gt;              The building was successfully deleted.              &lt;/returns&gt;              Sample request:              &#x60;&#x60;&#x60;              DELETE api/[version]/buildings/[id]/delete              &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV11BuildingsByIdDeleteAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingApi->ApiV11BuildingsByIdDelete");

            var localVarPath = "/api/v1.1/buildings/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Schedules the generation of a PDF building passport. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/exportexcelpassport  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="acceptLanguage">The culture to use for the request (optional, default to en)</param>
        /// <returns></returns>
        public void ApiV11BuildingsByIdExportexcelpassportPost (Guid? id, string acceptLanguage = null)
        {
             ApiV11BuildingsByIdExportexcelpassportPostWithHttpInfo(id, acceptLanguage);
        }

        /// <summary>
        /// Schedules the generation of a PDF building passport. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/exportexcelpassport  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="acceptLanguage">The culture to use for the request (optional, default to en)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV11BuildingsByIdExportexcelpassportPostWithHttpInfo (Guid? id, string acceptLanguage = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingApi->ApiV11BuildingsByIdExportexcelpassportPost");

            var localVarPath = "/api/v1.1/buildings/{id}/exportexcelpassport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("accept-language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByIdExportexcelpassportPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Schedules the generation of a PDF building passport. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/exportexcelpassport  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="acceptLanguage">The culture to use for the request (optional, default to en)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV11BuildingsByIdExportexcelpassportPostAsync (Guid? id, string acceptLanguage = null)
        {
             await ApiV11BuildingsByIdExportexcelpassportPostAsyncWithHttpInfo(id, acceptLanguage);

        }

        /// <summary>
        /// Schedules the generation of a PDF building passport. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/exportexcelpassport  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="acceptLanguage">The culture to use for the request (optional, default to en)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV11BuildingsByIdExportexcelpassportPostAsyncWithHttpInfo (Guid? id, string acceptLanguage = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingApi->ApiV11BuildingsByIdExportexcelpassportPost");

            var localVarPath = "/api/v1.1/buildings/{id}/exportexcelpassport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("accept-language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByIdExportexcelpassportPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Schedules the generation of a PDF building passport. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/exportpassport  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="acceptLanguage">The culture to use for the request (optional, default to en)</param>
        /// <returns></returns>
        public void ApiV11BuildingsByIdExportpassportPost (Guid? id, string acceptLanguage = null)
        {
             ApiV11BuildingsByIdExportpassportPostWithHttpInfo(id, acceptLanguage);
        }

        /// <summary>
        /// Schedules the generation of a PDF building passport. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/exportpassport  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="acceptLanguage">The culture to use for the request (optional, default to en)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV11BuildingsByIdExportpassportPostWithHttpInfo (Guid? id, string acceptLanguage = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingApi->ApiV11BuildingsByIdExportpassportPost");

            var localVarPath = "/api/v1.1/buildings/{id}/exportpassport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("accept-language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByIdExportpassportPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Schedules the generation of a PDF building passport. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/exportpassport  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="acceptLanguage">The culture to use for the request (optional, default to en)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV11BuildingsByIdExportpassportPostAsync (Guid? id, string acceptLanguage = null)
        {
             await ApiV11BuildingsByIdExportpassportPostAsyncWithHttpInfo(id, acceptLanguage);

        }

        /// <summary>
        /// Schedules the generation of a PDF building passport. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/exportpassport  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="acceptLanguage">The culture to use for the request (optional, default to en)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV11BuildingsByIdExportpassportPostAsyncWithHttpInfo (Guid? id, string acceptLanguage = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingApi->ApiV11BuildingsByIdExportpassportPost");

            var localVarPath = "/api/v1.1/buildings/{id}/exportpassport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("accept-language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByIdExportpassportPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the financial information of a building. 
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="request">The request model specifying optional calculation variables. (optional)</param>
        /// <returns>string</returns>
        public string ApiV11BuildingsByIdFinancialGet (Guid? id, V11BuildingFinancialInformationRequest request = null)
        {
             ApiResponse<string> localVarResponse = ApiV11BuildingsByIdFinancialGetWithHttpInfo(id, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the financial information of a building. 
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="request">The request model specifying optional calculation variables. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ApiV11BuildingsByIdFinancialGetWithHttpInfo (Guid? id, V11BuildingFinancialInformationRequest request = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingApi->ApiV11BuildingsByIdFinancialGet");

            var localVarPath = "/api/v1.1/buildings/{id}/financial";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByIdFinancialGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Gets the financial information of a building. 
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="request">The request model specifying optional calculation variables. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiV11BuildingsByIdFinancialGetAsync (Guid? id, V11BuildingFinancialInformationRequest request = null)
        {
             ApiResponse<string> localVarResponse = await ApiV11BuildingsByIdFinancialGetAsyncWithHttpInfo(id, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the financial information of a building. 
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="request">The request model specifying optional calculation variables. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ApiV11BuildingsByIdFinancialGetAsyncWithHttpInfo (Guid? id, V11BuildingFinancialInformationRequest request = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingApi->ApiV11BuildingsByIdFinancialGet");

            var localVarPath = "/api/v1.1/buildings/{id}/financial";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByIdFinancialGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Gets a building by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>BuildingResponse</returns>
        public BuildingResponse ApiV11BuildingsByIdGet (Guid? id)
        {
             ApiResponse<BuildingResponse> localVarResponse = ApiV11BuildingsByIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a building by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>ApiResponse of BuildingResponse</returns>
        public ApiResponse< BuildingResponse > ApiV11BuildingsByIdGetWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingApi->ApiV11BuildingsByIdGet");

            var localVarPath = "/api/v1.1/buildings/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildingResponse)));
        }

        /// <summary>
        /// Gets a building by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>Task of BuildingResponse</returns>
        public async System.Threading.Tasks.Task<BuildingResponse> ApiV11BuildingsByIdGetAsync (Guid? id)
        {
             ApiResponse<BuildingResponse> localVarResponse = await ApiV11BuildingsByIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a building by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>Task of ApiResponse (BuildingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildingResponse>> ApiV11BuildingsByIdGetAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingApi->ApiV11BuildingsByIdGet");

            var localVarPath = "/api/v1.1/buildings/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildingResponse)));
        }

        /// <summary>
        /// Adds an image to a building. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/images  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="attachment">The logo file.</param>
        /// <returns>string</returns>
        public string ApiV11BuildingsByIdImagesPost (Guid? id, System.IO.Stream attachment)
        {
             ApiResponse<string> localVarResponse = ApiV11BuildingsByIdImagesPostWithHttpInfo(id, attachment);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds an image to a building. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/images  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="attachment">The logo file.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ApiV11BuildingsByIdImagesPostWithHttpInfo (Guid? id, System.IO.Stream attachment)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingApi->ApiV11BuildingsByIdImagesPost");
            // verify the required parameter 'attachment' is set
            if (attachment == null)
                throw new ApiException(400, "Missing required parameter 'attachment' when calling BuildingApi->ApiV11BuildingsByIdImagesPost");

            var localVarPath = "/api/v1.1/buildings/{id}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (attachment != null) localVarFileParams.Add("attachment", this.Configuration.ApiClient.ParameterToFile("attachment", attachment));

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByIdImagesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Adds an image to a building. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/images  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="attachment">The logo file.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiV11BuildingsByIdImagesPostAsync (Guid? id, System.IO.Stream attachment)
        {
             ApiResponse<string> localVarResponse = await ApiV11BuildingsByIdImagesPostAsyncWithHttpInfo(id, attachment);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds an image to a building. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/images  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="attachment">The logo file.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ApiV11BuildingsByIdImagesPostAsyncWithHttpInfo (Guid? id, System.IO.Stream attachment)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingApi->ApiV11BuildingsByIdImagesPost");
            // verify the required parameter 'attachment' is set
            if (attachment == null)
                throw new ApiException(400, "Missing required parameter 'attachment' when calling BuildingApi->ApiV11BuildingsByIdImagesPost");

            var localVarPath = "/api/v1.1/buildings/{id}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (attachment != null) localVarFileParams.Add("attachment", this.Configuration.ApiClient.ParameterToFile("attachment", attachment));

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByIdImagesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Schedules the building for proccesing, recalculates all data. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/process  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns></returns>
        public void ApiV11BuildingsByIdProcessPost (Guid? id)
        {
             ApiV11BuildingsByIdProcessPostWithHttpInfo(id);
        }

        /// <summary>
        /// Schedules the building for proccesing, recalculates all data. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/process  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV11BuildingsByIdProcessPostWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingApi->ApiV11BuildingsByIdProcessPost");

            var localVarPath = "/api/v1.1/buildings/{id}/process";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByIdProcessPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Schedules the building for proccesing, recalculates all data. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/process  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV11BuildingsByIdProcessPostAsync (Guid? id)
        {
             await ApiV11BuildingsByIdProcessPostAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Schedules the building for proccesing, recalculates all data. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[id]/process  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV11BuildingsByIdProcessPostAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingApi->ApiV11BuildingsByIdProcessPost");

            var localVarPath = "/api/v1.1/buildings/{id}/process";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByIdProcessPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Replaces a building. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/buildings/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="building">The building model. (optional)</param>
        /// <returns>BuildingResponse</returns>
        public BuildingResponse ApiV11BuildingsByIdPut (Guid? id, BuildingRequest building = null)
        {
             ApiResponse<BuildingResponse> localVarResponse = ApiV11BuildingsByIdPutWithHttpInfo(id, building);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replaces a building. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/buildings/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="building">The building model. (optional)</param>
        /// <returns>ApiResponse of BuildingResponse</returns>
        public ApiResponse< BuildingResponse > ApiV11BuildingsByIdPutWithHttpInfo (Guid? id, BuildingRequest building = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingApi->ApiV11BuildingsByIdPut");

            var localVarPath = "/api/v1.1/buildings/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (building != null && building.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(building); // http body (model) parameter
            }
            else
            {
                localVarPostBody = building; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildingResponse)));
        }

        /// <summary>
        /// Replaces a building. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/buildings/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="building">The building model. (optional)</param>
        /// <returns>Task of BuildingResponse</returns>
        public async System.Threading.Tasks.Task<BuildingResponse> ApiV11BuildingsByIdPutAsync (Guid? id, BuildingRequest building = null)
        {
             ApiResponse<BuildingResponse> localVarResponse = await ApiV11BuildingsByIdPutAsyncWithHttpInfo(id, building);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replaces a building. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/buildings/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <param name="building">The building model. (optional)</param>
        /// <returns>Task of ApiResponse (BuildingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildingResponse>> ApiV11BuildingsByIdPutAsyncWithHttpInfo (Guid? id, BuildingRequest building = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingApi->ApiV11BuildingsByIdPut");

            var localVarPath = "/api/v1.1/buildings/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (building != null && building.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(building); // http body (model) parameter
            }
            else
            {
                localVarPostBody = building; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildingResponse)));
        }

        /// <summary>
        /// Gets all users for a building. Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/buildings/[id]/users  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>List&lt;V11UserRightResponse&gt;</returns>
        public List<V11UserRightResponse> ApiV11BuildingsByIdUsersGet (Guid? id)
        {
             ApiResponse<List<V11UserRightResponse>> localVarResponse = ApiV11BuildingsByIdUsersGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all users for a building. Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/buildings/[id]/users  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>ApiResponse of List&lt;V11UserRightResponse&gt;</returns>
        public ApiResponse< List<V11UserRightResponse> > ApiV11BuildingsByIdUsersGetWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingApi->ApiV11BuildingsByIdUsersGet");

            var localVarPath = "/api/v1.1/buildings/{id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByIdUsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V11UserRightResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V11UserRightResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V11UserRightResponse>)));
        }

        /// <summary>
        /// Gets all users for a building. Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/buildings/[id]/users  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>Task of List&lt;V11UserRightResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<V11UserRightResponse>> ApiV11BuildingsByIdUsersGetAsync (Guid? id)
        {
             ApiResponse<List<V11UserRightResponse>> localVarResponse = await ApiV11BuildingsByIdUsersGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all users for a building. Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/buildings/[id]/users  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>Task of ApiResponse (List&lt;V11UserRightResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V11UserRightResponse>>> ApiV11BuildingsByIdUsersGetAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingApi->ApiV11BuildingsByIdUsersGet");

            var localVarPath = "/api/v1.1/buildings/{id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByIdUsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V11UserRightResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V11UserRightResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V11UserRightResponse>)));
        }

        /// <summary>
        /// Replaces the security of a users for a building. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/portfolios/[id]/users  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="users">The users to set. (optional)</param>
        /// <returns>V11UserRightResponse</returns>
        public V11UserRightResponse ApiV11BuildingsByIdUsersPut (Guid? id, List<V11UserRightRequest> users = null)
        {
             ApiResponse<V11UserRightResponse> localVarResponse = ApiV11BuildingsByIdUsersPutWithHttpInfo(id, users);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replaces the security of a users for a building. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/portfolios/[id]/users  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="users">The users to set. (optional)</param>
        /// <returns>ApiResponse of V11UserRightResponse</returns>
        public ApiResponse< V11UserRightResponse > ApiV11BuildingsByIdUsersPutWithHttpInfo (Guid? id, List<V11UserRightRequest> users = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingApi->ApiV11BuildingsByIdUsersPut");

            var localVarPath = "/api/v1.1/buildings/{id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (users != null && users.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(users); // http body (model) parameter
            }
            else
            {
                localVarPostBody = users; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByIdUsersPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V11UserRightResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V11UserRightResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(V11UserRightResponse)));
        }

        /// <summary>
        /// Replaces the security of a users for a building. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/portfolios/[id]/users  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="users">The users to set. (optional)</param>
        /// <returns>Task of V11UserRightResponse</returns>
        public async System.Threading.Tasks.Task<V11UserRightResponse> ApiV11BuildingsByIdUsersPutAsync (Guid? id, List<V11UserRightRequest> users = null)
        {
             ApiResponse<V11UserRightResponse> localVarResponse = await ApiV11BuildingsByIdUsersPutAsyncWithHttpInfo(id, users);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replaces the security of a users for a building. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/portfolios/[id]/users  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="users">The users to set. (optional)</param>
        /// <returns>Task of ApiResponse (V11UserRightResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V11UserRightResponse>> ApiV11BuildingsByIdUsersPutAsyncWithHttpInfo (Guid? id, List<V11UserRightRequest> users = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingApi->ApiV11BuildingsByIdUsersPut");

            var localVarPath = "/api/v1.1/buildings/{id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (users != null && users.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(users); // http body (model) parameter
            }
            else
            {
                localVarPostBody = users; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByIdUsersPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V11UserRightResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V11UserRightResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(V11UserRightResponse)));
        }

        /// <summary>
        /// Gets building validation parameters. Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/buildings/[id]/validate  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>List&lt;V11ValidationGraph&gt;</returns>
        public List<V11ValidationGraph> ApiV11BuildingsByIdValidateGet (Guid? id)
        {
             ApiResponse<List<V11ValidationGraph>> localVarResponse = ApiV11BuildingsByIdValidateGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets building validation parameters. Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/buildings/[id]/validate  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>ApiResponse of List&lt;V11ValidationGraph&gt;</returns>
        public ApiResponse< List<V11ValidationGraph> > ApiV11BuildingsByIdValidateGetWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingApi->ApiV11BuildingsByIdValidateGet");

            var localVarPath = "/api/v1.1/buildings/{id}/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByIdValidateGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V11ValidationGraph>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V11ValidationGraph>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V11ValidationGraph>)));
        }

        /// <summary>
        /// Gets building validation parameters. Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/buildings/[id]/validate  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>Task of List&lt;V11ValidationGraph&gt;</returns>
        public async System.Threading.Tasks.Task<List<V11ValidationGraph>> ApiV11BuildingsByIdValidateGetAsync (Guid? id)
        {
             ApiResponse<List<V11ValidationGraph>> localVarResponse = await ApiV11BuildingsByIdValidateGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets building validation parameters. Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/buildings/[id]/validate  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>Task of ApiResponse (List&lt;V11ValidationGraph&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V11ValidationGraph>>> ApiV11BuildingsByIdValidateGetAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingApi->ApiV11BuildingsByIdValidateGet");

            var localVarPath = "/api/v1.1/buildings/{id}/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByIdValidateGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V11ValidationGraph>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V11ValidationGraph>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V11ValidationGraph>)));
        }

        /// <summary>
        /// Gets all buildings. Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/buildings  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;BuildingResponse&gt;</returns>
        public List<BuildingResponse> ApiV11BuildingsGet ()
        {
             ApiResponse<List<BuildingResponse>> localVarResponse = ApiV11BuildingsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all buildings. Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/buildings  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;BuildingResponse&gt;</returns>
        public ApiResponse< List<BuildingResponse> > ApiV11BuildingsGetWithHttpInfo ()
        {

            var localVarPath = "/api/v1.1/buildings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BuildingResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BuildingResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BuildingResponse>)));
        }

        /// <summary>
        /// Gets all buildings. Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/buildings  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;BuildingResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<BuildingResponse>> ApiV11BuildingsGetAsync ()
        {
             ApiResponse<List<BuildingResponse>> localVarResponse = await ApiV11BuildingsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all buildings. Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/buildings  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;BuildingResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BuildingResponse>>> ApiV11BuildingsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1.1/buildings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BuildingResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BuildingResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BuildingResponse>)));
        }

        /// <summary>
        /// Adds a building. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="building">The building model. (optional)</param>
        /// <returns>BuildingResponse</returns>
        public BuildingResponse ApiV11BuildingsPost (V11BuildingRequest building = null)
        {
             ApiResponse<BuildingResponse> localVarResponse = ApiV11BuildingsPostWithHttpInfo(building);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a building. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="building">The building model. (optional)</param>
        /// <returns>ApiResponse of BuildingResponse</returns>
        public ApiResponse< BuildingResponse > ApiV11BuildingsPostWithHttpInfo (V11BuildingRequest building = null)
        {

            var localVarPath = "/api/v1.1/buildings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (building != null && building.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(building); // http body (model) parameter
            }
            else
            {
                localVarPostBody = building; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildingResponse)));
        }

        /// <summary>
        /// Adds a building. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="building">The building model. (optional)</param>
        /// <returns>Task of BuildingResponse</returns>
        public async System.Threading.Tasks.Task<BuildingResponse> ApiV11BuildingsPostAsync (V11BuildingRequest building = null)
        {
             ApiResponse<BuildingResponse> localVarResponse = await ApiV11BuildingsPostAsyncWithHttpInfo(building);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a building. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="building">The building model. (optional)</param>
        /// <returns>Task of ApiResponse (BuildingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildingResponse>> ApiV11BuildingsPostAsyncWithHttpInfo (V11BuildingRequest building = null)
        {

            var localVarPath = "/api/v1.1/buildings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (building != null && building.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(building); // http body (model) parameter
            }
            else
            {
                localVarPostBody = building; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildingResponse)));
        }

    }
}
