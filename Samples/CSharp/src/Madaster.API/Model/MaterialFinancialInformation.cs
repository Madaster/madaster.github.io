/* 
 * Madaster Private API
 *
 * The Madaster Private API endpoint.
 *
 * OpenAPI spec version: 1.1
 * Contact: service@madaster.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Madaster.API.Client.SwaggerDateConverter;

namespace Madaster.API.Model
{
    /// <summary>
    /// The financial properties of the element
    /// </summary>
    [DataContract]
    public partial class MaterialFinancialInformation :  IEquatable<MaterialFinancialInformation>, IValidatableObject
    {
        /// <summary>
        /// The type of import that supplies this financial information
        /// </summary>
        /// <value>The type of import that supplies this financial information</value>
        public enum ImportTypeEnum
        {
            
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            
            NUMBER_0 = 0,
            
            /// <summary>
            /// Enum NUMBER_10 for value: 10
            /// </summary>
            
            NUMBER_10 = 10,
            
            /// <summary>
            /// Enum NUMBER_20 for value: 20
            /// </summary>
            
            NUMBER_20 = 20,
            
            /// <summary>
            /// Enum NUMBER_30 for value: 30
            /// </summary>
            
            NUMBER_30 = 30
        }

        /// <summary>
        /// The type of import that supplies this financial information
        /// </summary>
        /// <value>The type of import that supplies this financial information</value>
        [DataMember(Name="importType", EmitDefaultValue=false)]
        public ImportTypeEnum? ImportType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialFinancialInformation" /> class.
        /// </summary>
        /// <param name="importType">The type of import that supplies this financial information.</param>
        /// <param name="priceSetId">The identifier of the price set that supplies the financial information.</param>
        /// <param name="transportCosts">The costs of transporting the material to its destination.</param>
        /// <param name="handlingFeedstockEuroKg">The handling costs of the material, in € / kg.</param>
        /// <param name="handlingFeedstockPercentage">The handling costs of the material, in percentage of its value.</param>
        public MaterialFinancialInformation(ImportTypeEnum? importType = default(ImportTypeEnum?), string priceSetId = default(string), double? transportCosts = default(double?), double? handlingFeedstockEuroKg = default(double?), double? handlingFeedstockPercentage = default(double?))
        {
            this.ImportType = importType;
            this.PriceSetId = priceSetId;
            this.TransportCosts = transportCosts;
            this.HandlingFeedstockEuroKg = handlingFeedstockEuroKg;
            this.HandlingFeedstockPercentage = handlingFeedstockPercentage;
        }
        

        /// <summary>
        /// The identifier of the price set that supplies the financial information
        /// </summary>
        /// <value>The identifier of the price set that supplies the financial information</value>
        [DataMember(Name="priceSetId", EmitDefaultValue=false)]
        public string PriceSetId { get; set; }

        /// <summary>
        /// The costs of transporting the material to its destination
        /// </summary>
        /// <value>The costs of transporting the material to its destination</value>
        [DataMember(Name="transportCosts", EmitDefaultValue=false)]
        public double? TransportCosts { get; set; }

        /// <summary>
        /// The handling costs of the material, in € / kg
        /// </summary>
        /// <value>The handling costs of the material, in € / kg</value>
        [DataMember(Name="handlingFeedstockEuroKg", EmitDefaultValue=false)]
        public double? HandlingFeedstockEuroKg { get; set; }

        /// <summary>
        /// The handling costs of the material, in percentage of its value
        /// </summary>
        /// <value>The handling costs of the material, in percentage of its value</value>
        [DataMember(Name="handlingFeedstockPercentage", EmitDefaultValue=false)]
        public double? HandlingFeedstockPercentage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MaterialFinancialInformation {\n");
            sb.Append("  ImportType: ").Append(ImportType).Append("\n");
            sb.Append("  PriceSetId: ").Append(PriceSetId).Append("\n");
            sb.Append("  TransportCosts: ").Append(TransportCosts).Append("\n");
            sb.Append("  HandlingFeedstockEuroKg: ").Append(HandlingFeedstockEuroKg).Append("\n");
            sb.Append("  HandlingFeedstockPercentage: ").Append(HandlingFeedstockPercentage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MaterialFinancialInformation);
        }

        /// <summary>
        /// Returns true if MaterialFinancialInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of MaterialFinancialInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MaterialFinancialInformation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ImportType == input.ImportType ||
                    (this.ImportType != null &&
                    this.ImportType.Equals(input.ImportType))
                ) && 
                (
                    this.PriceSetId == input.PriceSetId ||
                    (this.PriceSetId != null &&
                    this.PriceSetId.Equals(input.PriceSetId))
                ) && 
                (
                    this.TransportCosts == input.TransportCosts ||
                    (this.TransportCosts != null &&
                    this.TransportCosts.Equals(input.TransportCosts))
                ) && 
                (
                    this.HandlingFeedstockEuroKg == input.HandlingFeedstockEuroKg ||
                    (this.HandlingFeedstockEuroKg != null &&
                    this.HandlingFeedstockEuroKg.Equals(input.HandlingFeedstockEuroKg))
                ) && 
                (
                    this.HandlingFeedstockPercentage == input.HandlingFeedstockPercentage ||
                    (this.HandlingFeedstockPercentage != null &&
                    this.HandlingFeedstockPercentage.Equals(input.HandlingFeedstockPercentage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ImportType != null)
                    hashCode = hashCode * 59 + this.ImportType.GetHashCode();
                if (this.PriceSetId != null)
                    hashCode = hashCode * 59 + this.PriceSetId.GetHashCode();
                if (this.TransportCosts != null)
                    hashCode = hashCode * 59 + this.TransportCosts.GetHashCode();
                if (this.HandlingFeedstockEuroKg != null)
                    hashCode = hashCode * 59 + this.HandlingFeedstockEuroKg.GetHashCode();
                if (this.HandlingFeedstockPercentage != null)
                    hashCode = hashCode * 59 + this.HandlingFeedstockPercentage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
