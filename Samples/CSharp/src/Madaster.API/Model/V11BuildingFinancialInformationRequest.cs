/* 
 * Madaster Private API
 *
 * The Madaster Private API endpoint.
 *
 * OpenAPI spec version: 1.1
 * Contact: service@madaster.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Madaster.API.Client.SwaggerDateConverter;

namespace Madaster.API.Model
{
    /// <summary>
    /// V11BuildingFinancialInformationRequest
    /// </summary>
    [DataContract]
    public partial class V11BuildingFinancialInformationRequest :  IEquatable<V11BuildingFinancialInformationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V11BuildingFinancialInformationRequest" /> class.
        /// </summary>
        /// <param name="inflation">inflation.</param>
        /// <param name="bdbIndex">bdbIndex.</param>
        /// <param name="discountRate">discountRate.</param>
        public V11BuildingFinancialInformationRequest(double? inflation = default(double?), double? bdbIndex = default(double?), double? discountRate = default(double?))
        {
            this.Inflation = inflation;
            this.BdbIndex = bdbIndex;
            this.DiscountRate = discountRate;
        }
        
        /// <summary>
        /// Gets or Sets Inflation
        /// </summary>
        [DataMember(Name="inflation", EmitDefaultValue=false)]
        public double? Inflation { get; set; }

        /// <summary>
        /// Gets or Sets BdbIndex
        /// </summary>
        [DataMember(Name="bdbIndex", EmitDefaultValue=false)]
        public double? BdbIndex { get; set; }

        /// <summary>
        /// Gets or Sets DiscountRate
        /// </summary>
        [DataMember(Name="discountRate", EmitDefaultValue=false)]
        public double? DiscountRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V11BuildingFinancialInformationRequest {\n");
            sb.Append("  Inflation: ").Append(Inflation).Append("\n");
            sb.Append("  BdbIndex: ").Append(BdbIndex).Append("\n");
            sb.Append("  DiscountRate: ").Append(DiscountRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as V11BuildingFinancialInformationRequest);
        }

        /// <summary>
        /// Returns true if V11BuildingFinancialInformationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of V11BuildingFinancialInformationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V11BuildingFinancialInformationRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Inflation == input.Inflation ||
                    (this.Inflation != null &&
                    this.Inflation.Equals(input.Inflation))
                ) && 
                (
                    this.BdbIndex == input.BdbIndex ||
                    (this.BdbIndex != null &&
                    this.BdbIndex.Equals(input.BdbIndex))
                ) && 
                (
                    this.DiscountRate == input.DiscountRate ||
                    (this.DiscountRate != null &&
                    this.DiscountRate.Equals(input.DiscountRate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Inflation != null)
                    hashCode = hashCode * 59 + this.Inflation.GetHashCode();
                if (this.BdbIndex != null)
                    hashCode = hashCode * 59 + this.BdbIndex.GetHashCode();
                if (this.DiscountRate != null)
                    hashCode = hashCode * 59 + this.DiscountRate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
