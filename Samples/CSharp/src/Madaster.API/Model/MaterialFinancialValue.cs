/* 
 * Madaster Private API
 *
 * The Madaster Private API endpoint.
 *
 * OpenAPI spec version: 1.1
 * Contact: service@madaster.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Madaster.API.Client.SwaggerDateConverter;

namespace Madaster.API.Model
{
    /// <summary>
    /// A material financial value
    /// </summary>
    [DataContract]
    public partial class MaterialFinancialValue :  IEquatable<MaterialFinancialValue>, IValidatableObject
    {
        /// <summary>
        /// The unit of this value
        /// </summary>
        /// <value>The unit of this value</value>
        public enum UnitEnum
        {
            
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            
            NUMBER_0 = 0,
            
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            
            NUMBER_1 = 1,
            
            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            
            NUMBER_2 = 2,
            
            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            
            NUMBER_3 = 3,
            
            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            
            NUMBER_4 = 4,
            
            /// <summary>
            /// Enum NUMBER_5 for value: 5
            /// </summary>
            
            NUMBER_5 = 5
        }

        /// <summary>
        /// The unit of this value
        /// </summary>
        /// <value>The unit of this value</value>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public UnitEnum? Unit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialFinancialValue" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MaterialFinancialValue() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialFinancialValue" /> class.
        /// </summary>
        /// <param name="value">The value of the material at this given moment.</param>
        /// <param name="valueDate">The moment at which this value was taken.</param>
        /// <param name="currency">The identifier of the currency of this value (required).</param>
        /// <param name="unit">The unit of this value.</param>
        public MaterialFinancialValue(double? value = default(double?), DateTime? valueDate = default(DateTime?), string currency = default(string), UnitEnum? unit = default(UnitEnum?))
        {
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new InvalidDataException("currency is a required property for MaterialFinancialValue and cannot be null");
            }
            else
            {
                this.Currency = currency;
            }
            this.Value = value;
            this.ValueDate = valueDate;
            this.Unit = unit;
        }
        
        /// <summary>
        /// The value of the material at this given moment
        /// </summary>
        /// <value>The value of the material at this given moment</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public double? Value { get; set; }

        /// <summary>
        /// The moment at which this value was taken
        /// </summary>
        /// <value>The moment at which this value was taken</value>
        [DataMember(Name="valueDate", EmitDefaultValue=false)]
        public DateTime? ValueDate { get; set; }

        /// <summary>
        /// The identifier of the currency of this value
        /// </summary>
        /// <value>The identifier of the currency of this value</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MaterialFinancialValue {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ValueDate: ").Append(ValueDate).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MaterialFinancialValue);
        }

        /// <summary>
        /// Returns true if MaterialFinancialValue instances are equal
        /// </summary>
        /// <param name="input">Instance of MaterialFinancialValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MaterialFinancialValue input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.ValueDate == input.ValueDate ||
                    (this.ValueDate != null &&
                    this.ValueDate.Equals(input.ValueDate))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.ValueDate != null)
                    hashCode = hashCode * 59 + this.ValueDate.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
