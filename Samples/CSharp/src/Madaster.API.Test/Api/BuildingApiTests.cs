/* 
 * Madaster Private API
 *
 * The Madaster Private API endpoint.
 *
 * OpenAPI spec version: 1.1
 * Contact: service@madaster.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Madaster.API.Client;
using Madaster.API.Api;
using Madaster.API.Model;

namespace Madaster.API.Test
{
    /// <summary>
    ///  Class for testing BuildingApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class BuildingApiTests
    {
        private BuildingApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new BuildingApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of BuildingApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' BuildingApi
            //Assert.IsInstanceOfType(typeof(BuildingApi), instance, "instance is a BuildingApi");
        }

        
        /// <summary>
        /// Test ApiV11BuildingsByIdCircularGet
        /// </summary>
        [Test]
        public void ApiV11BuildingsByIdCircularGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //var response = instance.ApiV11BuildingsByIdCircularGet(id);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ApiV11BuildingsByIdDelete
        /// </summary>
        [Test]
        public void ApiV11BuildingsByIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //instance.ApiV11BuildingsByIdDelete(id);
            
        }
        
        /// <summary>
        /// Test ApiV11BuildingsByIdExportexcelpassportPost
        /// </summary>
        [Test]
        public void ApiV11BuildingsByIdExportexcelpassportPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //string acceptLanguage = null;
            //instance.ApiV11BuildingsByIdExportexcelpassportPost(id, acceptLanguage);
            
        }
        
        /// <summary>
        /// Test ApiV11BuildingsByIdExportpassportPost
        /// </summary>
        [Test]
        public void ApiV11BuildingsByIdExportpassportPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //string acceptLanguage = null;
            //instance.ApiV11BuildingsByIdExportpassportPost(id, acceptLanguage);
            
        }
        
        /// <summary>
        /// Test ApiV11BuildingsByIdFinancialGet
        /// </summary>
        [Test]
        public void ApiV11BuildingsByIdFinancialGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //V11BuildingFinancialInformationRequest request = null;
            //var response = instance.ApiV11BuildingsByIdFinancialGet(id, request);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ApiV11BuildingsByIdGet
        /// </summary>
        [Test]
        public void ApiV11BuildingsByIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //var response = instance.ApiV11BuildingsByIdGet(id);
            //Assert.IsInstanceOf<BuildingResponse> (response, "response is BuildingResponse");
        }
        
        /// <summary>
        /// Test ApiV11BuildingsByIdImagesPost
        /// </summary>
        [Test]
        public void ApiV11BuildingsByIdImagesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //System.IO.Stream attachment = null;
            //var response = instance.ApiV11BuildingsByIdImagesPost(id, attachment);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ApiV11BuildingsByIdProcessPost
        /// </summary>
        [Test]
        public void ApiV11BuildingsByIdProcessPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //instance.ApiV11BuildingsByIdProcessPost(id);
            
        }
        
        /// <summary>
        /// Test ApiV11BuildingsByIdPut
        /// </summary>
        [Test]
        public void ApiV11BuildingsByIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //BuildingRequest building = null;
            //var response = instance.ApiV11BuildingsByIdPut(id, building);
            //Assert.IsInstanceOf<BuildingResponse> (response, "response is BuildingResponse");
        }
        
        /// <summary>
        /// Test ApiV11BuildingsByIdUsersGet
        /// </summary>
        [Test]
        public void ApiV11BuildingsByIdUsersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //var response = instance.ApiV11BuildingsByIdUsersGet(id);
            //Assert.IsInstanceOf<List<V11UserRightResponse>> (response, "response is List<V11UserRightResponse>");
        }
        
        /// <summary>
        /// Test ApiV11BuildingsByIdUsersPut
        /// </summary>
        [Test]
        public void ApiV11BuildingsByIdUsersPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //List<V11UserRightRequest> users = null;
            //var response = instance.ApiV11BuildingsByIdUsersPut(id, users);
            //Assert.IsInstanceOf<V11UserRightResponse> (response, "response is V11UserRightResponse");
        }
        
        /// <summary>
        /// Test ApiV11BuildingsByIdValidateGet
        /// </summary>
        [Test]
        public void ApiV11BuildingsByIdValidateGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //var response = instance.ApiV11BuildingsByIdValidateGet(id);
            //Assert.IsInstanceOf<List<V11ValidationGraph>> (response, "response is List<V11ValidationGraph>");
        }
        
        /// <summary>
        /// Test ApiV11BuildingsGet
        /// </summary>
        [Test]
        public void ApiV11BuildingsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiV11BuildingsGet();
            //Assert.IsInstanceOf<List<BuildingResponse>> (response, "response is List<BuildingResponse>");
        }
        
        /// <summary>
        /// Test ApiV11BuildingsPost
        /// </summary>
        [Test]
        public void ApiV11BuildingsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //V11BuildingRequest building = null;
            //var response = instance.ApiV11BuildingsPost(building);
            //Assert.IsInstanceOf<BuildingResponse> (response, "response is BuildingResponse");
        }
        
    }

}
