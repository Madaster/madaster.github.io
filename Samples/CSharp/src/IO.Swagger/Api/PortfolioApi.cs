/* 
 * Madaster Private API
 *
 * The Madaster Private API endpoint.
 *
 * OpenAPI spec version: 1.1
 * Contact: service@madaster.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPortfolioApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets all buildings for a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[id]/buildings  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>List&lt;BuildingResponse&gt;</returns>
        List<BuildingResponse> ApiV11PortfoliosByIdBuildingsGet (Guid? id);

        /// <summary>
        /// Gets all buildings for a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[id]/buildings  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>ApiResponse of List&lt;BuildingResponse&gt;</returns>
        ApiResponse<List<BuildingResponse>> ApiV11PortfoliosByIdBuildingsGetWithHttpInfo (Guid? id);
        /// <summary>
        /// Deletes a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  DELETE api/[version]/portfolios/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns></returns>
        void ApiV11PortfoliosByIdDelete (Guid? id);

        /// <summary>
        /// Deletes a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  DELETE api/[version]/portfolios/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV11PortfoliosByIdDeleteWithHttpInfo (Guid? id);
        /// <summary>
        /// Gets a portfolio by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>PortfolioResponse</returns>
        PortfolioResponse ApiV11PortfoliosByIdGet (Guid? id);

        /// <summary>
        /// Gets a portfolio by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>ApiResponse of PortfolioResponse</returns>
        ApiResponse<PortfolioResponse> ApiV11PortfoliosByIdGetWithHttpInfo (Guid? id);
        /// <summary>
        /// Sets the logo of a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[id]/logo  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="attachment">The logo file.</param>
        /// <returns>string</returns>
        string ApiV11PortfoliosByIdLogoPost (Guid? id, System.IO.Stream attachment);

        /// <summary>
        /// Sets the logo of a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[id]/logo  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="attachment">The logo file.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiV11PortfoliosByIdLogoPostWithHttpInfo (Guid? id, System.IO.Stream attachment);
        /// <summary>
        /// Schedules the generation of a PDF portfolio passport.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[id]/passport  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="createPassportRequest">The request information to create the passport. (optional)</param>
        /// <param name="acceptLanguage">The culture to use for the request (optional, default to en)</param>
        /// <returns>V11PortfolioFileResponse</returns>
        V11PortfolioFileResponse ApiV11PortfoliosByIdPassportPost (Guid? id, V11CreatePassportRequest createPassportRequest = null, string acceptLanguage = null);

        /// <summary>
        /// Schedules the generation of a PDF portfolio passport.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[id]/passport  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="createPassportRequest">The request information to create the passport. (optional)</param>
        /// <param name="acceptLanguage">The culture to use for the request (optional, default to en)</param>
        /// <returns>ApiResponse of V11PortfolioFileResponse</returns>
        ApiResponse<V11PortfolioFileResponse> ApiV11PortfoliosByIdPassportPostWithHttpInfo (Guid? id, V11CreatePassportRequest createPassportRequest = null, string acceptLanguage = null);
        /// <summary>
        /// Replaces a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/portfolios/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="portfolio">The portfolio model. (optional)</param>
        /// <returns>PortfolioResponse</returns>
        PortfolioResponse ApiV11PortfoliosByIdPut (Guid? id, PortfolioRequest portfolio = null);

        /// <summary>
        /// Replaces a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/portfolios/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="portfolio">The portfolio model. (optional)</param>
        /// <returns>ApiResponse of PortfolioResponse</returns>
        ApiResponse<PortfolioResponse> ApiV11PortfoliosByIdPutWithHttpInfo (Guid? id, PortfolioRequest portfolio = null);
        /// <summary>
        /// Gets all users for a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[id]/users  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>List&lt;V11UserRightResponse&gt;</returns>
        List<V11UserRightResponse> ApiV11PortfoliosByIdUsersGet (Guid? id);

        /// <summary>
        /// Gets all users for a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[id]/users  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>ApiResponse of List&lt;V11UserRightResponse&gt;</returns>
        ApiResponse<List<V11UserRightResponse>> ApiV11PortfoliosByIdUsersGetWithHttpInfo (Guid? id);
        /// <summary>
        /// Replaces the security of a users for a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/portfolios/[id]/users  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="users">The users to set. (optional)</param>
        /// <returns>V11UserRightResponse</returns>
        V11UserRightResponse ApiV11PortfoliosByIdUsersPut (Guid? id, List<V11UserRightRequest> users = null);

        /// <summary>
        /// Replaces the security of a users for a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/portfolios/[id]/users  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="users">The users to set. (optional)</param>
        /// <returns>ApiResponse of V11UserRightResponse</returns>
        ApiResponse<V11UserRightResponse> ApiV11PortfoliosByIdUsersPutWithHttpInfo (Guid? id, List<V11UserRightRequest> users = null);
        /// <summary>
        /// Gets all portfolios.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PortfolioResponse&gt;</returns>
        List<PortfolioResponse> ApiV11PortfoliosGet ();

        /// <summary>
        /// Gets all portfolios.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PortfolioResponse&gt;</returns>
        ApiResponse<List<PortfolioResponse>> ApiV11PortfoliosGetWithHttpInfo ();
        /// <summary>
        /// Adds a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolio">The portfolio model. (optional)</param>
        /// <returns>PortfolioResponse</returns>
        PortfolioResponse ApiV11PortfoliosPost (PortfolioRequest portfolio = null);

        /// <summary>
        /// Adds a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolio">The portfolio model. (optional)</param>
        /// <returns>ApiResponse of PortfolioResponse</returns>
        ApiResponse<PortfolioResponse> ApiV11PortfoliosPostWithHttpInfo (PortfolioRequest portfolio = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets all buildings for a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[id]/buildings  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>Task of List&lt;BuildingResponse&gt;</returns>
        System.Threading.Tasks.Task<List<BuildingResponse>> ApiV11PortfoliosByIdBuildingsGetAsync (Guid? id);

        /// <summary>
        /// Gets all buildings for a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[id]/buildings  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>Task of ApiResponse (List&lt;BuildingResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BuildingResponse>>> ApiV11PortfoliosByIdBuildingsGetAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// Deletes a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  DELETE api/[version]/portfolios/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV11PortfoliosByIdDeleteAsync (Guid? id);

        /// <summary>
        /// Deletes a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  DELETE api/[version]/portfolios/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV11PortfoliosByIdDeleteAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// Gets a portfolio by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>Task of PortfolioResponse</returns>
        System.Threading.Tasks.Task<PortfolioResponse> ApiV11PortfoliosByIdGetAsync (Guid? id);

        /// <summary>
        /// Gets a portfolio by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>Task of ApiResponse (PortfolioResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortfolioResponse>> ApiV11PortfoliosByIdGetAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// Sets the logo of a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[id]/logo  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="attachment">The logo file.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiV11PortfoliosByIdLogoPostAsync (Guid? id, System.IO.Stream attachment);

        /// <summary>
        /// Sets the logo of a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[id]/logo  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="attachment">The logo file.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiV11PortfoliosByIdLogoPostAsyncWithHttpInfo (Guid? id, System.IO.Stream attachment);
        /// <summary>
        /// Schedules the generation of a PDF portfolio passport.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[id]/passport  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="createPassportRequest">The request information to create the passport. (optional)</param>
        /// <param name="acceptLanguage">The culture to use for the request (optional, default to en)</param>
        /// <returns>Task of V11PortfolioFileResponse</returns>
        System.Threading.Tasks.Task<V11PortfolioFileResponse> ApiV11PortfoliosByIdPassportPostAsync (Guid? id, V11CreatePassportRequest createPassportRequest = null, string acceptLanguage = null);

        /// <summary>
        /// Schedules the generation of a PDF portfolio passport.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[id]/passport  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="createPassportRequest">The request information to create the passport. (optional)</param>
        /// <param name="acceptLanguage">The culture to use for the request (optional, default to en)</param>
        /// <returns>Task of ApiResponse (V11PortfolioFileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V11PortfolioFileResponse>> ApiV11PortfoliosByIdPassportPostAsyncWithHttpInfo (Guid? id, V11CreatePassportRequest createPassportRequest = null, string acceptLanguage = null);
        /// <summary>
        /// Replaces a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/portfolios/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="portfolio">The portfolio model. (optional)</param>
        /// <returns>Task of PortfolioResponse</returns>
        System.Threading.Tasks.Task<PortfolioResponse> ApiV11PortfoliosByIdPutAsync (Guid? id, PortfolioRequest portfolio = null);

        /// <summary>
        /// Replaces a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/portfolios/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="portfolio">The portfolio model. (optional)</param>
        /// <returns>Task of ApiResponse (PortfolioResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortfolioResponse>> ApiV11PortfoliosByIdPutAsyncWithHttpInfo (Guid? id, PortfolioRequest portfolio = null);
        /// <summary>
        /// Gets all users for a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[id]/users  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>Task of List&lt;V11UserRightResponse&gt;</returns>
        System.Threading.Tasks.Task<List<V11UserRightResponse>> ApiV11PortfoliosByIdUsersGetAsync (Guid? id);

        /// <summary>
        /// Gets all users for a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[id]/users  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>Task of ApiResponse (List&lt;V11UserRightResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V11UserRightResponse>>> ApiV11PortfoliosByIdUsersGetAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// Replaces the security of a users for a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/portfolios/[id]/users  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="users">The users to set. (optional)</param>
        /// <returns>Task of V11UserRightResponse</returns>
        System.Threading.Tasks.Task<V11UserRightResponse> ApiV11PortfoliosByIdUsersPutAsync (Guid? id, List<V11UserRightRequest> users = null);

        /// <summary>
        /// Replaces the security of a users for a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/portfolios/[id]/users  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="users">The users to set. (optional)</param>
        /// <returns>Task of ApiResponse (V11UserRightResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V11UserRightResponse>> ApiV11PortfoliosByIdUsersPutAsyncWithHttpInfo (Guid? id, List<V11UserRightRequest> users = null);
        /// <summary>
        /// Gets all portfolios.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PortfolioResponse&gt;</returns>
        System.Threading.Tasks.Task<List<PortfolioResponse>> ApiV11PortfoliosGetAsync ();

        /// <summary>
        /// Gets all portfolios.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PortfolioResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PortfolioResponse>>> ApiV11PortfoliosGetAsyncWithHttpInfo ();
        /// <summary>
        /// Adds a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolio">The portfolio model. (optional)</param>
        /// <returns>Task of PortfolioResponse</returns>
        System.Threading.Tasks.Task<PortfolioResponse> ApiV11PortfoliosPostAsync (PortfolioRequest portfolio = null);

        /// <summary>
        /// Adds a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolio">The portfolio model. (optional)</param>
        /// <returns>Task of ApiResponse (PortfolioResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortfolioResponse>> ApiV11PortfoliosPostAsyncWithHttpInfo (PortfolioRequest portfolio = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PortfolioApi : IPortfolioApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PortfolioApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PortfolioApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets all buildings for a portfolio. Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[id]/buildings  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>List&lt;BuildingResponse&gt;</returns>
        public List<BuildingResponse> ApiV11PortfoliosByIdBuildingsGet (Guid? id)
        {
             ApiResponse<List<BuildingResponse>> localVarResponse = ApiV11PortfoliosByIdBuildingsGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all buildings for a portfolio. Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[id]/buildings  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>ApiResponse of List&lt;BuildingResponse&gt;</returns>
        public ApiResponse< List<BuildingResponse> > ApiV11PortfoliosByIdBuildingsGetWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortfolioApi->ApiV11PortfoliosByIdBuildingsGet");

            var localVarPath = "/api/v1.1/portfolios/{id}/buildings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosByIdBuildingsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BuildingResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BuildingResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BuildingResponse>)));
        }

        /// <summary>
        /// Gets all buildings for a portfolio. Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[id]/buildings  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>Task of List&lt;BuildingResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<BuildingResponse>> ApiV11PortfoliosByIdBuildingsGetAsync (Guid? id)
        {
             ApiResponse<List<BuildingResponse>> localVarResponse = await ApiV11PortfoliosByIdBuildingsGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all buildings for a portfolio. Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[id]/buildings  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>Task of ApiResponse (List&lt;BuildingResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BuildingResponse>>> ApiV11PortfoliosByIdBuildingsGetAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortfolioApi->ApiV11PortfoliosByIdBuildingsGet");

            var localVarPath = "/api/v1.1/portfolios/{id}/buildings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosByIdBuildingsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BuildingResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BuildingResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BuildingResponse>)));
        }

        /// <summary>
        /// Deletes a portfolio. Sample request:  &#x60;&#x60;&#x60;  DELETE api/[version]/portfolios/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns></returns>
        public void ApiV11PortfoliosByIdDelete (Guid? id)
        {
             ApiV11PortfoliosByIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes a portfolio. Sample request:  &#x60;&#x60;&#x60;  DELETE api/[version]/portfolios/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV11PortfoliosByIdDeleteWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortfolioApi->ApiV11PortfoliosByIdDelete");

            var localVarPath = "/api/v1.1/portfolios/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosByIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a portfolio. Sample request:  &#x60;&#x60;&#x60;  DELETE api/[version]/portfolios/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV11PortfoliosByIdDeleteAsync (Guid? id)
        {
             await ApiV11PortfoliosByIdDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes a portfolio. Sample request:  &#x60;&#x60;&#x60;  DELETE api/[version]/portfolios/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV11PortfoliosByIdDeleteAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortfolioApi->ApiV11PortfoliosByIdDelete");

            var localVarPath = "/api/v1.1/portfolios/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosByIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets a portfolio by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>PortfolioResponse</returns>
        public PortfolioResponse ApiV11PortfoliosByIdGet (Guid? id)
        {
             ApiResponse<PortfolioResponse> localVarResponse = ApiV11PortfoliosByIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a portfolio by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>ApiResponse of PortfolioResponse</returns>
        public ApiResponse< PortfolioResponse > ApiV11PortfoliosByIdGetWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortfolioApi->ApiV11PortfoliosByIdGet");

            var localVarPath = "/api/v1.1/portfolios/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioResponse)));
        }

        /// <summary>
        /// Gets a portfolio by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>Task of PortfolioResponse</returns>
        public async System.Threading.Tasks.Task<PortfolioResponse> ApiV11PortfoliosByIdGetAsync (Guid? id)
        {
             ApiResponse<PortfolioResponse> localVarResponse = await ApiV11PortfoliosByIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a portfolio by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>Task of ApiResponse (PortfolioResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortfolioResponse>> ApiV11PortfoliosByIdGetAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortfolioApi->ApiV11PortfoliosByIdGet");

            var localVarPath = "/api/v1.1/portfolios/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioResponse)));
        }

        /// <summary>
        /// Sets the logo of a portfolio. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[id]/logo  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="attachment">The logo file.</param>
        /// <returns>string</returns>
        public string ApiV11PortfoliosByIdLogoPost (Guid? id, System.IO.Stream attachment)
        {
             ApiResponse<string> localVarResponse = ApiV11PortfoliosByIdLogoPostWithHttpInfo(id, attachment);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the logo of a portfolio. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[id]/logo  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="attachment">The logo file.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ApiV11PortfoliosByIdLogoPostWithHttpInfo (Guid? id, System.IO.Stream attachment)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortfolioApi->ApiV11PortfoliosByIdLogoPost");
            // verify the required parameter 'attachment' is set
            if (attachment == null)
                throw new ApiException(400, "Missing required parameter 'attachment' when calling PortfolioApi->ApiV11PortfoliosByIdLogoPost");

            var localVarPath = "/api/v1.1/portfolios/{id}/logo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (attachment != null) localVarFileParams.Add("attachment", this.Configuration.ApiClient.ParameterToFile("attachment", attachment));

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosByIdLogoPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Sets the logo of a portfolio. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[id]/logo  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="attachment">The logo file.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiV11PortfoliosByIdLogoPostAsync (Guid? id, System.IO.Stream attachment)
        {
             ApiResponse<string> localVarResponse = await ApiV11PortfoliosByIdLogoPostAsyncWithHttpInfo(id, attachment);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets the logo of a portfolio. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[id]/logo  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="attachment">The logo file.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ApiV11PortfoliosByIdLogoPostAsyncWithHttpInfo (Guid? id, System.IO.Stream attachment)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortfolioApi->ApiV11PortfoliosByIdLogoPost");
            // verify the required parameter 'attachment' is set
            if (attachment == null)
                throw new ApiException(400, "Missing required parameter 'attachment' when calling PortfolioApi->ApiV11PortfoliosByIdLogoPost");

            var localVarPath = "/api/v1.1/portfolios/{id}/logo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (attachment != null) localVarFileParams.Add("attachment", this.Configuration.ApiClient.ParameterToFile("attachment", attachment));

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosByIdLogoPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Schedules the generation of a PDF portfolio passport. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[id]/passport  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="createPassportRequest">The request information to create the passport. (optional)</param>
        /// <param name="acceptLanguage">The culture to use for the request (optional, default to en)</param>
        /// <returns>V11PortfolioFileResponse</returns>
        public V11PortfolioFileResponse ApiV11PortfoliosByIdPassportPost (Guid? id, V11CreatePassportRequest createPassportRequest = null, string acceptLanguage = null)
        {
             ApiResponse<V11PortfolioFileResponse> localVarResponse = ApiV11PortfoliosByIdPassportPostWithHttpInfo(id, createPassportRequest, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Schedules the generation of a PDF portfolio passport. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[id]/passport  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="createPassportRequest">The request information to create the passport. (optional)</param>
        /// <param name="acceptLanguage">The culture to use for the request (optional, default to en)</param>
        /// <returns>ApiResponse of V11PortfolioFileResponse</returns>
        public ApiResponse< V11PortfolioFileResponse > ApiV11PortfoliosByIdPassportPostWithHttpInfo (Guid? id, V11CreatePassportRequest createPassportRequest = null, string acceptLanguage = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortfolioApi->ApiV11PortfoliosByIdPassportPost");

            var localVarPath = "/api/v1.1/portfolios/{id}/passport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("accept-language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (createPassportRequest != null && createPassportRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createPassportRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createPassportRequest; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosByIdPassportPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V11PortfolioFileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V11PortfolioFileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(V11PortfolioFileResponse)));
        }

        /// <summary>
        /// Schedules the generation of a PDF portfolio passport. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[id]/passport  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="createPassportRequest">The request information to create the passport. (optional)</param>
        /// <param name="acceptLanguage">The culture to use for the request (optional, default to en)</param>
        /// <returns>Task of V11PortfolioFileResponse</returns>
        public async System.Threading.Tasks.Task<V11PortfolioFileResponse> ApiV11PortfoliosByIdPassportPostAsync (Guid? id, V11CreatePassportRequest createPassportRequest = null, string acceptLanguage = null)
        {
             ApiResponse<V11PortfolioFileResponse> localVarResponse = await ApiV11PortfoliosByIdPassportPostAsyncWithHttpInfo(id, createPassportRequest, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Schedules the generation of a PDF portfolio passport. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[id]/passport  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="createPassportRequest">The request information to create the passport. (optional)</param>
        /// <param name="acceptLanguage">The culture to use for the request (optional, default to en)</param>
        /// <returns>Task of ApiResponse (V11PortfolioFileResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V11PortfolioFileResponse>> ApiV11PortfoliosByIdPassportPostAsyncWithHttpInfo (Guid? id, V11CreatePassportRequest createPassportRequest = null, string acceptLanguage = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortfolioApi->ApiV11PortfoliosByIdPassportPost");

            var localVarPath = "/api/v1.1/portfolios/{id}/passport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("accept-language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (createPassportRequest != null && createPassportRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createPassportRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createPassportRequest; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosByIdPassportPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V11PortfolioFileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V11PortfolioFileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(V11PortfolioFileResponse)));
        }

        /// <summary>
        /// Replaces a portfolio. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/portfolios/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="portfolio">The portfolio model. (optional)</param>
        /// <returns>PortfolioResponse</returns>
        public PortfolioResponse ApiV11PortfoliosByIdPut (Guid? id, PortfolioRequest portfolio = null)
        {
             ApiResponse<PortfolioResponse> localVarResponse = ApiV11PortfoliosByIdPutWithHttpInfo(id, portfolio);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replaces a portfolio. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/portfolios/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="portfolio">The portfolio model. (optional)</param>
        /// <returns>ApiResponse of PortfolioResponse</returns>
        public ApiResponse< PortfolioResponse > ApiV11PortfoliosByIdPutWithHttpInfo (Guid? id, PortfolioRequest portfolio = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortfolioApi->ApiV11PortfoliosByIdPut");

            var localVarPath = "/api/v1.1/portfolios/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (portfolio != null && portfolio.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolio); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolio; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosByIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioResponse)));
        }

        /// <summary>
        /// Replaces a portfolio. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/portfolios/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="portfolio">The portfolio model. (optional)</param>
        /// <returns>Task of PortfolioResponse</returns>
        public async System.Threading.Tasks.Task<PortfolioResponse> ApiV11PortfoliosByIdPutAsync (Guid? id, PortfolioRequest portfolio = null)
        {
             ApiResponse<PortfolioResponse> localVarResponse = await ApiV11PortfoliosByIdPutAsyncWithHttpInfo(id, portfolio);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replaces a portfolio. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/portfolios/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="portfolio">The portfolio model. (optional)</param>
        /// <returns>Task of ApiResponse (PortfolioResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortfolioResponse>> ApiV11PortfoliosByIdPutAsyncWithHttpInfo (Guid? id, PortfolioRequest portfolio = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortfolioApi->ApiV11PortfoliosByIdPut");

            var localVarPath = "/api/v1.1/portfolios/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (portfolio != null && portfolio.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolio); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolio; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosByIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioResponse)));
        }

        /// <summary>
        /// Gets all users for a portfolio. Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[id]/users  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>List&lt;V11UserRightResponse&gt;</returns>
        public List<V11UserRightResponse> ApiV11PortfoliosByIdUsersGet (Guid? id)
        {
             ApiResponse<List<V11UserRightResponse>> localVarResponse = ApiV11PortfoliosByIdUsersGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all users for a portfolio. Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[id]/users  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>ApiResponse of List&lt;V11UserRightResponse&gt;</returns>
        public ApiResponse< List<V11UserRightResponse> > ApiV11PortfoliosByIdUsersGetWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortfolioApi->ApiV11PortfoliosByIdUsersGet");

            var localVarPath = "/api/v1.1/portfolios/{id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosByIdUsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V11UserRightResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V11UserRightResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V11UserRightResponse>)));
        }

        /// <summary>
        /// Gets all users for a portfolio. Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[id]/users  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>Task of List&lt;V11UserRightResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<V11UserRightResponse>> ApiV11PortfoliosByIdUsersGetAsync (Guid? id)
        {
             ApiResponse<List<V11UserRightResponse>> localVarResponse = await ApiV11PortfoliosByIdUsersGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all users for a portfolio. Sample request:   &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[id]/users  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>Task of ApiResponse (List&lt;V11UserRightResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V11UserRightResponse>>> ApiV11PortfoliosByIdUsersGetAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortfolioApi->ApiV11PortfoliosByIdUsersGet");

            var localVarPath = "/api/v1.1/portfolios/{id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosByIdUsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V11UserRightResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V11UserRightResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V11UserRightResponse>)));
        }

        /// <summary>
        /// Replaces the security of a users for a portfolio. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/portfolios/[id]/users  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="users">The users to set. (optional)</param>
        /// <returns>V11UserRightResponse</returns>
        public V11UserRightResponse ApiV11PortfoliosByIdUsersPut (Guid? id, List<V11UserRightRequest> users = null)
        {
             ApiResponse<V11UserRightResponse> localVarResponse = ApiV11PortfoliosByIdUsersPutWithHttpInfo(id, users);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replaces the security of a users for a portfolio. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/portfolios/[id]/users  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="users">The users to set. (optional)</param>
        /// <returns>ApiResponse of V11UserRightResponse</returns>
        public ApiResponse< V11UserRightResponse > ApiV11PortfoliosByIdUsersPutWithHttpInfo (Guid? id, List<V11UserRightRequest> users = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortfolioApi->ApiV11PortfoliosByIdUsersPut");

            var localVarPath = "/api/v1.1/portfolios/{id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (users != null && users.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(users); // http body (model) parameter
            }
            else
            {
                localVarPostBody = users; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosByIdUsersPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V11UserRightResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V11UserRightResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(V11UserRightResponse)));
        }

        /// <summary>
        /// Replaces the security of a users for a portfolio. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/portfolios/[id]/users  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="users">The users to set. (optional)</param>
        /// <returns>Task of V11UserRightResponse</returns>
        public async System.Threading.Tasks.Task<V11UserRightResponse> ApiV11PortfoliosByIdUsersPutAsync (Guid? id, List<V11UserRightRequest> users = null)
        {
             ApiResponse<V11UserRightResponse> localVarResponse = await ApiV11PortfoliosByIdUsersPutAsyncWithHttpInfo(id, users);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replaces the security of a users for a portfolio. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/portfolios/[id]/users  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <param name="users">The users to set. (optional)</param>
        /// <returns>Task of ApiResponse (V11UserRightResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V11UserRightResponse>> ApiV11PortfoliosByIdUsersPutAsyncWithHttpInfo (Guid? id, List<V11UserRightRequest> users = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortfolioApi->ApiV11PortfoliosByIdUsersPut");

            var localVarPath = "/api/v1.1/portfolios/{id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (users != null && users.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(users); // http body (model) parameter
            }
            else
            {
                localVarPostBody = users; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosByIdUsersPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V11UserRightResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V11UserRightResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(V11UserRightResponse)));
        }

        /// <summary>
        /// Gets all portfolios. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PortfolioResponse&gt;</returns>
        public List<PortfolioResponse> ApiV11PortfoliosGet ()
        {
             ApiResponse<List<PortfolioResponse>> localVarResponse = ApiV11PortfoliosGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all portfolios. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PortfolioResponse&gt;</returns>
        public ApiResponse< List<PortfolioResponse> > ApiV11PortfoliosGetWithHttpInfo ()
        {

            var localVarPath = "/api/v1.1/portfolios";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PortfolioResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PortfolioResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PortfolioResponse>)));
        }

        /// <summary>
        /// Gets all portfolios. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PortfolioResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<PortfolioResponse>> ApiV11PortfoliosGetAsync ()
        {
             ApiResponse<List<PortfolioResponse>> localVarResponse = await ApiV11PortfoliosGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all portfolios. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PortfolioResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PortfolioResponse>>> ApiV11PortfoliosGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1.1/portfolios";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PortfolioResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PortfolioResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PortfolioResponse>)));
        }

        /// <summary>
        /// Adds a portfolio. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolio">The portfolio model. (optional)</param>
        /// <returns>PortfolioResponse</returns>
        public PortfolioResponse ApiV11PortfoliosPost (PortfolioRequest portfolio = null)
        {
             ApiResponse<PortfolioResponse> localVarResponse = ApiV11PortfoliosPostWithHttpInfo(portfolio);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a portfolio. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolio">The portfolio model. (optional)</param>
        /// <returns>ApiResponse of PortfolioResponse</returns>
        public ApiResponse< PortfolioResponse > ApiV11PortfoliosPostWithHttpInfo (PortfolioRequest portfolio = null)
        {

            var localVarPath = "/api/v1.1/portfolios";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolio != null && portfolio.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolio); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolio; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioResponse)));
        }

        /// <summary>
        /// Adds a portfolio. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolio">The portfolio model. (optional)</param>
        /// <returns>Task of PortfolioResponse</returns>
        public async System.Threading.Tasks.Task<PortfolioResponse> ApiV11PortfoliosPostAsync (PortfolioRequest portfolio = null)
        {
             ApiResponse<PortfolioResponse> localVarResponse = await ApiV11PortfoliosPostAsyncWithHttpInfo(portfolio);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a portfolio. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolio">The portfolio model. (optional)</param>
        /// <returns>Task of ApiResponse (PortfolioResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortfolioResponse>> ApiV11PortfoliosPostAsyncWithHttpInfo (PortfolioRequest portfolio = null)
        {

            var localVarPath = "/api/v1.1/portfolios";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolio != null && portfolio.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolio); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolio; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioResponse)));
        }

    }
}
