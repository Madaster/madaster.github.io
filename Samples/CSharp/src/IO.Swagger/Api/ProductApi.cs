/* 
 * Madaster Private API
 *
 * The Madaster Private API endpoint.
 *
 * OpenAPI spec version: 1.1
 * Contact: service@madaster.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the children of a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]/children  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>List&lt;ProductChild&gt;</returns>
        List<ProductChild> ApiV11ProductsByIdChildrenGet (Guid? id);

        /// <summary>
        /// Gets the children of a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]/children  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>ApiResponse of List&lt;ProductChild&gt;</returns>
        ApiResponse<List<ProductChild>> ApiV11ProductsByIdChildrenGetWithHttpInfo (Guid? id);
        /// <summary>
        /// Adds a child for a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products/[id]/children  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="child">The child to add. (optional)</param>
        /// <returns>ProductChild</returns>
        ProductChild ApiV11ProductsByIdChildrenPost (Guid? id, ProductChild child = null);

        /// <summary>
        /// Adds a child for a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products/[id]/children  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="child">The child to add. (optional)</param>
        /// <returns>ApiResponse of ProductChild</returns>
        ApiResponse<ProductChild> ApiV11ProductsByIdChildrenPostWithHttpInfo (Guid? id, ProductChild child = null);
        /// <summary>
        /// Replaces the children for a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]/children   &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="children">The matches to set. (optional)</param>
        /// <returns>List&lt;ProductChild&gt;</returns>
        List<ProductChild> ApiV11ProductsByIdChildrenPut (Guid? id, List<ProductChild> children = null);

        /// <summary>
        /// Replaces the children for a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]/children   &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="children">The matches to set. (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductChild&gt;</returns>
        ApiResponse<List<ProductChild>> ApiV11ProductsByIdChildrenPutWithHttpInfo (Guid? id, List<ProductChild> children = null);
        /// <summary>
        /// Gets the financial values of a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>List&lt;ProductFinancialValue&gt;</returns>
        List<ProductFinancialValue> ApiV11ProductsByIdFinancialvaluesGet (Guid? id);

        /// <summary>
        /// Gets the financial values of a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>ApiResponse of List&lt;ProductFinancialValue&gt;</returns>
        ApiResponse<List<ProductFinancialValue>> ApiV11ProductsByIdFinancialvaluesGetWithHttpInfo (Guid? id);
        /// <summary>
        /// Adds a financial value for a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="value">The value to add. (optional)</param>
        /// <returns>ProductFinancialValue</returns>
        ProductFinancialValue ApiV11ProductsByIdFinancialvaluesPost (Guid? id, ProductFinancialValue value = null);

        /// <summary>
        /// Adds a financial value for a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="value">The value to add. (optional)</param>
        /// <returns>ApiResponse of ProductFinancialValue</returns>
        ApiResponse<ProductFinancialValue> ApiV11ProductsByIdFinancialvaluesPostWithHttpInfo (Guid? id, ProductFinancialValue value = null);
        /// <summary>
        /// Replaces the financial values for a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="values">The values to set. (optional)</param>
        /// <returns>List&lt;ProductFinancialValue&gt;</returns>
        List<ProductFinancialValue> ApiV11ProductsByIdFinancialvaluesPut (Guid? id, List<ProductFinancialValue> values = null);

        /// <summary>
        /// Replaces the financial values for a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="values">The values to set. (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductFinancialValue&gt;</returns>
        ApiResponse<List<ProductFinancialValue>> ApiV11ProductsByIdFinancialvaluesPutWithHttpInfo (Guid? id, List<ProductFinancialValue> values = null);
        /// <summary>
        /// Gets a product by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>Product</returns>
        Product ApiV11ProductsByIdGet (Guid? id);

        /// <summary>
        /// Gets a product by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> ApiV11ProductsByIdGetWithHttpInfo (Guid? id);
        /// <summary>
        /// Gets the matches of a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]/matches  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>List&lt;ProductMatch&gt;</returns>
        List<ProductMatch> ApiV11ProductsByIdMatchesGet (Guid? id);

        /// <summary>
        /// Gets the matches of a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]/matches  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>ApiResponse of List&lt;ProductMatch&gt;</returns>
        ApiResponse<List<ProductMatch>> ApiV11ProductsByIdMatchesGetWithHttpInfo (Guid? id);
        /// <summary>
        /// Adds a match for a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="match">The match to add. (optional)</param>
        /// <returns>ProductMatch</returns>
        ProductMatch ApiV11ProductsByIdMatchesPost (Guid? id, ProductMatch match = null);

        /// <summary>
        /// Adds a match for a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="match">The match to add. (optional)</param>
        /// <returns>ApiResponse of ProductMatch</returns>
        ApiResponse<ProductMatch> ApiV11ProductsByIdMatchesPostWithHttpInfo (Guid? id, ProductMatch match = null);
        /// <summary>
        /// Replaces the matches for a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="matches">The matches to set. (optional)</param>
        /// <returns>List&lt;ProductMatch&gt;</returns>
        List<ProductMatch> ApiV11ProductsByIdMatchesPut (Guid? id, List<ProductMatch> matches = null);

        /// <summary>
        /// Replaces the matches for a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="matches">The matches to set. (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductMatch&gt;</returns>
        ApiResponse<List<ProductMatch>> ApiV11ProductsByIdMatchesPutWithHttpInfo (Guid? id, List<ProductMatch> matches = null);
        /// <summary>
        /// Replaces a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier.</param>
        /// <param name="product">The product model. (optional)</param>
        /// <returns>Product</returns>
        Product ApiV11ProductsByIdPut (Guid? id, Product product = null);

        /// <summary>
        /// Replaces a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier.</param>
        /// <param name="product">The product model. (optional)</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> ApiV11ProductsByIdPutWithHttpInfo (Guid? id, Product product = null);
        /// <summary>
        /// Gets all products.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Product&gt;</returns>
        List<Product> ApiV11ProductsGet ();

        /// <summary>
        /// Gets all products.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        ApiResponse<List<Product>> ApiV11ProductsGetWithHttpInfo ();
        /// <summary>
        /// Adds a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product">The product model. (optional)</param>
        /// <returns>Product</returns>
        Product ApiV11ProductsPost (Product product = null);

        /// <summary>
        /// Adds a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product">The product model. (optional)</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> ApiV11ProductsPostWithHttpInfo (Product product = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets the children of a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]/children  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>Task of List&lt;ProductChild&gt;</returns>
        System.Threading.Tasks.Task<List<ProductChild>> ApiV11ProductsByIdChildrenGetAsync (Guid? id);

        /// <summary>
        /// Gets the children of a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]/children  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>Task of ApiResponse (List&lt;ProductChild&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductChild>>> ApiV11ProductsByIdChildrenGetAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// Adds a child for a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products/[id]/children  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="child">The child to add. (optional)</param>
        /// <returns>Task of ProductChild</returns>
        System.Threading.Tasks.Task<ProductChild> ApiV11ProductsByIdChildrenPostAsync (Guid? id, ProductChild child = null);

        /// <summary>
        /// Adds a child for a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products/[id]/children  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="child">The child to add. (optional)</param>
        /// <returns>Task of ApiResponse (ProductChild)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductChild>> ApiV11ProductsByIdChildrenPostAsyncWithHttpInfo (Guid? id, ProductChild child = null);
        /// <summary>
        /// Replaces the children for a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]/children   &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="children">The matches to set. (optional)</param>
        /// <returns>Task of List&lt;ProductChild&gt;</returns>
        System.Threading.Tasks.Task<List<ProductChild>> ApiV11ProductsByIdChildrenPutAsync (Guid? id, List<ProductChild> children = null);

        /// <summary>
        /// Replaces the children for a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]/children   &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="children">The matches to set. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProductChild&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductChild>>> ApiV11ProductsByIdChildrenPutAsyncWithHttpInfo (Guid? id, List<ProductChild> children = null);
        /// <summary>
        /// Gets the financial values of a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>Task of List&lt;ProductFinancialValue&gt;</returns>
        System.Threading.Tasks.Task<List<ProductFinancialValue>> ApiV11ProductsByIdFinancialvaluesGetAsync (Guid? id);

        /// <summary>
        /// Gets the financial values of a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>Task of ApiResponse (List&lt;ProductFinancialValue&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductFinancialValue>>> ApiV11ProductsByIdFinancialvaluesGetAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// Adds a financial value for a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="value">The value to add. (optional)</param>
        /// <returns>Task of ProductFinancialValue</returns>
        System.Threading.Tasks.Task<ProductFinancialValue> ApiV11ProductsByIdFinancialvaluesPostAsync (Guid? id, ProductFinancialValue value = null);

        /// <summary>
        /// Adds a financial value for a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="value">The value to add. (optional)</param>
        /// <returns>Task of ApiResponse (ProductFinancialValue)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductFinancialValue>> ApiV11ProductsByIdFinancialvaluesPostAsyncWithHttpInfo (Guid? id, ProductFinancialValue value = null);
        /// <summary>
        /// Replaces the financial values for a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="values">The values to set. (optional)</param>
        /// <returns>Task of List&lt;ProductFinancialValue&gt;</returns>
        System.Threading.Tasks.Task<List<ProductFinancialValue>> ApiV11ProductsByIdFinancialvaluesPutAsync (Guid? id, List<ProductFinancialValue> values = null);

        /// <summary>
        /// Replaces the financial values for a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="values">The values to set. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProductFinancialValue&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductFinancialValue>>> ApiV11ProductsByIdFinancialvaluesPutAsyncWithHttpInfo (Guid? id, List<ProductFinancialValue> values = null);
        /// <summary>
        /// Gets a product by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> ApiV11ProductsByIdGetAsync (Guid? id);

        /// <summary>
        /// Gets a product by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> ApiV11ProductsByIdGetAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// Gets the matches of a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]/matches  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>Task of List&lt;ProductMatch&gt;</returns>
        System.Threading.Tasks.Task<List<ProductMatch>> ApiV11ProductsByIdMatchesGetAsync (Guid? id);

        /// <summary>
        /// Gets the matches of a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]/matches  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>Task of ApiResponse (List&lt;ProductMatch&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductMatch>>> ApiV11ProductsByIdMatchesGetAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// Adds a match for a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="match">The match to add. (optional)</param>
        /// <returns>Task of ProductMatch</returns>
        System.Threading.Tasks.Task<ProductMatch> ApiV11ProductsByIdMatchesPostAsync (Guid? id, ProductMatch match = null);

        /// <summary>
        /// Adds a match for a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="match">The match to add. (optional)</param>
        /// <returns>Task of ApiResponse (ProductMatch)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductMatch>> ApiV11ProductsByIdMatchesPostAsyncWithHttpInfo (Guid? id, ProductMatch match = null);
        /// <summary>
        /// Replaces the matches for a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="matches">The matches to set. (optional)</param>
        /// <returns>Task of List&lt;ProductMatch&gt;</returns>
        System.Threading.Tasks.Task<List<ProductMatch>> ApiV11ProductsByIdMatchesPutAsync (Guid? id, List<ProductMatch> matches = null);

        /// <summary>
        /// Replaces the matches for a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="matches">The matches to set. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProductMatch&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductMatch>>> ApiV11ProductsByIdMatchesPutAsyncWithHttpInfo (Guid? id, List<ProductMatch> matches = null);
        /// <summary>
        /// Replaces a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier.</param>
        /// <param name="product">The product model. (optional)</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> ApiV11ProductsByIdPutAsync (Guid? id, Product product = null);

        /// <summary>
        /// Replaces a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier.</param>
        /// <param name="product">The product model. (optional)</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> ApiV11ProductsByIdPutAsyncWithHttpInfo (Guid? id, Product product = null);
        /// <summary>
        /// Gets all products.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Product&gt;</returns>
        System.Threading.Tasks.Task<List<Product>> ApiV11ProductsGetAsync ();

        /// <summary>
        /// Gets all products.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Product>>> ApiV11ProductsGetAsyncWithHttpInfo ();
        /// <summary>
        /// Adds a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product">The product model. (optional)</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> ApiV11ProductsPostAsync (Product product = null);

        /// <summary>
        /// Adds a product.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product">The product model. (optional)</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> ApiV11ProductsPostAsyncWithHttpInfo (Product product = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductApi : IProductApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets the children of a product. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]/children  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>List&lt;ProductChild&gt;</returns>
        public List<ProductChild> ApiV11ProductsByIdChildrenGet (Guid? id)
        {
             ApiResponse<List<ProductChild>> localVarResponse = ApiV11ProductsByIdChildrenGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the children of a product. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]/children  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>ApiResponse of List&lt;ProductChild&gt;</returns>
        public ApiResponse< List<ProductChild> > ApiV11ProductsByIdChildrenGetWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductApi->ApiV11ProductsByIdChildrenGet");

            var localVarPath = "/api/v1.1/products/{id}/children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11ProductsByIdChildrenGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductChild>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductChild>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductChild>)));
        }

        /// <summary>
        /// Gets the children of a product. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]/children  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>Task of List&lt;ProductChild&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductChild>> ApiV11ProductsByIdChildrenGetAsync (Guid? id)
        {
             ApiResponse<List<ProductChild>> localVarResponse = await ApiV11ProductsByIdChildrenGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the children of a product. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]/children  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>Task of ApiResponse (List&lt;ProductChild&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductChild>>> ApiV11ProductsByIdChildrenGetAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductApi->ApiV11ProductsByIdChildrenGet");

            var localVarPath = "/api/v1.1/products/{id}/children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11ProductsByIdChildrenGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductChild>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductChild>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductChild>)));
        }

        /// <summary>
        /// Adds a child for a product. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products/[id]/children  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="child">The child to add. (optional)</param>
        /// <returns>ProductChild</returns>
        public ProductChild ApiV11ProductsByIdChildrenPost (Guid? id, ProductChild child = null)
        {
             ApiResponse<ProductChild> localVarResponse = ApiV11ProductsByIdChildrenPostWithHttpInfo(id, child);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a child for a product. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products/[id]/children  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="child">The child to add. (optional)</param>
        /// <returns>ApiResponse of ProductChild</returns>
        public ApiResponse< ProductChild > ApiV11ProductsByIdChildrenPostWithHttpInfo (Guid? id, ProductChild child = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductApi->ApiV11ProductsByIdChildrenPost");

            var localVarPath = "/api/v1.1/products/{id}/children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (child != null && child.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(child); // http body (model) parameter
            }
            else
            {
                localVarPostBody = child; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11ProductsByIdChildrenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductChild>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductChild) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductChild)));
        }

        /// <summary>
        /// Adds a child for a product. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products/[id]/children  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="child">The child to add. (optional)</param>
        /// <returns>Task of ProductChild</returns>
        public async System.Threading.Tasks.Task<ProductChild> ApiV11ProductsByIdChildrenPostAsync (Guid? id, ProductChild child = null)
        {
             ApiResponse<ProductChild> localVarResponse = await ApiV11ProductsByIdChildrenPostAsyncWithHttpInfo(id, child);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a child for a product. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products/[id]/children  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="child">The child to add. (optional)</param>
        /// <returns>Task of ApiResponse (ProductChild)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductChild>> ApiV11ProductsByIdChildrenPostAsyncWithHttpInfo (Guid? id, ProductChild child = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductApi->ApiV11ProductsByIdChildrenPost");

            var localVarPath = "/api/v1.1/products/{id}/children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (child != null && child.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(child); // http body (model) parameter
            }
            else
            {
                localVarPostBody = child; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11ProductsByIdChildrenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductChild>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductChild) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductChild)));
        }

        /// <summary>
        /// Replaces the children for a product. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]/children   &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="children">The matches to set. (optional)</param>
        /// <returns>List&lt;ProductChild&gt;</returns>
        public List<ProductChild> ApiV11ProductsByIdChildrenPut (Guid? id, List<ProductChild> children = null)
        {
             ApiResponse<List<ProductChild>> localVarResponse = ApiV11ProductsByIdChildrenPutWithHttpInfo(id, children);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replaces the children for a product. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]/children   &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="children">The matches to set. (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductChild&gt;</returns>
        public ApiResponse< List<ProductChild> > ApiV11ProductsByIdChildrenPutWithHttpInfo (Guid? id, List<ProductChild> children = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductApi->ApiV11ProductsByIdChildrenPut");

            var localVarPath = "/api/v1.1/products/{id}/children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (children != null && children.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(children); // http body (model) parameter
            }
            else
            {
                localVarPostBody = children; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11ProductsByIdChildrenPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductChild>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductChild>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductChild>)));
        }

        /// <summary>
        /// Replaces the children for a product. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]/children   &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="children">The matches to set. (optional)</param>
        /// <returns>Task of List&lt;ProductChild&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductChild>> ApiV11ProductsByIdChildrenPutAsync (Guid? id, List<ProductChild> children = null)
        {
             ApiResponse<List<ProductChild>> localVarResponse = await ApiV11ProductsByIdChildrenPutAsyncWithHttpInfo(id, children);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replaces the children for a product. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]/children   &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="children">The matches to set. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProductChild&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductChild>>> ApiV11ProductsByIdChildrenPutAsyncWithHttpInfo (Guid? id, List<ProductChild> children = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductApi->ApiV11ProductsByIdChildrenPut");

            var localVarPath = "/api/v1.1/products/{id}/children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (children != null && children.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(children); // http body (model) parameter
            }
            else
            {
                localVarPostBody = children; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11ProductsByIdChildrenPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductChild>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductChild>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductChild>)));
        }

        /// <summary>
        /// Gets the financial values of a product. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>List&lt;ProductFinancialValue&gt;</returns>
        public List<ProductFinancialValue> ApiV11ProductsByIdFinancialvaluesGet (Guid? id)
        {
             ApiResponse<List<ProductFinancialValue>> localVarResponse = ApiV11ProductsByIdFinancialvaluesGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the financial values of a product. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>ApiResponse of List&lt;ProductFinancialValue&gt;</returns>
        public ApiResponse< List<ProductFinancialValue> > ApiV11ProductsByIdFinancialvaluesGetWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductApi->ApiV11ProductsByIdFinancialvaluesGet");

            var localVarPath = "/api/v1.1/products/{id}/financialvalues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11ProductsByIdFinancialvaluesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductFinancialValue>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductFinancialValue>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductFinancialValue>)));
        }

        /// <summary>
        /// Gets the financial values of a product. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>Task of List&lt;ProductFinancialValue&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductFinancialValue>> ApiV11ProductsByIdFinancialvaluesGetAsync (Guid? id)
        {
             ApiResponse<List<ProductFinancialValue>> localVarResponse = await ApiV11ProductsByIdFinancialvaluesGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the financial values of a product. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>Task of ApiResponse (List&lt;ProductFinancialValue&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductFinancialValue>>> ApiV11ProductsByIdFinancialvaluesGetAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductApi->ApiV11ProductsByIdFinancialvaluesGet");

            var localVarPath = "/api/v1.1/products/{id}/financialvalues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11ProductsByIdFinancialvaluesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductFinancialValue>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductFinancialValue>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductFinancialValue>)));
        }

        /// <summary>
        /// Adds a financial value for a product. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="value">The value to add. (optional)</param>
        /// <returns>ProductFinancialValue</returns>
        public ProductFinancialValue ApiV11ProductsByIdFinancialvaluesPost (Guid? id, ProductFinancialValue value = null)
        {
             ApiResponse<ProductFinancialValue> localVarResponse = ApiV11ProductsByIdFinancialvaluesPostWithHttpInfo(id, value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a financial value for a product. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="value">The value to add. (optional)</param>
        /// <returns>ApiResponse of ProductFinancialValue</returns>
        public ApiResponse< ProductFinancialValue > ApiV11ProductsByIdFinancialvaluesPostWithHttpInfo (Guid? id, ProductFinancialValue value = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductApi->ApiV11ProductsByIdFinancialvaluesPost");

            var localVarPath = "/api/v1.1/products/{id}/financialvalues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11ProductsByIdFinancialvaluesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductFinancialValue>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductFinancialValue) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductFinancialValue)));
        }

        /// <summary>
        /// Adds a financial value for a product. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="value">The value to add. (optional)</param>
        /// <returns>Task of ProductFinancialValue</returns>
        public async System.Threading.Tasks.Task<ProductFinancialValue> ApiV11ProductsByIdFinancialvaluesPostAsync (Guid? id, ProductFinancialValue value = null)
        {
             ApiResponse<ProductFinancialValue> localVarResponse = await ApiV11ProductsByIdFinancialvaluesPostAsyncWithHttpInfo(id, value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a financial value for a product. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="value">The value to add. (optional)</param>
        /// <returns>Task of ApiResponse (ProductFinancialValue)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductFinancialValue>> ApiV11ProductsByIdFinancialvaluesPostAsyncWithHttpInfo (Guid? id, ProductFinancialValue value = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductApi->ApiV11ProductsByIdFinancialvaluesPost");

            var localVarPath = "/api/v1.1/products/{id}/financialvalues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11ProductsByIdFinancialvaluesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductFinancialValue>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductFinancialValue) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductFinancialValue)));
        }

        /// <summary>
        /// Replaces the financial values for a product. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="values">The values to set. (optional)</param>
        /// <returns>List&lt;ProductFinancialValue&gt;</returns>
        public List<ProductFinancialValue> ApiV11ProductsByIdFinancialvaluesPut (Guid? id, List<ProductFinancialValue> values = null)
        {
             ApiResponse<List<ProductFinancialValue>> localVarResponse = ApiV11ProductsByIdFinancialvaluesPutWithHttpInfo(id, values);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replaces the financial values for a product. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="values">The values to set. (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductFinancialValue&gt;</returns>
        public ApiResponse< List<ProductFinancialValue> > ApiV11ProductsByIdFinancialvaluesPutWithHttpInfo (Guid? id, List<ProductFinancialValue> values = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductApi->ApiV11ProductsByIdFinancialvaluesPut");

            var localVarPath = "/api/v1.1/products/{id}/financialvalues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (values != null && values.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(values); // http body (model) parameter
            }
            else
            {
                localVarPostBody = values; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11ProductsByIdFinancialvaluesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductFinancialValue>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductFinancialValue>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductFinancialValue>)));
        }

        /// <summary>
        /// Replaces the financial values for a product. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="values">The values to set. (optional)</param>
        /// <returns>Task of List&lt;ProductFinancialValue&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductFinancialValue>> ApiV11ProductsByIdFinancialvaluesPutAsync (Guid? id, List<ProductFinancialValue> values = null)
        {
             ApiResponse<List<ProductFinancialValue>> localVarResponse = await ApiV11ProductsByIdFinancialvaluesPutAsyncWithHttpInfo(id, values);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replaces the financial values for a product. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="values">The values to set. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProductFinancialValue&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductFinancialValue>>> ApiV11ProductsByIdFinancialvaluesPutAsyncWithHttpInfo (Guid? id, List<ProductFinancialValue> values = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductApi->ApiV11ProductsByIdFinancialvaluesPut");

            var localVarPath = "/api/v1.1/products/{id}/financialvalues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (values != null && values.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(values); // http body (model) parameter
            }
            else
            {
                localVarPostBody = values; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11ProductsByIdFinancialvaluesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductFinancialValue>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductFinancialValue>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductFinancialValue>)));
        }

        /// <summary>
        /// Gets a product by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>Product</returns>
        public Product ApiV11ProductsByIdGet (Guid? id)
        {
             ApiResponse<Product> localVarResponse = ApiV11ProductsByIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a product by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>ApiResponse of Product</returns>
        public ApiResponse< Product > ApiV11ProductsByIdGetWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductApi->ApiV11ProductsByIdGet");

            var localVarPath = "/api/v1.1/products/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11ProductsByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Gets a product by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> ApiV11ProductsByIdGetAsync (Guid? id)
        {
             ApiResponse<Product> localVarResponse = await ApiV11ProductsByIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a product by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Product>> ApiV11ProductsByIdGetAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductApi->ApiV11ProductsByIdGet");

            var localVarPath = "/api/v1.1/products/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11ProductsByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Gets the matches of a product. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]/matches  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>List&lt;ProductMatch&gt;</returns>
        public List<ProductMatch> ApiV11ProductsByIdMatchesGet (Guid? id)
        {
             ApiResponse<List<ProductMatch>> localVarResponse = ApiV11ProductsByIdMatchesGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the matches of a product. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]/matches  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>ApiResponse of List&lt;ProductMatch&gt;</returns>
        public ApiResponse< List<ProductMatch> > ApiV11ProductsByIdMatchesGetWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductApi->ApiV11ProductsByIdMatchesGet");

            var localVarPath = "/api/v1.1/products/{id}/matches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11ProductsByIdMatchesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductMatch>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductMatch>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductMatch>)));
        }

        /// <summary>
        /// Gets the matches of a product. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]/matches  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>Task of List&lt;ProductMatch&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductMatch>> ApiV11ProductsByIdMatchesGetAsync (Guid? id)
        {
             ApiResponse<List<ProductMatch>> localVarResponse = await ApiV11ProductsByIdMatchesGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the matches of a product. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products/[id]/matches  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <returns>Task of ApiResponse (List&lt;ProductMatch&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductMatch>>> ApiV11ProductsByIdMatchesGetAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductApi->ApiV11ProductsByIdMatchesGet");

            var localVarPath = "/api/v1.1/products/{id}/matches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11ProductsByIdMatchesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductMatch>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductMatch>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductMatch>)));
        }

        /// <summary>
        /// Adds a match for a product. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="match">The match to add. (optional)</param>
        /// <returns>ProductMatch</returns>
        public ProductMatch ApiV11ProductsByIdMatchesPost (Guid? id, ProductMatch match = null)
        {
             ApiResponse<ProductMatch> localVarResponse = ApiV11ProductsByIdMatchesPostWithHttpInfo(id, match);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a match for a product. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="match">The match to add. (optional)</param>
        /// <returns>ApiResponse of ProductMatch</returns>
        public ApiResponse< ProductMatch > ApiV11ProductsByIdMatchesPostWithHttpInfo (Guid? id, ProductMatch match = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductApi->ApiV11ProductsByIdMatchesPost");

            var localVarPath = "/api/v1.1/products/{id}/matches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (match != null && match.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(match); // http body (model) parameter
            }
            else
            {
                localVarPostBody = match; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11ProductsByIdMatchesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductMatch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductMatch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductMatch)));
        }

        /// <summary>
        /// Adds a match for a product. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="match">The match to add. (optional)</param>
        /// <returns>Task of ProductMatch</returns>
        public async System.Threading.Tasks.Task<ProductMatch> ApiV11ProductsByIdMatchesPostAsync (Guid? id, ProductMatch match = null)
        {
             ApiResponse<ProductMatch> localVarResponse = await ApiV11ProductsByIdMatchesPostAsyncWithHttpInfo(id, match);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a match for a product. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="match">The match to add. (optional)</param>
        /// <returns>Task of ApiResponse (ProductMatch)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductMatch>> ApiV11ProductsByIdMatchesPostAsyncWithHttpInfo (Guid? id, ProductMatch match = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductApi->ApiV11ProductsByIdMatchesPost");

            var localVarPath = "/api/v1.1/products/{id}/matches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (match != null && match.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(match); // http body (model) parameter
            }
            else
            {
                localVarPostBody = match; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11ProductsByIdMatchesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductMatch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductMatch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductMatch)));
        }

        /// <summary>
        /// Replaces the matches for a product. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="matches">The matches to set. (optional)</param>
        /// <returns>List&lt;ProductMatch&gt;</returns>
        public List<ProductMatch> ApiV11ProductsByIdMatchesPut (Guid? id, List<ProductMatch> matches = null)
        {
             ApiResponse<List<ProductMatch>> localVarResponse = ApiV11ProductsByIdMatchesPutWithHttpInfo(id, matches);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replaces the matches for a product. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="matches">The matches to set. (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductMatch&gt;</returns>
        public ApiResponse< List<ProductMatch> > ApiV11ProductsByIdMatchesPutWithHttpInfo (Guid? id, List<ProductMatch> matches = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductApi->ApiV11ProductsByIdMatchesPut");

            var localVarPath = "/api/v1.1/products/{id}/matches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (matches != null && matches.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(matches); // http body (model) parameter
            }
            else
            {
                localVarPostBody = matches; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11ProductsByIdMatchesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductMatch>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductMatch>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductMatch>)));
        }

        /// <summary>
        /// Replaces the matches for a product. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="matches">The matches to set. (optional)</param>
        /// <returns>Task of List&lt;ProductMatch&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductMatch>> ApiV11ProductsByIdMatchesPutAsync (Guid? id, List<ProductMatch> matches = null)
        {
             ApiResponse<List<ProductMatch>> localVarResponse = await ApiV11ProductsByIdMatchesPutAsyncWithHttpInfo(id, matches);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replaces the matches for a product. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the product.</param>
        /// <param name="matches">The matches to set. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProductMatch&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductMatch>>> ApiV11ProductsByIdMatchesPutAsyncWithHttpInfo (Guid? id, List<ProductMatch> matches = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductApi->ApiV11ProductsByIdMatchesPut");

            var localVarPath = "/api/v1.1/products/{id}/matches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (matches != null && matches.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(matches); // http body (model) parameter
            }
            else
            {
                localVarPostBody = matches; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11ProductsByIdMatchesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductMatch>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductMatch>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductMatch>)));
        }

        /// <summary>
        /// Replaces a product. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier.</param>
        /// <param name="product">The product model. (optional)</param>
        /// <returns>Product</returns>
        public Product ApiV11ProductsByIdPut (Guid? id, Product product = null)
        {
             ApiResponse<Product> localVarResponse = ApiV11ProductsByIdPutWithHttpInfo(id, product);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replaces a product. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier.</param>
        /// <param name="product">The product model. (optional)</param>
        /// <returns>ApiResponse of Product</returns>
        public ApiResponse< Product > ApiV11ProductsByIdPutWithHttpInfo (Guid? id, Product product = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductApi->ApiV11ProductsByIdPut");

            var localVarPath = "/api/v1.1/products/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (product != null && product.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(product); // http body (model) parameter
            }
            else
            {
                localVarPostBody = product; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11ProductsByIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Replaces a product. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier.</param>
        /// <param name="product">The product model. (optional)</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> ApiV11ProductsByIdPutAsync (Guid? id, Product product = null)
        {
             ApiResponse<Product> localVarResponse = await ApiV11ProductsByIdPutAsyncWithHttpInfo(id, product);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replaces a product. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/products/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier.</param>
        /// <param name="product">The product model. (optional)</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Product>> ApiV11ProductsByIdPutAsyncWithHttpInfo (Guid? id, Product product = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductApi->ApiV11ProductsByIdPut");

            var localVarPath = "/api/v1.1/products/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (product != null && product.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(product); // http body (model) parameter
            }
            else
            {
                localVarPostBody = product; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11ProductsByIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Gets all products. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Product&gt;</returns>
        public List<Product> ApiV11ProductsGet ()
        {
             ApiResponse<List<Product>> localVarResponse = ApiV11ProductsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all products. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        public ApiResponse< List<Product> > ApiV11ProductsGetWithHttpInfo ()
        {

            var localVarPath = "/api/v1.1/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11ProductsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Product>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
        }

        /// <summary>
        /// Gets all products. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Product&gt;</returns>
        public async System.Threading.Tasks.Task<List<Product>> ApiV11ProductsGetAsync ()
        {
             ApiResponse<List<Product>> localVarResponse = await ApiV11ProductsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all products. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/products  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Product>>> ApiV11ProductsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1.1/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11ProductsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Product>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
        }

        /// <summary>
        /// Adds a product. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product">The product model. (optional)</param>
        /// <returns>Product</returns>
        public Product ApiV11ProductsPost (Product product = null)
        {
             ApiResponse<Product> localVarResponse = ApiV11ProductsPostWithHttpInfo(product);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a product. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product">The product model. (optional)</param>
        /// <returns>ApiResponse of Product</returns>
        public ApiResponse< Product > ApiV11ProductsPostWithHttpInfo (Product product = null)
        {

            var localVarPath = "/api/v1.1/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (product != null && product.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(product); // http body (model) parameter
            }
            else
            {
                localVarPostBody = product; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11ProductsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Adds a product. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product">The product model. (optional)</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> ApiV11ProductsPostAsync (Product product = null)
        {
             ApiResponse<Product> localVarResponse = await ApiV11ProductsPostAsyncWithHttpInfo(product);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a product. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/products  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product">The product model. (optional)</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Product>> ApiV11ProductsPostAsyncWithHttpInfo (Product product = null)
        {

            var localVarPath = "/api/v1.1/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (product != null && product.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(product); // http body (model) parameter
            }
            else
            {
                localVarPostBody = product; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11ProductsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

    }
}
