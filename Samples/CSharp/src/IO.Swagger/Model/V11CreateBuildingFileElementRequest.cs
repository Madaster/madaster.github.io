/* 
 * Madaster Private API
 *
 * The Madaster Private API endpoint.
 *
 * OpenAPI spec version: 1.1
 * Contact: service@madaster.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// V11CreateBuildingFileElementRequest
    /// </summary>
    [DataContract]
    public partial class V11CreateBuildingFileElementRequest :  IEquatable<V11CreateBuildingFileElementRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V11CreateBuildingFileElementRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V11CreateBuildingFileElementRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V11CreateBuildingFileElementRequest" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="materialName">materialName.</param>
        /// <param name="typeName">typeName.</param>
        /// <param name="elementClass">elementClass.</param>
        /// <param name="volume">volume.</param>
        /// <param name="area">area.</param>
        /// <param name="height">height.</param>
        /// <param name="width">width.</param>
        /// <param name="length">length.</param>
        /// <param name="weight">weight.</param>
        /// <param name="phase">phase.</param>
        /// <param name="classification">classification.</param>
        /// <param name="floor">floor.</param>
        public V11CreateBuildingFileElementRequest(string id = default(string), string materialName = default(string), string typeName = default(string), string elementClass = default(string), double? volume = default(double?), double? area = default(double?), double? height = default(double?), double? width = default(double?), double? length = default(double?), double? weight = default(double?), string phase = default(string), string classification = default(string), string floor = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for V11CreateBuildingFileElementRequest and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            this.MaterialName = materialName;
            this.TypeName = typeName;
            this.ElementClass = elementClass;
            this.Volume = volume;
            this.Area = area;
            this.Height = height;
            this.Width = width;
            this.Length = length;
            this.Weight = weight;
            this.Phase = phase;
            this.Classification = classification;
            this.Floor = floor;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets MaterialName
        /// </summary>
        [DataMember(Name="materialName", EmitDefaultValue=false)]
        public string MaterialName { get; set; }

        /// <summary>
        /// Gets or Sets TypeName
        /// </summary>
        [DataMember(Name="typeName", EmitDefaultValue=false)]
        public string TypeName { get; set; }

        /// <summary>
        /// Gets or Sets ElementClass
        /// </summary>
        [DataMember(Name="elementClass", EmitDefaultValue=false)]
        public string ElementClass { get; set; }

        /// <summary>
        /// Gets or Sets Volume
        /// </summary>
        [DataMember(Name="volume", EmitDefaultValue=false)]
        public double? Volume { get; set; }

        /// <summary>
        /// Gets or Sets Area
        /// </summary>
        [DataMember(Name="area", EmitDefaultValue=false)]
        public double? Area { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public double? Height { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public double? Width { get; set; }

        /// <summary>
        /// Gets or Sets Length
        /// </summary>
        [DataMember(Name="length", EmitDefaultValue=false)]
        public double? Length { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public double? Weight { get; set; }

        /// <summary>
        /// Gets or Sets Phase
        /// </summary>
        [DataMember(Name="phase", EmitDefaultValue=false)]
        public string Phase { get; set; }

        /// <summary>
        /// Gets or Sets Classification
        /// </summary>
        [DataMember(Name="classification", EmitDefaultValue=false)]
        public string Classification { get; set; }

        /// <summary>
        /// Gets or Sets Floor
        /// </summary>
        [DataMember(Name="floor", EmitDefaultValue=false)]
        public string Floor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V11CreateBuildingFileElementRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MaterialName: ").Append(MaterialName).Append("\n");
            sb.Append("  TypeName: ").Append(TypeName).Append("\n");
            sb.Append("  ElementClass: ").Append(ElementClass).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("  Area: ").Append(Area).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Phase: ").Append(Phase).Append("\n");
            sb.Append("  Classification: ").Append(Classification).Append("\n");
            sb.Append("  Floor: ").Append(Floor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as V11CreateBuildingFileElementRequest);
        }

        /// <summary>
        /// Returns true if V11CreateBuildingFileElementRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of V11CreateBuildingFileElementRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V11CreateBuildingFileElementRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.MaterialName == input.MaterialName ||
                    (this.MaterialName != null &&
                    this.MaterialName.Equals(input.MaterialName))
                ) && 
                (
                    this.TypeName == input.TypeName ||
                    (this.TypeName != null &&
                    this.TypeName.Equals(input.TypeName))
                ) && 
                (
                    this.ElementClass == input.ElementClass ||
                    (this.ElementClass != null &&
                    this.ElementClass.Equals(input.ElementClass))
                ) && 
                (
                    this.Volume == input.Volume ||
                    (this.Volume != null &&
                    this.Volume.Equals(input.Volume))
                ) && 
                (
                    this.Area == input.Area ||
                    (this.Area != null &&
                    this.Area.Equals(input.Area))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Length == input.Length ||
                    (this.Length != null &&
                    this.Length.Equals(input.Length))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.Phase == input.Phase ||
                    (this.Phase != null &&
                    this.Phase.Equals(input.Phase))
                ) && 
                (
                    this.Classification == input.Classification ||
                    (this.Classification != null &&
                    this.Classification.Equals(input.Classification))
                ) && 
                (
                    this.Floor == input.Floor ||
                    (this.Floor != null &&
                    this.Floor.Equals(input.Floor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.MaterialName != null)
                    hashCode = hashCode * 59 + this.MaterialName.GetHashCode();
                if (this.TypeName != null)
                    hashCode = hashCode * 59 + this.TypeName.GetHashCode();
                if (this.ElementClass != null)
                    hashCode = hashCode * 59 + this.ElementClass.GetHashCode();
                if (this.Volume != null)
                    hashCode = hashCode * 59 + this.Volume.GetHashCode();
                if (this.Area != null)
                    hashCode = hashCode * 59 + this.Area.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Length != null)
                    hashCode = hashCode * 59 + this.Length.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.Phase != null)
                    hashCode = hashCode * 59 + this.Phase.GetHashCode();
                if (this.Classification != null)
                    hashCode = hashCode * 59 + this.Classification.GetHashCode();
                if (this.Floor != null)
                    hashCode = hashCode * 59 + this.Floor.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
