/* 
 * Madaster Private API
 *
 * The Madaster Private API endpoint.
 *
 * OpenAPI spec version: 1.1
 * Contact: service@madaster.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// V11UserRightResponse
    /// </summary>
    [DataContract]
    public partial class V11UserRightResponse :  IEquatable<V11UserRightResponse>, IValidatableObject
    {
        /// <summary>
        /// Defines Level
        /// </summary>
        public enum LevelEnum
        {
            
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            
            NUMBER_0 = 0,
            
            /// <summary>
            /// Enum NUMBER_50 for value: 50
            /// </summary>
            
            NUMBER_50 = 50,
            
            /// <summary>
            /// Enum NUMBER_70 for value: 70
            /// </summary>
            
            NUMBER_70 = 70,
            
            /// <summary>
            /// Enum NUMBER_90 for value: 90
            /// </summary>
            
            NUMBER_90 = 90
        }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [DataMember(Name="level", EmitDefaultValue=false)]
        public LevelEnum? Level { get; set; }
        /// <summary>
        /// Defines UserType
        /// </summary>
        public enum UserTypeEnum
        {
            
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            
            NUMBER_0 = 0,
            
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            
            NUMBER_1 = 1
        }

        /// <summary>
        /// Gets or Sets UserType
        /// </summary>
        [DataMember(Name="userType", EmitDefaultValue=false)]
        public UserTypeEnum? UserType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="V11UserRightResponse" /> class.
        /// </summary>
        /// <param name="userId">userId.</param>
        /// <param name="name">name.</param>
        /// <param name="level">level.</param>
        /// <param name="userType">userType.</param>
        /// <param name="isInvite">isInvite.</param>
        public V11UserRightResponse(Guid? userId = default(Guid?), string name = default(string), LevelEnum? level = default(LevelEnum?), UserTypeEnum? userType = default(UserTypeEnum?), bool? isInvite = default(bool?))
        {
            this.UserId = userId;
            this.Name = name;
            this.Level = level;
            this.UserType = userType;
            this.IsInvite = isInvite;
        }
        
        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public Guid? UserId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }



        /// <summary>
        /// Gets or Sets IsInvite
        /// </summary>
        [DataMember(Name="isInvite", EmitDefaultValue=false)]
        public bool? IsInvite { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V11UserRightResponse {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  UserType: ").Append(UserType).Append("\n");
            sb.Append("  IsInvite: ").Append(IsInvite).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as V11UserRightResponse);
        }

        /// <summary>
        /// Returns true if V11UserRightResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of V11UserRightResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V11UserRightResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Level == input.Level ||
                    (this.Level != null &&
                    this.Level.Equals(input.Level))
                ) && 
                (
                    this.UserType == input.UserType ||
                    (this.UserType != null &&
                    this.UserType.Equals(input.UserType))
                ) && 
                (
                    this.IsInvite == input.IsInvite ||
                    (this.IsInvite != null &&
                    this.IsInvite.Equals(input.IsInvite))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Level != null)
                    hashCode = hashCode * 59 + this.Level.GetHashCode();
                if (this.UserType != null)
                    hashCode = hashCode * 59 + this.UserType.GetHashCode();
                if (this.IsInvite != null)
                    hashCode = hashCode * 59 + this.IsInvite.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
