<?php
/**
 * MaterialFinancialInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Madaster Private API
 *
 * The Madaster Private API endpoint.
 *
 * OpenAPI spec version: 1.1
 * Contact: service@madaster.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MaterialFinancialInformation Class Doc Comment
 *
 * @category Class
 * @description The financial properties of the element
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MaterialFinancialInformation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MaterialFinancialInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'import_type' => 'int',
        'price_set_id' => 'string',
        'transport_costs' => 'double',
        'handling_feedstock_euro_kg' => 'double',
        'handling_feedstock_percentage' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'import_type' => 'int32',
        'price_set_id' => null,
        'transport_costs' => 'double',
        'handling_feedstock_euro_kg' => 'double',
        'handling_feedstock_percentage' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'import_type' => 'importType',
        'price_set_id' => 'priceSetId',
        'transport_costs' => 'transportCosts',
        'handling_feedstock_euro_kg' => 'handlingFeedstockEuroKg',
        'handling_feedstock_percentage' => 'handlingFeedstockPercentage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'import_type' => 'setImportType',
        'price_set_id' => 'setPriceSetId',
        'transport_costs' => 'setTransportCosts',
        'handling_feedstock_euro_kg' => 'setHandlingFeedstockEuroKg',
        'handling_feedstock_percentage' => 'setHandlingFeedstockPercentage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'import_type' => 'getImportType',
        'price_set_id' => 'getPriceSetId',
        'transport_costs' => 'getTransportCosts',
        'handling_feedstock_euro_kg' => 'getHandlingFeedstockEuroKg',
        'handling_feedstock_percentage' => 'getHandlingFeedstockPercentage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const IMPORT_TYPE_0 = 0;
    const IMPORT_TYPE_10 = 10;
    const IMPORT_TYPE_20 = 20;
    const IMPORT_TYPE_30 = 30;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getImportTypeAllowableValues()
    {
        return [
            self::IMPORT_TYPE_0,
            self::IMPORT_TYPE_10,
            self::IMPORT_TYPE_20,
            self::IMPORT_TYPE_30,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['import_type'] = isset($data['import_type']) ? $data['import_type'] : null;
        $this->container['price_set_id'] = isset($data['price_set_id']) ? $data['price_set_id'] : null;
        $this->container['transport_costs'] = isset($data['transport_costs']) ? $data['transport_costs'] : null;
        $this->container['handling_feedstock_euro_kg'] = isset($data['handling_feedstock_euro_kg']) ? $data['handling_feedstock_euro_kg'] : null;
        $this->container['handling_feedstock_percentage'] = isset($data['handling_feedstock_percentage']) ? $data['handling_feedstock_percentage'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getImportTypeAllowableValues();
        if (!is_null($this->container['import_type']) && !in_array($this->container['import_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'import_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets import_type
     *
     * @return int
     */
    public function getImportType()
    {
        return $this->container['import_type'];
    }

    /**
     * Sets import_type
     *
     * @param int $import_type The type of import that supplies this financial information
     *
     * @return $this
     */
    public function setImportType($import_type)
    {
        $allowedValues = $this->getImportTypeAllowableValues();
        if (!is_null($import_type) && !in_array($import_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'import_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['import_type'] = $import_type;

        return $this;
    }

    /**
     * Gets price_set_id
     *
     * @return string
     */
    public function getPriceSetId()
    {
        return $this->container['price_set_id'];
    }

    /**
     * Sets price_set_id
     *
     * @param string $price_set_id The identifier of the price set that supplies the financial information
     *
     * @return $this
     */
    public function setPriceSetId($price_set_id)
    {
        $this->container['price_set_id'] = $price_set_id;

        return $this;
    }

    /**
     * Gets transport_costs
     *
     * @return double
     */
    public function getTransportCosts()
    {
        return $this->container['transport_costs'];
    }

    /**
     * Sets transport_costs
     *
     * @param double $transport_costs The costs of transporting the material to its destination
     *
     * @return $this
     */
    public function setTransportCosts($transport_costs)
    {
        $this->container['transport_costs'] = $transport_costs;

        return $this;
    }

    /**
     * Gets handling_feedstock_euro_kg
     *
     * @return double
     */
    public function getHandlingFeedstockEuroKg()
    {
        return $this->container['handling_feedstock_euro_kg'];
    }

    /**
     * Sets handling_feedstock_euro_kg
     *
     * @param double $handling_feedstock_euro_kg The handling costs of the material, in â‚¬ / kg
     *
     * @return $this
     */
    public function setHandlingFeedstockEuroKg($handling_feedstock_euro_kg)
    {
        $this->container['handling_feedstock_euro_kg'] = $handling_feedstock_euro_kg;

        return $this;
    }

    /**
     * Gets handling_feedstock_percentage
     *
     * @return double
     */
    public function getHandlingFeedstockPercentage()
    {
        return $this->container['handling_feedstock_percentage'];
    }

    /**
     * Sets handling_feedstock_percentage
     *
     * @param double $handling_feedstock_percentage The handling costs of the material, in percentage of its value
     *
     * @return $this
     */
    public function setHandlingFeedstockPercentage($handling_feedstock_percentage)
    {
        $this->container['handling_feedstock_percentage'] = $handling_feedstock_percentage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


