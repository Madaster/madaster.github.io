/* 
 * Madaster Private API
 *
 * The Madaster Private API endpoint.
 *
 * OpenAPI spec version: 1.1
 * Contact: service@madaster.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Madaster.API.Client;
using Madaster.API.Model;

namespace Madaster.API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBuildingFileElementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes an existing building file element.
        /// </summary>
        /// <remarks>
        /// Sample request:        DELETE api/[version]/buildings/[buildingid]/files/[fileid]/elements/[id]
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="id">The identifier of the element.</param>
        /// <returns></returns>
        void ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdDelete (Guid? buildingId, Guid? fileId, string id);

        /// <summary>
        /// Deletes an existing building file element.
        /// </summary>
        /// <remarks>
        /// Sample request:        DELETE api/[version]/buildings/[buildingid]/files/[fileid]/elements/[id]
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="id">The identifier of the element.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdDeleteWithHttpInfo (Guid? buildingId, Guid? fileId, string id);
        /// <summary>
        /// Gets a building file element by its identifier and building file identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:        GET api/[version]/buildings/[buildingid]/files/[fileid]/elements/[id]
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="id">The identifier of the element.</param>
        /// <returns>BuildingFileElement</returns>
        BuildingFileElement ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdGet (Guid? buildingId, Guid? fileId, string id);

        /// <summary>
        /// Gets a building file element by its identifier and building file identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:        GET api/[version]/buildings/[buildingid]/files/[fileid]/elements/[id]
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="id">The identifier of the element.</param>
        /// <returns>ApiResponse of BuildingFileElement</returns>
        ApiResponse<BuildingFileElement> ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdGetWithHttpInfo (Guid? buildingId, Guid? fileId, string id);
        /// <summary>
        /// Updates an existing building file element.
        /// </summary>
        /// <remarks>
        /// Sample request:        PUT api/[version]/buildings/[buildingid]/files/[fileid]/elements/[id]
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="id">The identifier of the element.</param>
        /// <param name="updateElementRequest">The element to create. (optional)</param>
        /// <returns>BuildingFileElement</returns>
        BuildingFileElement ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdPut (Guid? buildingId, Guid? fileId, string id, V11CreateBuildingFileElementRequest updateElementRequest = null);

        /// <summary>
        /// Updates an existing building file element.
        /// </summary>
        /// <remarks>
        /// Sample request:        PUT api/[version]/buildings/[buildingid]/files/[fileid]/elements/[id]
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="id">The identifier of the element.</param>
        /// <param name="updateElementRequest">The element to create. (optional)</param>
        /// <returns>ApiResponse of BuildingFileElement</returns>
        ApiResponse<BuildingFileElement> ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdPutWithHttpInfo (Guid? buildingId, Guid? fileId, string id, V11CreateBuildingFileElementRequest updateElementRequest = null);
        /// <summary>
        /// Gets a building file elements by its building file identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET api/[version]/buildings/[buildingid]/files/[fileid]/elements                - --    This API is ODATA enabled, the following filters can be used:    * $select  * $filter  * $skip  * $top                [READ MORE](https://developer.microsoft.com/en-us/graph/docs/concepts/query_parameters)
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <returns>List&lt;BuildingFileElement&gt;</returns>
        List<BuildingFileElement> ApiV11BuildingsByBuildingIdFilesByFileIdElementsGet (Guid? buildingId, Guid? fileId);

        /// <summary>
        /// Gets a building file elements by its building file identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET api/[version]/buildings/[buildingid]/files/[fileid]/elements                - --    This API is ODATA enabled, the following filters can be used:    * $select  * $filter  * $skip  * $top                [READ MORE](https://developer.microsoft.com/en-us/graph/docs/concepts/query_parameters)
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <returns>ApiResponse of List&lt;BuildingFileElement&gt;</returns>
        ApiResponse<List<BuildingFileElement>> ApiV11BuildingsByBuildingIdFilesByFileIdElementsGetWithHttpInfo (Guid? buildingId, Guid? fileId);
        /// <summary>
        /// Create a new building file element.
        /// </summary>
        /// <remarks>
        /// Sample request:        POST api/[version]/buildings/[buildingid]/files/[fileid]/elements
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="createElementRequest">The element to create. (optional)</param>
        /// <returns>BuildingFileElement</returns>
        BuildingFileElement ApiV11BuildingsByBuildingIdFilesByFileIdElementsPost (Guid? buildingId, Guid? fileId, V11CreateBuildingFileElementRequest createElementRequest = null);

        /// <summary>
        /// Create a new building file element.
        /// </summary>
        /// <remarks>
        /// Sample request:        POST api/[version]/buildings/[buildingid]/files/[fileid]/elements
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="createElementRequest">The element to create. (optional)</param>
        /// <returns>ApiResponse of BuildingFileElement</returns>
        ApiResponse<BuildingFileElement> ApiV11BuildingsByBuildingIdFilesByFileIdElementsPostWithHttpInfo (Guid? buildingId, Guid? fileId, V11CreateBuildingFileElementRequest createElementRequest = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes an existing building file element.
        /// </summary>
        /// <remarks>
        /// Sample request:        DELETE api/[version]/buildings/[buildingid]/files/[fileid]/elements/[id]
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="id">The identifier of the element.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdDeleteAsync (Guid? buildingId, Guid? fileId, string id);

        /// <summary>
        /// Deletes an existing building file element.
        /// </summary>
        /// <remarks>
        /// Sample request:        DELETE api/[version]/buildings/[buildingid]/files/[fileid]/elements/[id]
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="id">The identifier of the element.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdDeleteAsyncWithHttpInfo (Guid? buildingId, Guid? fileId, string id);
        /// <summary>
        /// Gets a building file element by its identifier and building file identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:        GET api/[version]/buildings/[buildingid]/files/[fileid]/elements/[id]
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="id">The identifier of the element.</param>
        /// <returns>Task of BuildingFileElement</returns>
        System.Threading.Tasks.Task<BuildingFileElement> ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdGetAsync (Guid? buildingId, Guid? fileId, string id);

        /// <summary>
        /// Gets a building file element by its identifier and building file identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:        GET api/[version]/buildings/[buildingid]/files/[fileid]/elements/[id]
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="id">The identifier of the element.</param>
        /// <returns>Task of ApiResponse (BuildingFileElement)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildingFileElement>> ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdGetAsyncWithHttpInfo (Guid? buildingId, Guid? fileId, string id);
        /// <summary>
        /// Updates an existing building file element.
        /// </summary>
        /// <remarks>
        /// Sample request:        PUT api/[version]/buildings/[buildingid]/files/[fileid]/elements/[id]
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="id">The identifier of the element.</param>
        /// <param name="updateElementRequest">The element to create. (optional)</param>
        /// <returns>Task of BuildingFileElement</returns>
        System.Threading.Tasks.Task<BuildingFileElement> ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdPutAsync (Guid? buildingId, Guid? fileId, string id, V11CreateBuildingFileElementRequest updateElementRequest = null);

        /// <summary>
        /// Updates an existing building file element.
        /// </summary>
        /// <remarks>
        /// Sample request:        PUT api/[version]/buildings/[buildingid]/files/[fileid]/elements/[id]
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="id">The identifier of the element.</param>
        /// <param name="updateElementRequest">The element to create. (optional)</param>
        /// <returns>Task of ApiResponse (BuildingFileElement)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildingFileElement>> ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdPutAsyncWithHttpInfo (Guid? buildingId, Guid? fileId, string id, V11CreateBuildingFileElementRequest updateElementRequest = null);
        /// <summary>
        /// Gets a building file elements by its building file identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET api/[version]/buildings/[buildingid]/files/[fileid]/elements                - --    This API is ODATA enabled, the following filters can be used:    * $select  * $filter  * $skip  * $top                [READ MORE](https://developer.microsoft.com/en-us/graph/docs/concepts/query_parameters)
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <returns>Task of List&lt;BuildingFileElement&gt;</returns>
        System.Threading.Tasks.Task<List<BuildingFileElement>> ApiV11BuildingsByBuildingIdFilesByFileIdElementsGetAsync (Guid? buildingId, Guid? fileId);

        /// <summary>
        /// Gets a building file elements by its building file identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET api/[version]/buildings/[buildingid]/files/[fileid]/elements                - --    This API is ODATA enabled, the following filters can be used:    * $select  * $filter  * $skip  * $top                [READ MORE](https://developer.microsoft.com/en-us/graph/docs/concepts/query_parameters)
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <returns>Task of ApiResponse (List&lt;BuildingFileElement&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BuildingFileElement>>> ApiV11BuildingsByBuildingIdFilesByFileIdElementsGetAsyncWithHttpInfo (Guid? buildingId, Guid? fileId);
        /// <summary>
        /// Create a new building file element.
        /// </summary>
        /// <remarks>
        /// Sample request:        POST api/[version]/buildings/[buildingid]/files/[fileid]/elements
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="createElementRequest">The element to create. (optional)</param>
        /// <returns>Task of BuildingFileElement</returns>
        System.Threading.Tasks.Task<BuildingFileElement> ApiV11BuildingsByBuildingIdFilesByFileIdElementsPostAsync (Guid? buildingId, Guid? fileId, V11CreateBuildingFileElementRequest createElementRequest = null);

        /// <summary>
        /// Create a new building file element.
        /// </summary>
        /// <remarks>
        /// Sample request:        POST api/[version]/buildings/[buildingid]/files/[fileid]/elements
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="createElementRequest">The element to create. (optional)</param>
        /// <returns>Task of ApiResponse (BuildingFileElement)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildingFileElement>> ApiV11BuildingsByBuildingIdFilesByFileIdElementsPostAsyncWithHttpInfo (Guid? buildingId, Guid? fileId, V11CreateBuildingFileElementRequest createElementRequest = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BuildingFileElementApi : IBuildingFileElementApi
    {
        private Madaster.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BuildingFileElementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BuildingFileElementApi(String basePath)
        {
            this.Configuration = new Madaster.API.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Madaster.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BuildingFileElementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BuildingFileElementApi(Madaster.API.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Madaster.API.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Madaster.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Madaster.API.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Madaster.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes an existing building file element. Sample request:        DELETE api/[version]/buildings/[buildingid]/files/[fileid]/elements/[id]
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="id">The identifier of the element.</param>
        /// <returns></returns>
        public void ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdDelete (Guid? buildingId, Guid? fileId, string id)
        {
             ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdDeleteWithHttpInfo(buildingId, fileId, id);
        }

        /// <summary>
        /// Deletes an existing building file element. Sample request:        DELETE api/[version]/buildings/[buildingid]/files/[fileid]/elements/[id]
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="id">The identifier of the element.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdDeleteWithHttpInfo (Guid? buildingId, Guid? fileId, string id)
        {
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling BuildingFileElementApi->ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdDelete");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling BuildingFileElementApi->ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingFileElementApi->ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdDelete");

            var localVarPath = "/api/v1.1/buildings/{buildingId}/files/{fileId}/elements/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes an existing building file element. Sample request:        DELETE api/[version]/buildings/[buildingid]/files/[fileid]/elements/[id]
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="id">The identifier of the element.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdDeleteAsync (Guid? buildingId, Guid? fileId, string id)
        {
             await ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdDeleteAsyncWithHttpInfo(buildingId, fileId, id);

        }

        /// <summary>
        /// Deletes an existing building file element. Sample request:        DELETE api/[version]/buildings/[buildingid]/files/[fileid]/elements/[id]
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="id">The identifier of the element.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdDeleteAsyncWithHttpInfo (Guid? buildingId, Guid? fileId, string id)
        {
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling BuildingFileElementApi->ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdDelete");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling BuildingFileElementApi->ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingFileElementApi->ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdDelete");

            var localVarPath = "/api/v1.1/buildings/{buildingId}/files/{fileId}/elements/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets a building file element by its identifier and building file identifier. Sample request:        GET api/[version]/buildings/[buildingid]/files/[fileid]/elements/[id]
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="id">The identifier of the element.</param>
        /// <returns>BuildingFileElement</returns>
        public BuildingFileElement ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdGet (Guid? buildingId, Guid? fileId, string id)
        {
             ApiResponse<BuildingFileElement> localVarResponse = ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdGetWithHttpInfo(buildingId, fileId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a building file element by its identifier and building file identifier. Sample request:        GET api/[version]/buildings/[buildingid]/files/[fileid]/elements/[id]
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="id">The identifier of the element.</param>
        /// <returns>ApiResponse of BuildingFileElement</returns>
        public ApiResponse< BuildingFileElement > ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdGetWithHttpInfo (Guid? buildingId, Guid? fileId, string id)
        {
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling BuildingFileElementApi->ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdGet");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling BuildingFileElementApi->ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingFileElementApi->ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdGet");

            var localVarPath = "/api/v1.1/buildings/{buildingId}/files/{fileId}/elements/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildingFileElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildingFileElement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildingFileElement)));
        }

        /// <summary>
        /// Gets a building file element by its identifier and building file identifier. Sample request:        GET api/[version]/buildings/[buildingid]/files/[fileid]/elements/[id]
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="id">The identifier of the element.</param>
        /// <returns>Task of BuildingFileElement</returns>
        public async System.Threading.Tasks.Task<BuildingFileElement> ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdGetAsync (Guid? buildingId, Guid? fileId, string id)
        {
             ApiResponse<BuildingFileElement> localVarResponse = await ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdGetAsyncWithHttpInfo(buildingId, fileId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a building file element by its identifier and building file identifier. Sample request:        GET api/[version]/buildings/[buildingid]/files/[fileid]/elements/[id]
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="id">The identifier of the element.</param>
        /// <returns>Task of ApiResponse (BuildingFileElement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildingFileElement>> ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdGetAsyncWithHttpInfo (Guid? buildingId, Guid? fileId, string id)
        {
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling BuildingFileElementApi->ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdGet");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling BuildingFileElementApi->ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingFileElementApi->ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdGet");

            var localVarPath = "/api/v1.1/buildings/{buildingId}/files/{fileId}/elements/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildingFileElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildingFileElement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildingFileElement)));
        }

        /// <summary>
        /// Updates an existing building file element. Sample request:        PUT api/[version]/buildings/[buildingid]/files/[fileid]/elements/[id]
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="id">The identifier of the element.</param>
        /// <param name="updateElementRequest">The element to create. (optional)</param>
        /// <returns>BuildingFileElement</returns>
        public BuildingFileElement ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdPut (Guid? buildingId, Guid? fileId, string id, V11CreateBuildingFileElementRequest updateElementRequest = null)
        {
             ApiResponse<BuildingFileElement> localVarResponse = ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdPutWithHttpInfo(buildingId, fileId, id, updateElementRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an existing building file element. Sample request:        PUT api/[version]/buildings/[buildingid]/files/[fileid]/elements/[id]
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="id">The identifier of the element.</param>
        /// <param name="updateElementRequest">The element to create. (optional)</param>
        /// <returns>ApiResponse of BuildingFileElement</returns>
        public ApiResponse< BuildingFileElement > ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdPutWithHttpInfo (Guid? buildingId, Guid? fileId, string id, V11CreateBuildingFileElementRequest updateElementRequest = null)
        {
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling BuildingFileElementApi->ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdPut");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling BuildingFileElementApi->ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingFileElementApi->ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdPut");

            var localVarPath = "/api/v1.1/buildings/{buildingId}/files/{fileId}/elements/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateElementRequest != null && updateElementRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateElementRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateElementRequest; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildingFileElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildingFileElement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildingFileElement)));
        }

        /// <summary>
        /// Updates an existing building file element. Sample request:        PUT api/[version]/buildings/[buildingid]/files/[fileid]/elements/[id]
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="id">The identifier of the element.</param>
        /// <param name="updateElementRequest">The element to create. (optional)</param>
        /// <returns>Task of BuildingFileElement</returns>
        public async System.Threading.Tasks.Task<BuildingFileElement> ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdPutAsync (Guid? buildingId, Guid? fileId, string id, V11CreateBuildingFileElementRequest updateElementRequest = null)
        {
             ApiResponse<BuildingFileElement> localVarResponse = await ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdPutAsyncWithHttpInfo(buildingId, fileId, id, updateElementRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an existing building file element. Sample request:        PUT api/[version]/buildings/[buildingid]/files/[fileid]/elements/[id]
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="id">The identifier of the element.</param>
        /// <param name="updateElementRequest">The element to create. (optional)</param>
        /// <returns>Task of ApiResponse (BuildingFileElement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildingFileElement>> ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdPutAsyncWithHttpInfo (Guid? buildingId, Guid? fileId, string id, V11CreateBuildingFileElementRequest updateElementRequest = null)
        {
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling BuildingFileElementApi->ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdPut");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling BuildingFileElementApi->ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingFileElementApi->ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdPut");

            var localVarPath = "/api/v1.1/buildings/{buildingId}/files/{fileId}/elements/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateElementRequest != null && updateElementRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateElementRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateElementRequest; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByBuildingIdFilesByFileIdElementsByIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildingFileElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildingFileElement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildingFileElement)));
        }

        /// <summary>
        /// Gets a building file elements by its building file identifier. Sample request:                    GET api/[version]/buildings/[buildingid]/files/[fileid]/elements                - --    This API is ODATA enabled, the following filters can be used:    * $select  * $filter  * $skip  * $top                [READ MORE](https://developer.microsoft.com/en-us/graph/docs/concepts/query_parameters)
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <returns>List&lt;BuildingFileElement&gt;</returns>
        public List<BuildingFileElement> ApiV11BuildingsByBuildingIdFilesByFileIdElementsGet (Guid? buildingId, Guid? fileId)
        {
             ApiResponse<List<BuildingFileElement>> localVarResponse = ApiV11BuildingsByBuildingIdFilesByFileIdElementsGetWithHttpInfo(buildingId, fileId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a building file elements by its building file identifier. Sample request:                    GET api/[version]/buildings/[buildingid]/files/[fileid]/elements                - --    This API is ODATA enabled, the following filters can be used:    * $select  * $filter  * $skip  * $top                [READ MORE](https://developer.microsoft.com/en-us/graph/docs/concepts/query_parameters)
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <returns>ApiResponse of List&lt;BuildingFileElement&gt;</returns>
        public ApiResponse< List<BuildingFileElement> > ApiV11BuildingsByBuildingIdFilesByFileIdElementsGetWithHttpInfo (Guid? buildingId, Guid? fileId)
        {
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling BuildingFileElementApi->ApiV11BuildingsByBuildingIdFilesByFileIdElementsGet");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling BuildingFileElementApi->ApiV11BuildingsByBuildingIdFilesByFileIdElementsGet");

            var localVarPath = "/api/v1.1/buildings/{buildingId}/files/{fileId}/elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByBuildingIdFilesByFileIdElementsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BuildingFileElement>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BuildingFileElement>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BuildingFileElement>)));
        }

        /// <summary>
        /// Gets a building file elements by its building file identifier. Sample request:                    GET api/[version]/buildings/[buildingid]/files/[fileid]/elements                - --    This API is ODATA enabled, the following filters can be used:    * $select  * $filter  * $skip  * $top                [READ MORE](https://developer.microsoft.com/en-us/graph/docs/concepts/query_parameters)
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <returns>Task of List&lt;BuildingFileElement&gt;</returns>
        public async System.Threading.Tasks.Task<List<BuildingFileElement>> ApiV11BuildingsByBuildingIdFilesByFileIdElementsGetAsync (Guid? buildingId, Guid? fileId)
        {
             ApiResponse<List<BuildingFileElement>> localVarResponse = await ApiV11BuildingsByBuildingIdFilesByFileIdElementsGetAsyncWithHttpInfo(buildingId, fileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a building file elements by its building file identifier. Sample request:                    GET api/[version]/buildings/[buildingid]/files/[fileid]/elements                - --    This API is ODATA enabled, the following filters can be used:    * $select  * $filter  * $skip  * $top                [READ MORE](https://developer.microsoft.com/en-us/graph/docs/concepts/query_parameters)
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <returns>Task of ApiResponse (List&lt;BuildingFileElement&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BuildingFileElement>>> ApiV11BuildingsByBuildingIdFilesByFileIdElementsGetAsyncWithHttpInfo (Guid? buildingId, Guid? fileId)
        {
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling BuildingFileElementApi->ApiV11BuildingsByBuildingIdFilesByFileIdElementsGet");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling BuildingFileElementApi->ApiV11BuildingsByBuildingIdFilesByFileIdElementsGet");

            var localVarPath = "/api/v1.1/buildings/{buildingId}/files/{fileId}/elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByBuildingIdFilesByFileIdElementsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BuildingFileElement>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BuildingFileElement>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BuildingFileElement>)));
        }

        /// <summary>
        /// Create a new building file element. Sample request:        POST api/[version]/buildings/[buildingid]/files/[fileid]/elements
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="createElementRequest">The element to create. (optional)</param>
        /// <returns>BuildingFileElement</returns>
        public BuildingFileElement ApiV11BuildingsByBuildingIdFilesByFileIdElementsPost (Guid? buildingId, Guid? fileId, V11CreateBuildingFileElementRequest createElementRequest = null)
        {
             ApiResponse<BuildingFileElement> localVarResponse = ApiV11BuildingsByBuildingIdFilesByFileIdElementsPostWithHttpInfo(buildingId, fileId, createElementRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new building file element. Sample request:        POST api/[version]/buildings/[buildingid]/files/[fileid]/elements
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="createElementRequest">The element to create. (optional)</param>
        /// <returns>ApiResponse of BuildingFileElement</returns>
        public ApiResponse< BuildingFileElement > ApiV11BuildingsByBuildingIdFilesByFileIdElementsPostWithHttpInfo (Guid? buildingId, Guid? fileId, V11CreateBuildingFileElementRequest createElementRequest = null)
        {
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling BuildingFileElementApi->ApiV11BuildingsByBuildingIdFilesByFileIdElementsPost");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling BuildingFileElementApi->ApiV11BuildingsByBuildingIdFilesByFileIdElementsPost");

            var localVarPath = "/api/v1.1/buildings/{buildingId}/files/{fileId}/elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (createElementRequest != null && createElementRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createElementRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createElementRequest; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByBuildingIdFilesByFileIdElementsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildingFileElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildingFileElement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildingFileElement)));
        }

        /// <summary>
        /// Create a new building file element. Sample request:        POST api/[version]/buildings/[buildingid]/files/[fileid]/elements
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="createElementRequest">The element to create. (optional)</param>
        /// <returns>Task of BuildingFileElement</returns>
        public async System.Threading.Tasks.Task<BuildingFileElement> ApiV11BuildingsByBuildingIdFilesByFileIdElementsPostAsync (Guid? buildingId, Guid? fileId, V11CreateBuildingFileElementRequest createElementRequest = null)
        {
             ApiResponse<BuildingFileElement> localVarResponse = await ApiV11BuildingsByBuildingIdFilesByFileIdElementsPostAsyncWithHttpInfo(buildingId, fileId, createElementRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new building file element. Sample request:        POST api/[version]/buildings/[buildingid]/files/[fileid]/elements
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="fileId">The identifier of the building file.</param>
        /// <param name="createElementRequest">The element to create. (optional)</param>
        /// <returns>Task of ApiResponse (BuildingFileElement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildingFileElement>> ApiV11BuildingsByBuildingIdFilesByFileIdElementsPostAsyncWithHttpInfo (Guid? buildingId, Guid? fileId, V11CreateBuildingFileElementRequest createElementRequest = null)
        {
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling BuildingFileElementApi->ApiV11BuildingsByBuildingIdFilesByFileIdElementsPost");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling BuildingFileElementApi->ApiV11BuildingsByBuildingIdFilesByFileIdElementsPost");

            var localVarPath = "/api/v1.1/buildings/{buildingId}/files/{fileId}/elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (createElementRequest != null && createElementRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createElementRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createElementRequest; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByBuildingIdFilesByFileIdElementsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildingFileElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildingFileElement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildingFileElement)));
        }

    }
}
