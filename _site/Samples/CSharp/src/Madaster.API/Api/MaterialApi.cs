/* 
 * Madaster Private API
 *
 * The Madaster Private API endpoint.
 *
 * OpenAPI spec version: 1.1
 * Contact: service@madaster.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Madaster.API.Client;
using Madaster.API.Model;

namespace Madaster.API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMaterialApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the financial values of a material, for manual import mode.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <returns>List&lt;MaterialFinancialValue&gt;</returns>
        List<MaterialFinancialValue> ApiV11MaterialsByIdFinancialvaluesGet (Guid? id);

        /// <summary>
        /// Gets the financial values of a material, for manual import mode.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <returns>ApiResponse of List&lt;MaterialFinancialValue&gt;</returns>
        ApiResponse<List<MaterialFinancialValue>> ApiV11MaterialsByIdFinancialvaluesGetWithHttpInfo (Guid? id);
        /// <summary>
        /// Adds a financial value for a material, for manual import mode.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/materials/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="value">The value to add. (optional)</param>
        /// <returns>MaterialFinancialValue</returns>
        MaterialFinancialValue ApiV11MaterialsByIdFinancialvaluesPost (Guid? id, MaterialFinancialValue value = null);

        /// <summary>
        /// Adds a financial value for a material, for manual import mode.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/materials/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="value">The value to add. (optional)</param>
        /// <returns>ApiResponse of MaterialFinancialValue</returns>
        ApiResponse<MaterialFinancialValue> ApiV11MaterialsByIdFinancialvaluesPostWithHttpInfo (Guid? id, MaterialFinancialValue value = null);
        /// <summary>
        /// Replaces the financial values for a material, for manual import mode.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/materials/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="values">The values to set. (optional)</param>
        /// <returns>List&lt;MaterialFinancialValue&gt;</returns>
        List<MaterialFinancialValue> ApiV11MaterialsByIdFinancialvaluesPut (Guid? id, List<MaterialFinancialValue> values = null);

        /// <summary>
        /// Replaces the financial values for a material, for manual import mode.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/materials/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="values">The values to set. (optional)</param>
        /// <returns>ApiResponse of List&lt;MaterialFinancialValue&gt;</returns>
        ApiResponse<List<MaterialFinancialValue>> ApiV11MaterialsByIdFinancialvaluesPutWithHttpInfo (Guid? id, List<MaterialFinancialValue> values = null);
        /// <summary>
        /// Gets a material by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <returns>Material</returns>
        Material ApiV11MaterialsByIdGet (Guid? id);

        /// <summary>
        /// Gets a material by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <returns>ApiResponse of Material</returns>
        ApiResponse<Material> ApiV11MaterialsByIdGetWithHttpInfo (Guid? id);
        /// <summary>
        /// Gets the matches of a material.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials/[id]/matches  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <returns>List&lt;MaterialMatch&gt;</returns>
        List<MaterialMatch> ApiV11MaterialsByIdMatchesGet (Guid? id);

        /// <summary>
        /// Gets the matches of a material.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials/[id]/matches  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <returns>ApiResponse of List&lt;MaterialMatch&gt;</returns>
        ApiResponse<List<MaterialMatch>> ApiV11MaterialsByIdMatchesGetWithHttpInfo (Guid? id);
        /// <summary>
        /// Adds a match for a material.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/materials/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="match">The match to add. (optional)</param>
        /// <returns>MaterialMatch</returns>
        MaterialMatch ApiV11MaterialsByIdMatchesPost (Guid? id, MaterialMatch match = null);

        /// <summary>
        /// Adds a match for a material.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/materials/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="match">The match to add. (optional)</param>
        /// <returns>ApiResponse of MaterialMatch</returns>
        ApiResponse<MaterialMatch> ApiV11MaterialsByIdMatchesPostWithHttpInfo (Guid? id, MaterialMatch match = null);
        /// <summary>
        /// Replaces the matches for a material.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/materials/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="matches">The matches to set. (optional)</param>
        /// <returns>List&lt;MaterialMatch&gt;</returns>
        List<MaterialMatch> ApiV11MaterialsByIdMatchesPut (Guid? id, List<MaterialMatch> matches = null);

        /// <summary>
        /// Replaces the matches for a material.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/materials/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="matches">The matches to set. (optional)</param>
        /// <returns>ApiResponse of List&lt;MaterialMatch&gt;</returns>
        ApiResponse<List<MaterialMatch>> ApiV11MaterialsByIdMatchesPutWithHttpInfo (Guid? id, List<MaterialMatch> matches = null);
        /// <summary>
        /// Replaces a material.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/materials/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier.</param>
        /// <param name="material">The material model. (optional)</param>
        /// <returns>Material</returns>
        Material ApiV11MaterialsByIdPut (Guid? id, Material material = null);

        /// <summary>
        /// Replaces a material.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/materials/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier.</param>
        /// <param name="material">The material model. (optional)</param>
        /// <returns>ApiResponse of Material</returns>
        ApiResponse<Material> ApiV11MaterialsByIdPutWithHttpInfo (Guid? id, Material material = null);
        /// <summary>
        /// Gets all materials.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Material&gt;</returns>
        List<Material> ApiV11MaterialsGet ();

        /// <summary>
        /// Gets all materials.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Material&gt;</returns>
        ApiResponse<List<Material>> ApiV11MaterialsGetWithHttpInfo ();
        /// <summary>
        /// Adds a material.
        /// </summary>
        /// <remarks>
        /// Sample request:   &#x60;&#x60;&#x60;  POST api/[version]/materials  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="material">The material model. (optional)</param>
        /// <returns>Material</returns>
        Material ApiV11MaterialsPost (Material material = null);

        /// <summary>
        /// Adds a material.
        /// </summary>
        /// <remarks>
        /// Sample request:   &#x60;&#x60;&#x60;  POST api/[version]/materials  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="material">The material model. (optional)</param>
        /// <returns>ApiResponse of Material</returns>
        ApiResponse<Material> ApiV11MaterialsPostWithHttpInfo (Material material = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets the financial values of a material, for manual import mode.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <returns>Task of List&lt;MaterialFinancialValue&gt;</returns>
        System.Threading.Tasks.Task<List<MaterialFinancialValue>> ApiV11MaterialsByIdFinancialvaluesGetAsync (Guid? id);

        /// <summary>
        /// Gets the financial values of a material, for manual import mode.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <returns>Task of ApiResponse (List&lt;MaterialFinancialValue&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MaterialFinancialValue>>> ApiV11MaterialsByIdFinancialvaluesGetAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// Adds a financial value for a material, for manual import mode.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/materials/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="value">The value to add. (optional)</param>
        /// <returns>Task of MaterialFinancialValue</returns>
        System.Threading.Tasks.Task<MaterialFinancialValue> ApiV11MaterialsByIdFinancialvaluesPostAsync (Guid? id, MaterialFinancialValue value = null);

        /// <summary>
        /// Adds a financial value for a material, for manual import mode.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/materials/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="value">The value to add. (optional)</param>
        /// <returns>Task of ApiResponse (MaterialFinancialValue)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaterialFinancialValue>> ApiV11MaterialsByIdFinancialvaluesPostAsyncWithHttpInfo (Guid? id, MaterialFinancialValue value = null);
        /// <summary>
        /// Replaces the financial values for a material, for manual import mode.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/materials/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="values">The values to set. (optional)</param>
        /// <returns>Task of List&lt;MaterialFinancialValue&gt;</returns>
        System.Threading.Tasks.Task<List<MaterialFinancialValue>> ApiV11MaterialsByIdFinancialvaluesPutAsync (Guid? id, List<MaterialFinancialValue> values = null);

        /// <summary>
        /// Replaces the financial values for a material, for manual import mode.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/materials/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="values">The values to set. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MaterialFinancialValue&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MaterialFinancialValue>>> ApiV11MaterialsByIdFinancialvaluesPutAsyncWithHttpInfo (Guid? id, List<MaterialFinancialValue> values = null);
        /// <summary>
        /// Gets a material by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <returns>Task of Material</returns>
        System.Threading.Tasks.Task<Material> ApiV11MaterialsByIdGetAsync (Guid? id);

        /// <summary>
        /// Gets a material by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <returns>Task of ApiResponse (Material)</returns>
        System.Threading.Tasks.Task<ApiResponse<Material>> ApiV11MaterialsByIdGetAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// Gets the matches of a material.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials/[id]/matches  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <returns>Task of List&lt;MaterialMatch&gt;</returns>
        System.Threading.Tasks.Task<List<MaterialMatch>> ApiV11MaterialsByIdMatchesGetAsync (Guid? id);

        /// <summary>
        /// Gets the matches of a material.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials/[id]/matches  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <returns>Task of ApiResponse (List&lt;MaterialMatch&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MaterialMatch>>> ApiV11MaterialsByIdMatchesGetAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// Adds a match for a material.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/materials/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="match">The match to add. (optional)</param>
        /// <returns>Task of MaterialMatch</returns>
        System.Threading.Tasks.Task<MaterialMatch> ApiV11MaterialsByIdMatchesPostAsync (Guid? id, MaterialMatch match = null);

        /// <summary>
        /// Adds a match for a material.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/materials/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="match">The match to add. (optional)</param>
        /// <returns>Task of ApiResponse (MaterialMatch)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaterialMatch>> ApiV11MaterialsByIdMatchesPostAsyncWithHttpInfo (Guid? id, MaterialMatch match = null);
        /// <summary>
        /// Replaces the matches for a material.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/materials/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="matches">The matches to set. (optional)</param>
        /// <returns>Task of List&lt;MaterialMatch&gt;</returns>
        System.Threading.Tasks.Task<List<MaterialMatch>> ApiV11MaterialsByIdMatchesPutAsync (Guid? id, List<MaterialMatch> matches = null);

        /// <summary>
        /// Replaces the matches for a material.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/materials/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="matches">The matches to set. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MaterialMatch&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MaterialMatch>>> ApiV11MaterialsByIdMatchesPutAsyncWithHttpInfo (Guid? id, List<MaterialMatch> matches = null);
        /// <summary>
        /// Replaces a material.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/materials/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier.</param>
        /// <param name="material">The material model. (optional)</param>
        /// <returns>Task of Material</returns>
        System.Threading.Tasks.Task<Material> ApiV11MaterialsByIdPutAsync (Guid? id, Material material = null);

        /// <summary>
        /// Replaces a material.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/materials/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier.</param>
        /// <param name="material">The material model. (optional)</param>
        /// <returns>Task of ApiResponse (Material)</returns>
        System.Threading.Tasks.Task<ApiResponse<Material>> ApiV11MaterialsByIdPutAsyncWithHttpInfo (Guid? id, Material material = null);
        /// <summary>
        /// Gets all materials.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Material&gt;</returns>
        System.Threading.Tasks.Task<List<Material>> ApiV11MaterialsGetAsync ();

        /// <summary>
        /// Gets all materials.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Material&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Material>>> ApiV11MaterialsGetAsyncWithHttpInfo ();
        /// <summary>
        /// Adds a material.
        /// </summary>
        /// <remarks>
        /// Sample request:   &#x60;&#x60;&#x60;  POST api/[version]/materials  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="material">The material model. (optional)</param>
        /// <returns>Task of Material</returns>
        System.Threading.Tasks.Task<Material> ApiV11MaterialsPostAsync (Material material = null);

        /// <summary>
        /// Adds a material.
        /// </summary>
        /// <remarks>
        /// Sample request:   &#x60;&#x60;&#x60;  POST api/[version]/materials  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="material">The material model. (optional)</param>
        /// <returns>Task of ApiResponse (Material)</returns>
        System.Threading.Tasks.Task<ApiResponse<Material>> ApiV11MaterialsPostAsyncWithHttpInfo (Material material = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MaterialApi : IMaterialApi
    {
        private Madaster.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MaterialApi(String basePath)
        {
            this.Configuration = new Madaster.API.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Madaster.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MaterialApi(Madaster.API.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Madaster.API.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Madaster.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Madaster.API.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Madaster.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets the financial values of a material, for manual import mode. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <returns>List&lt;MaterialFinancialValue&gt;</returns>
        public List<MaterialFinancialValue> ApiV11MaterialsByIdFinancialvaluesGet (Guid? id)
        {
             ApiResponse<List<MaterialFinancialValue>> localVarResponse = ApiV11MaterialsByIdFinancialvaluesGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the financial values of a material, for manual import mode. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <returns>ApiResponse of List&lt;MaterialFinancialValue&gt;</returns>
        public ApiResponse< List<MaterialFinancialValue> > ApiV11MaterialsByIdFinancialvaluesGetWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MaterialApi->ApiV11MaterialsByIdFinancialvaluesGet");

            var localVarPath = "/api/v1.1/materials/{id}/financialvalues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11MaterialsByIdFinancialvaluesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MaterialFinancialValue>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MaterialFinancialValue>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MaterialFinancialValue>)));
        }

        /// <summary>
        /// Gets the financial values of a material, for manual import mode. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <returns>Task of List&lt;MaterialFinancialValue&gt;</returns>
        public async System.Threading.Tasks.Task<List<MaterialFinancialValue>> ApiV11MaterialsByIdFinancialvaluesGetAsync (Guid? id)
        {
             ApiResponse<List<MaterialFinancialValue>> localVarResponse = await ApiV11MaterialsByIdFinancialvaluesGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the financial values of a material, for manual import mode. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <returns>Task of ApiResponse (List&lt;MaterialFinancialValue&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MaterialFinancialValue>>> ApiV11MaterialsByIdFinancialvaluesGetAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MaterialApi->ApiV11MaterialsByIdFinancialvaluesGet");

            var localVarPath = "/api/v1.1/materials/{id}/financialvalues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11MaterialsByIdFinancialvaluesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MaterialFinancialValue>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MaterialFinancialValue>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MaterialFinancialValue>)));
        }

        /// <summary>
        /// Adds a financial value for a material, for manual import mode. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/materials/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="value">The value to add. (optional)</param>
        /// <returns>MaterialFinancialValue</returns>
        public MaterialFinancialValue ApiV11MaterialsByIdFinancialvaluesPost (Guid? id, MaterialFinancialValue value = null)
        {
             ApiResponse<MaterialFinancialValue> localVarResponse = ApiV11MaterialsByIdFinancialvaluesPostWithHttpInfo(id, value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a financial value for a material, for manual import mode. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/materials/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="value">The value to add. (optional)</param>
        /// <returns>ApiResponse of MaterialFinancialValue</returns>
        public ApiResponse< MaterialFinancialValue > ApiV11MaterialsByIdFinancialvaluesPostWithHttpInfo (Guid? id, MaterialFinancialValue value = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MaterialApi->ApiV11MaterialsByIdFinancialvaluesPost");

            var localVarPath = "/api/v1.1/materials/{id}/financialvalues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11MaterialsByIdFinancialvaluesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaterialFinancialValue>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MaterialFinancialValue) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaterialFinancialValue)));
        }

        /// <summary>
        /// Adds a financial value for a material, for manual import mode. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/materials/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="value">The value to add. (optional)</param>
        /// <returns>Task of MaterialFinancialValue</returns>
        public async System.Threading.Tasks.Task<MaterialFinancialValue> ApiV11MaterialsByIdFinancialvaluesPostAsync (Guid? id, MaterialFinancialValue value = null)
        {
             ApiResponse<MaterialFinancialValue> localVarResponse = await ApiV11MaterialsByIdFinancialvaluesPostAsyncWithHttpInfo(id, value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a financial value for a material, for manual import mode. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/materials/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="value">The value to add. (optional)</param>
        /// <returns>Task of ApiResponse (MaterialFinancialValue)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MaterialFinancialValue>> ApiV11MaterialsByIdFinancialvaluesPostAsyncWithHttpInfo (Guid? id, MaterialFinancialValue value = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MaterialApi->ApiV11MaterialsByIdFinancialvaluesPost");

            var localVarPath = "/api/v1.1/materials/{id}/financialvalues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11MaterialsByIdFinancialvaluesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaterialFinancialValue>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MaterialFinancialValue) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaterialFinancialValue)));
        }

        /// <summary>
        /// Replaces the financial values for a material, for manual import mode. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/materials/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="values">The values to set. (optional)</param>
        /// <returns>List&lt;MaterialFinancialValue&gt;</returns>
        public List<MaterialFinancialValue> ApiV11MaterialsByIdFinancialvaluesPut (Guid? id, List<MaterialFinancialValue> values = null)
        {
             ApiResponse<List<MaterialFinancialValue>> localVarResponse = ApiV11MaterialsByIdFinancialvaluesPutWithHttpInfo(id, values);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replaces the financial values for a material, for manual import mode. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/materials/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="values">The values to set. (optional)</param>
        /// <returns>ApiResponse of List&lt;MaterialFinancialValue&gt;</returns>
        public ApiResponse< List<MaterialFinancialValue> > ApiV11MaterialsByIdFinancialvaluesPutWithHttpInfo (Guid? id, List<MaterialFinancialValue> values = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MaterialApi->ApiV11MaterialsByIdFinancialvaluesPut");

            var localVarPath = "/api/v1.1/materials/{id}/financialvalues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (values != null && values.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(values); // http body (model) parameter
            }
            else
            {
                localVarPostBody = values; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11MaterialsByIdFinancialvaluesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MaterialFinancialValue>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MaterialFinancialValue>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MaterialFinancialValue>)));
        }

        /// <summary>
        /// Replaces the financial values for a material, for manual import mode. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/materials/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="values">The values to set. (optional)</param>
        /// <returns>Task of List&lt;MaterialFinancialValue&gt;</returns>
        public async System.Threading.Tasks.Task<List<MaterialFinancialValue>> ApiV11MaterialsByIdFinancialvaluesPutAsync (Guid? id, List<MaterialFinancialValue> values = null)
        {
             ApiResponse<List<MaterialFinancialValue>> localVarResponse = await ApiV11MaterialsByIdFinancialvaluesPutAsyncWithHttpInfo(id, values);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replaces the financial values for a material, for manual import mode. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/materials/[id]/financialvalues  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="values">The values to set. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MaterialFinancialValue&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MaterialFinancialValue>>> ApiV11MaterialsByIdFinancialvaluesPutAsyncWithHttpInfo (Guid? id, List<MaterialFinancialValue> values = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MaterialApi->ApiV11MaterialsByIdFinancialvaluesPut");

            var localVarPath = "/api/v1.1/materials/{id}/financialvalues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (values != null && values.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(values); // http body (model) parameter
            }
            else
            {
                localVarPostBody = values; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11MaterialsByIdFinancialvaluesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MaterialFinancialValue>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MaterialFinancialValue>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MaterialFinancialValue>)));
        }

        /// <summary>
        /// Gets a material by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <returns>Material</returns>
        public Material ApiV11MaterialsByIdGet (Guid? id)
        {
             ApiResponse<Material> localVarResponse = ApiV11MaterialsByIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a material by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <returns>ApiResponse of Material</returns>
        public ApiResponse< Material > ApiV11MaterialsByIdGetWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MaterialApi->ApiV11MaterialsByIdGet");

            var localVarPath = "/api/v1.1/materials/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11MaterialsByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Material>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Material) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Material)));
        }

        /// <summary>
        /// Gets a material by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <returns>Task of Material</returns>
        public async System.Threading.Tasks.Task<Material> ApiV11MaterialsByIdGetAsync (Guid? id)
        {
             ApiResponse<Material> localVarResponse = await ApiV11MaterialsByIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a material by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <returns>Task of ApiResponse (Material)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Material>> ApiV11MaterialsByIdGetAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MaterialApi->ApiV11MaterialsByIdGet");

            var localVarPath = "/api/v1.1/materials/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11MaterialsByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Material>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Material) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Material)));
        }

        /// <summary>
        /// Gets the matches of a material. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials/[id]/matches  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <returns>List&lt;MaterialMatch&gt;</returns>
        public List<MaterialMatch> ApiV11MaterialsByIdMatchesGet (Guid? id)
        {
             ApiResponse<List<MaterialMatch>> localVarResponse = ApiV11MaterialsByIdMatchesGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the matches of a material. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials/[id]/matches  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <returns>ApiResponse of List&lt;MaterialMatch&gt;</returns>
        public ApiResponse< List<MaterialMatch> > ApiV11MaterialsByIdMatchesGetWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MaterialApi->ApiV11MaterialsByIdMatchesGet");

            var localVarPath = "/api/v1.1/materials/{id}/matches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11MaterialsByIdMatchesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MaterialMatch>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MaterialMatch>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MaterialMatch>)));
        }

        /// <summary>
        /// Gets the matches of a material. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials/[id]/matches  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <returns>Task of List&lt;MaterialMatch&gt;</returns>
        public async System.Threading.Tasks.Task<List<MaterialMatch>> ApiV11MaterialsByIdMatchesGetAsync (Guid? id)
        {
             ApiResponse<List<MaterialMatch>> localVarResponse = await ApiV11MaterialsByIdMatchesGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the matches of a material. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials/[id]/matches  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <returns>Task of ApiResponse (List&lt;MaterialMatch&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MaterialMatch>>> ApiV11MaterialsByIdMatchesGetAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MaterialApi->ApiV11MaterialsByIdMatchesGet");

            var localVarPath = "/api/v1.1/materials/{id}/matches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11MaterialsByIdMatchesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MaterialMatch>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MaterialMatch>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MaterialMatch>)));
        }

        /// <summary>
        /// Adds a match for a material. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/materials/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="match">The match to add. (optional)</param>
        /// <returns>MaterialMatch</returns>
        public MaterialMatch ApiV11MaterialsByIdMatchesPost (Guid? id, MaterialMatch match = null)
        {
             ApiResponse<MaterialMatch> localVarResponse = ApiV11MaterialsByIdMatchesPostWithHttpInfo(id, match);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a match for a material. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/materials/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="match">The match to add. (optional)</param>
        /// <returns>ApiResponse of MaterialMatch</returns>
        public ApiResponse< MaterialMatch > ApiV11MaterialsByIdMatchesPostWithHttpInfo (Guid? id, MaterialMatch match = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MaterialApi->ApiV11MaterialsByIdMatchesPost");

            var localVarPath = "/api/v1.1/materials/{id}/matches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (match != null && match.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(match); // http body (model) parameter
            }
            else
            {
                localVarPostBody = match; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11MaterialsByIdMatchesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaterialMatch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MaterialMatch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaterialMatch)));
        }

        /// <summary>
        /// Adds a match for a material. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/materials/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="match">The match to add. (optional)</param>
        /// <returns>Task of MaterialMatch</returns>
        public async System.Threading.Tasks.Task<MaterialMatch> ApiV11MaterialsByIdMatchesPostAsync (Guid? id, MaterialMatch match = null)
        {
             ApiResponse<MaterialMatch> localVarResponse = await ApiV11MaterialsByIdMatchesPostAsyncWithHttpInfo(id, match);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a match for a material. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/materials/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="match">The match to add. (optional)</param>
        /// <returns>Task of ApiResponse (MaterialMatch)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MaterialMatch>> ApiV11MaterialsByIdMatchesPostAsyncWithHttpInfo (Guid? id, MaterialMatch match = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MaterialApi->ApiV11MaterialsByIdMatchesPost");

            var localVarPath = "/api/v1.1/materials/{id}/matches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (match != null && match.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(match); // http body (model) parameter
            }
            else
            {
                localVarPostBody = match; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11MaterialsByIdMatchesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaterialMatch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MaterialMatch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaterialMatch)));
        }

        /// <summary>
        /// Replaces the matches for a material. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/materials/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="matches">The matches to set. (optional)</param>
        /// <returns>List&lt;MaterialMatch&gt;</returns>
        public List<MaterialMatch> ApiV11MaterialsByIdMatchesPut (Guid? id, List<MaterialMatch> matches = null)
        {
             ApiResponse<List<MaterialMatch>> localVarResponse = ApiV11MaterialsByIdMatchesPutWithHttpInfo(id, matches);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replaces the matches for a material. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/materials/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="matches">The matches to set. (optional)</param>
        /// <returns>ApiResponse of List&lt;MaterialMatch&gt;</returns>
        public ApiResponse< List<MaterialMatch> > ApiV11MaterialsByIdMatchesPutWithHttpInfo (Guid? id, List<MaterialMatch> matches = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MaterialApi->ApiV11MaterialsByIdMatchesPut");

            var localVarPath = "/api/v1.1/materials/{id}/matches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (matches != null && matches.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(matches); // http body (model) parameter
            }
            else
            {
                localVarPostBody = matches; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11MaterialsByIdMatchesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MaterialMatch>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MaterialMatch>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MaterialMatch>)));
        }

        /// <summary>
        /// Replaces the matches for a material. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/materials/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="matches">The matches to set. (optional)</param>
        /// <returns>Task of List&lt;MaterialMatch&gt;</returns>
        public async System.Threading.Tasks.Task<List<MaterialMatch>> ApiV11MaterialsByIdMatchesPutAsync (Guid? id, List<MaterialMatch> matches = null)
        {
             ApiResponse<List<MaterialMatch>> localVarResponse = await ApiV11MaterialsByIdMatchesPutAsyncWithHttpInfo(id, matches);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replaces the matches for a material. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/materials/[id]/matches  &#x60;&#x60;&#x60;    For now only Name matches are supported.
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the material.</param>
        /// <param name="matches">The matches to set. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MaterialMatch&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MaterialMatch>>> ApiV11MaterialsByIdMatchesPutAsyncWithHttpInfo (Guid? id, List<MaterialMatch> matches = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MaterialApi->ApiV11MaterialsByIdMatchesPut");

            var localVarPath = "/api/v1.1/materials/{id}/matches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (matches != null && matches.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(matches); // http body (model) parameter
            }
            else
            {
                localVarPostBody = matches; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11MaterialsByIdMatchesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MaterialMatch>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MaterialMatch>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MaterialMatch>)));
        }

        /// <summary>
        /// Replaces a material. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/materials/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier.</param>
        /// <param name="material">The material model. (optional)</param>
        /// <returns>Material</returns>
        public Material ApiV11MaterialsByIdPut (Guid? id, Material material = null)
        {
             ApiResponse<Material> localVarResponse = ApiV11MaterialsByIdPutWithHttpInfo(id, material);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replaces a material. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/materials/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier.</param>
        /// <param name="material">The material model. (optional)</param>
        /// <returns>ApiResponse of Material</returns>
        public ApiResponse< Material > ApiV11MaterialsByIdPutWithHttpInfo (Guid? id, Material material = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MaterialApi->ApiV11MaterialsByIdPut");

            var localVarPath = "/api/v1.1/materials/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (material != null && material.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(material); // http body (model) parameter
            }
            else
            {
                localVarPostBody = material; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11MaterialsByIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Material>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Material) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Material)));
        }

        /// <summary>
        /// Replaces a material. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/materials/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier.</param>
        /// <param name="material">The material model. (optional)</param>
        /// <returns>Task of Material</returns>
        public async System.Threading.Tasks.Task<Material> ApiV11MaterialsByIdPutAsync (Guid? id, Material material = null)
        {
             ApiResponse<Material> localVarResponse = await ApiV11MaterialsByIdPutAsyncWithHttpInfo(id, material);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replaces a material. Sample request:  &#x60;&#x60;&#x60;  PUT api/[version]/materials/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier.</param>
        /// <param name="material">The material model. (optional)</param>
        /// <returns>Task of ApiResponse (Material)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Material>> ApiV11MaterialsByIdPutAsyncWithHttpInfo (Guid? id, Material material = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MaterialApi->ApiV11MaterialsByIdPut");

            var localVarPath = "/api/v1.1/materials/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (material != null && material.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(material); // http body (model) parameter
            }
            else
            {
                localVarPostBody = material; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11MaterialsByIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Material>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Material) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Material)));
        }

        /// <summary>
        /// Gets all materials. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Material&gt;</returns>
        public List<Material> ApiV11MaterialsGet ()
        {
             ApiResponse<List<Material>> localVarResponse = ApiV11MaterialsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all materials. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Material&gt;</returns>
        public ApiResponse< List<Material> > ApiV11MaterialsGetWithHttpInfo ()
        {

            var localVarPath = "/api/v1.1/materials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11MaterialsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Material>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Material>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Material>)));
        }

        /// <summary>
        /// Gets all materials. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Material&gt;</returns>
        public async System.Threading.Tasks.Task<List<Material>> ApiV11MaterialsGetAsync ()
        {
             ApiResponse<List<Material>> localVarResponse = await ApiV11MaterialsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all materials. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/materials  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Material&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Material>>> ApiV11MaterialsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1.1/materials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11MaterialsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Material>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Material>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Material>)));
        }

        /// <summary>
        /// Adds a material. Sample request:   &#x60;&#x60;&#x60;  POST api/[version]/materials  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="material">The material model. (optional)</param>
        /// <returns>Material</returns>
        public Material ApiV11MaterialsPost (Material material = null)
        {
             ApiResponse<Material> localVarResponse = ApiV11MaterialsPostWithHttpInfo(material);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a material. Sample request:   &#x60;&#x60;&#x60;  POST api/[version]/materials  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="material">The material model. (optional)</param>
        /// <returns>ApiResponse of Material</returns>
        public ApiResponse< Material > ApiV11MaterialsPostWithHttpInfo (Material material = null)
        {

            var localVarPath = "/api/v1.1/materials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (material != null && material.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(material); // http body (model) parameter
            }
            else
            {
                localVarPostBody = material; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11MaterialsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Material>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Material) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Material)));
        }

        /// <summary>
        /// Adds a material. Sample request:   &#x60;&#x60;&#x60;  POST api/[version]/materials  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="material">The material model. (optional)</param>
        /// <returns>Task of Material</returns>
        public async System.Threading.Tasks.Task<Material> ApiV11MaterialsPostAsync (Material material = null)
        {
             ApiResponse<Material> localVarResponse = await ApiV11MaterialsPostAsyncWithHttpInfo(material);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a material. Sample request:   &#x60;&#x60;&#x60;  POST api/[version]/materials  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="material">The material model. (optional)</param>
        /// <returns>Task of ApiResponse (Material)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Material>> ApiV11MaterialsPostAsyncWithHttpInfo (Material material = null)
        {

            var localVarPath = "/api/v1.1/materials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (material != null && material.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(material); // http body (model) parameter
            }
            else
            {
                localVarPostBody = material; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11MaterialsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Material>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Material) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Material)));
        }

    }
}
