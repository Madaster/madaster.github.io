/* 
 * Madaster Private API
 *
 * The Madaster Private API endpoint.
 *
 * OpenAPI spec version: 1.1
 * Contact: service@madaster.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Madaster.API.Client;
using Madaster.API.Model;

namespace Madaster.API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPortfolioFileApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes a portfolio file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  DELETE api/[version]/portfolios/[portfolioId]/file/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The portfolio identifier.</param>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns></returns>
        void ApiV11PortfoliosByPortfolioIdFilesByIdDelete (Guid? portfolioId, Guid? id);

        /// <summary>
        /// Deletes a portfolio file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  DELETE api/[version]/portfolios/[portfolioId]/file/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The portfolio identifier.</param>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV11PortfoliosByPortfolioIdFilesByIdDeleteWithHttpInfo (Guid? portfolioId, Guid? id);
        /// <summary>
        /// Gets a download url for the portfolio file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file/[id]/download  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="id">The identifier of the portfolio file.</param>
        /// <returns>V11FileDownloadResponse</returns>
        V11FileDownloadResponse ApiV11PortfoliosByPortfolioIdFilesByIdDownloadGet (Guid? portfolioId, Guid? id);

        /// <summary>
        /// Gets a download url for the portfolio file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file/[id]/download  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="id">The identifier of the portfolio file.</param>
        /// <returns>ApiResponse of V11FileDownloadResponse</returns>
        ApiResponse<V11FileDownloadResponse> ApiV11PortfoliosByPortfolioIdFilesByIdDownloadGetWithHttpInfo (Guid? portfolioId, Guid? id);
        /// <summary>
        /// Gets a portfolio file by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="id">The identifier of the portfolio file.</param>
        /// <returns>V11PortfolioFileResponse</returns>
        V11PortfolioFileResponse ApiV11PortfoliosByPortfolioIdFilesByIdGet (Guid? portfolioId, Guid? id);

        /// <summary>
        /// Gets a portfolio file by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="id">The identifier of the portfolio file.</param>
        /// <returns>ApiResponse of V11PortfolioFileResponse</returns>
        ApiResponse<V11PortfolioFileResponse> ApiV11PortfoliosByPortfolioIdFilesByIdGetWithHttpInfo (Guid? portfolioId, Guid? id);
        /// <summary>
        /// Gets a portfolio file status by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file/[id]/status  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="id">The identifier of the portfolio file.</param>
        /// <returns>V11PortfolioFileStatusResponse</returns>
        V11PortfolioFileStatusResponse ApiV11PortfoliosByPortfolioIdFilesByIdStatusGet (Guid? portfolioId, Guid? id);

        /// <summary>
        /// Gets a portfolio file status by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file/[id]/status  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="id">The identifier of the portfolio file.</param>
        /// <returns>ApiResponse of V11PortfolioFileStatusResponse</returns>
        ApiResponse<V11PortfolioFileStatusResponse> ApiV11PortfoliosByPortfolioIdFilesByIdStatusGetWithHttpInfo (Guid? portfolioId, Guid? id);
        /// <summary>
        /// Uploads a portfolio file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[portfolioId]/file/upload  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The portfolio identifier.</param>
        /// <param name="id">The portfolio file identifier.</param>
        /// <param name="attachment">The attachment. (optional)</param>
        /// <returns></returns>
        void ApiV11PortfoliosByPortfolioIdFilesByIdUploadPost (Guid? portfolioId, Guid? id, System.IO.Stream attachment = null);

        /// <summary>
        /// Uploads a portfolio file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[portfolioId]/file/upload  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The portfolio identifier.</param>
        /// <param name="id">The portfolio file identifier.</param>
        /// <param name="attachment">The attachment. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV11PortfoliosByPortfolioIdFilesByIdUploadPostWithHttpInfo (Guid? portfolioId, Guid? id, System.IO.Stream attachment = null);
        /// <summary>
        /// Gets all portfolio files for a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <returns>List&lt;V11PortfolioFileResponse&gt;</returns>
        List<V11PortfolioFileResponse> ApiV11PortfoliosByPortfolioIdFilesGet (Guid? portfolioId);

        /// <summary>
        /// Gets all portfolio files for a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <returns>ApiResponse of List&lt;V11PortfolioFileResponse&gt;</returns>
        ApiResponse<List<V11PortfolioFileResponse>> ApiV11PortfoliosByPortfolioIdFilesGetWithHttpInfo (Guid? portfolioId);
        /// <summary>
        /// Adds a portfolio file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[portfolioId]/file  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="portfolioFile">The portfolio file model. (optional)</param>
        /// <returns>V11PortfolioFileResponse</returns>
        V11PortfolioFileResponse ApiV11PortfoliosByPortfolioIdFilesPost (Guid? portfolioId, V11PortfolioFileRequest portfolioFile = null);

        /// <summary>
        /// Adds a portfolio file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[portfolioId]/file  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="portfolioFile">The portfolio file model. (optional)</param>
        /// <returns>ApiResponse of V11PortfolioFileResponse</returns>
        ApiResponse<V11PortfolioFileResponse> ApiV11PortfoliosByPortfolioIdFilesPostWithHttpInfo (Guid? portfolioId, V11PortfolioFileRequest portfolioFile = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes a portfolio file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  DELETE api/[version]/portfolios/[portfolioId]/file/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The portfolio identifier.</param>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV11PortfoliosByPortfolioIdFilesByIdDeleteAsync (Guid? portfolioId, Guid? id);

        /// <summary>
        /// Deletes a portfolio file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  DELETE api/[version]/portfolios/[portfolioId]/file/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The portfolio identifier.</param>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV11PortfoliosByPortfolioIdFilesByIdDeleteAsyncWithHttpInfo (Guid? portfolioId, Guid? id);
        /// <summary>
        /// Gets a download url for the portfolio file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file/[id]/download  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="id">The identifier of the portfolio file.</param>
        /// <returns>Task of V11FileDownloadResponse</returns>
        System.Threading.Tasks.Task<V11FileDownloadResponse> ApiV11PortfoliosByPortfolioIdFilesByIdDownloadGetAsync (Guid? portfolioId, Guid? id);

        /// <summary>
        /// Gets a download url for the portfolio file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file/[id]/download  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="id">The identifier of the portfolio file.</param>
        /// <returns>Task of ApiResponse (V11FileDownloadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V11FileDownloadResponse>> ApiV11PortfoliosByPortfolioIdFilesByIdDownloadGetAsyncWithHttpInfo (Guid? portfolioId, Guid? id);
        /// <summary>
        /// Gets a portfolio file by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="id">The identifier of the portfolio file.</param>
        /// <returns>Task of V11PortfolioFileResponse</returns>
        System.Threading.Tasks.Task<V11PortfolioFileResponse> ApiV11PortfoliosByPortfolioIdFilesByIdGetAsync (Guid? portfolioId, Guid? id);

        /// <summary>
        /// Gets a portfolio file by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="id">The identifier of the portfolio file.</param>
        /// <returns>Task of ApiResponse (V11PortfolioFileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V11PortfolioFileResponse>> ApiV11PortfoliosByPortfolioIdFilesByIdGetAsyncWithHttpInfo (Guid? portfolioId, Guid? id);
        /// <summary>
        /// Gets a portfolio file status by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file/[id]/status  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="id">The identifier of the portfolio file.</param>
        /// <returns>Task of V11PortfolioFileStatusResponse</returns>
        System.Threading.Tasks.Task<V11PortfolioFileStatusResponse> ApiV11PortfoliosByPortfolioIdFilesByIdStatusGetAsync (Guid? portfolioId, Guid? id);

        /// <summary>
        /// Gets a portfolio file status by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file/[id]/status  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="id">The identifier of the portfolio file.</param>
        /// <returns>Task of ApiResponse (V11PortfolioFileStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V11PortfolioFileStatusResponse>> ApiV11PortfoliosByPortfolioIdFilesByIdStatusGetAsyncWithHttpInfo (Guid? portfolioId, Guid? id);
        /// <summary>
        /// Uploads a portfolio file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[portfolioId]/file/upload  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The portfolio identifier.</param>
        /// <param name="id">The portfolio file identifier.</param>
        /// <param name="attachment">The attachment. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV11PortfoliosByPortfolioIdFilesByIdUploadPostAsync (Guid? portfolioId, Guid? id, System.IO.Stream attachment = null);

        /// <summary>
        /// Uploads a portfolio file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[portfolioId]/file/upload  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The portfolio identifier.</param>
        /// <param name="id">The portfolio file identifier.</param>
        /// <param name="attachment">The attachment. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV11PortfoliosByPortfolioIdFilesByIdUploadPostAsyncWithHttpInfo (Guid? portfolioId, Guid? id, System.IO.Stream attachment = null);
        /// <summary>
        /// Gets all portfolio files for a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <returns>Task of List&lt;V11PortfolioFileResponse&gt;</returns>
        System.Threading.Tasks.Task<List<V11PortfolioFileResponse>> ApiV11PortfoliosByPortfolioIdFilesGetAsync (Guid? portfolioId);

        /// <summary>
        /// Gets all portfolio files for a portfolio.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <returns>Task of ApiResponse (List&lt;V11PortfolioFileResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V11PortfolioFileResponse>>> ApiV11PortfoliosByPortfolioIdFilesGetAsyncWithHttpInfo (Guid? portfolioId);
        /// <summary>
        /// Adds a portfolio file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[portfolioId]/file  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="portfolioFile">The portfolio file model. (optional)</param>
        /// <returns>Task of V11PortfolioFileResponse</returns>
        System.Threading.Tasks.Task<V11PortfolioFileResponse> ApiV11PortfoliosByPortfolioIdFilesPostAsync (Guid? portfolioId, V11PortfolioFileRequest portfolioFile = null);

        /// <summary>
        /// Adds a portfolio file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[portfolioId]/file  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="portfolioFile">The portfolio file model. (optional)</param>
        /// <returns>Task of ApiResponse (V11PortfolioFileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V11PortfolioFileResponse>> ApiV11PortfoliosByPortfolioIdFilesPostAsyncWithHttpInfo (Guid? portfolioId, V11PortfolioFileRequest portfolioFile = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PortfolioFileApi : IPortfolioFileApi
    {
        private Madaster.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioFileApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PortfolioFileApi(String basePath)
        {
            this.Configuration = new Madaster.API.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Madaster.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioFileApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PortfolioFileApi(Madaster.API.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Madaster.API.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Madaster.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Madaster.API.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Madaster.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes a portfolio file. Sample request:  &#x60;&#x60;&#x60;  DELETE api/[version]/portfolios/[portfolioId]/file/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The portfolio identifier.</param>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns></returns>
        public void ApiV11PortfoliosByPortfolioIdFilesByIdDelete (Guid? portfolioId, Guid? id)
        {
             ApiV11PortfoliosByPortfolioIdFilesByIdDeleteWithHttpInfo(portfolioId, id);
        }

        /// <summary>
        /// Deletes a portfolio file. Sample request:  &#x60;&#x60;&#x60;  DELETE api/[version]/portfolios/[portfolioId]/file/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The portfolio identifier.</param>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV11PortfoliosByPortfolioIdFilesByIdDeleteWithHttpInfo (Guid? portfolioId, Guid? id)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling PortfolioFileApi->ApiV11PortfoliosByPortfolioIdFilesByIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortfolioFileApi->ApiV11PortfoliosByPortfolioIdFilesByIdDelete");

            var localVarPath = "/api/v1.1/portfolios/{portfolioId}/files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolioId", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosByPortfolioIdFilesByIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a portfolio file. Sample request:  &#x60;&#x60;&#x60;  DELETE api/[version]/portfolios/[portfolioId]/file/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The portfolio identifier.</param>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV11PortfoliosByPortfolioIdFilesByIdDeleteAsync (Guid? portfolioId, Guid? id)
        {
             await ApiV11PortfoliosByPortfolioIdFilesByIdDeleteAsyncWithHttpInfo(portfolioId, id);

        }

        /// <summary>
        /// Deletes a portfolio file. Sample request:  &#x60;&#x60;&#x60;  DELETE api/[version]/portfolios/[portfolioId]/file/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The portfolio identifier.</param>
        /// <param name="id">The identifier of the portfolio.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV11PortfoliosByPortfolioIdFilesByIdDeleteAsyncWithHttpInfo (Guid? portfolioId, Guid? id)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling PortfolioFileApi->ApiV11PortfoliosByPortfolioIdFilesByIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortfolioFileApi->ApiV11PortfoliosByPortfolioIdFilesByIdDelete");

            var localVarPath = "/api/v1.1/portfolios/{portfolioId}/files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolioId", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosByPortfolioIdFilesByIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets a download url for the portfolio file. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file/[id]/download  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="id">The identifier of the portfolio file.</param>
        /// <returns>V11FileDownloadResponse</returns>
        public V11FileDownloadResponse ApiV11PortfoliosByPortfolioIdFilesByIdDownloadGet (Guid? portfolioId, Guid? id)
        {
             ApiResponse<V11FileDownloadResponse> localVarResponse = ApiV11PortfoliosByPortfolioIdFilesByIdDownloadGetWithHttpInfo(portfolioId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a download url for the portfolio file. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file/[id]/download  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="id">The identifier of the portfolio file.</param>
        /// <returns>ApiResponse of V11FileDownloadResponse</returns>
        public ApiResponse< V11FileDownloadResponse > ApiV11PortfoliosByPortfolioIdFilesByIdDownloadGetWithHttpInfo (Guid? portfolioId, Guid? id)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling PortfolioFileApi->ApiV11PortfoliosByPortfolioIdFilesByIdDownloadGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortfolioFileApi->ApiV11PortfoliosByPortfolioIdFilesByIdDownloadGet");

            var localVarPath = "/api/v1.1/portfolios/{portfolioId}/files/{id}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolioId", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosByPortfolioIdFilesByIdDownloadGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V11FileDownloadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V11FileDownloadResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(V11FileDownloadResponse)));
        }

        /// <summary>
        /// Gets a download url for the portfolio file. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file/[id]/download  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="id">The identifier of the portfolio file.</param>
        /// <returns>Task of V11FileDownloadResponse</returns>
        public async System.Threading.Tasks.Task<V11FileDownloadResponse> ApiV11PortfoliosByPortfolioIdFilesByIdDownloadGetAsync (Guid? portfolioId, Guid? id)
        {
             ApiResponse<V11FileDownloadResponse> localVarResponse = await ApiV11PortfoliosByPortfolioIdFilesByIdDownloadGetAsyncWithHttpInfo(portfolioId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a download url for the portfolio file. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file/[id]/download  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="id">The identifier of the portfolio file.</param>
        /// <returns>Task of ApiResponse (V11FileDownloadResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V11FileDownloadResponse>> ApiV11PortfoliosByPortfolioIdFilesByIdDownloadGetAsyncWithHttpInfo (Guid? portfolioId, Guid? id)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling PortfolioFileApi->ApiV11PortfoliosByPortfolioIdFilesByIdDownloadGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortfolioFileApi->ApiV11PortfoliosByPortfolioIdFilesByIdDownloadGet");

            var localVarPath = "/api/v1.1/portfolios/{portfolioId}/files/{id}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolioId", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosByPortfolioIdFilesByIdDownloadGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V11FileDownloadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V11FileDownloadResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(V11FileDownloadResponse)));
        }

        /// <summary>
        /// Gets a portfolio file by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="id">The identifier of the portfolio file.</param>
        /// <returns>V11PortfolioFileResponse</returns>
        public V11PortfolioFileResponse ApiV11PortfoliosByPortfolioIdFilesByIdGet (Guid? portfolioId, Guid? id)
        {
             ApiResponse<V11PortfolioFileResponse> localVarResponse = ApiV11PortfoliosByPortfolioIdFilesByIdGetWithHttpInfo(portfolioId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a portfolio file by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="id">The identifier of the portfolio file.</param>
        /// <returns>ApiResponse of V11PortfolioFileResponse</returns>
        public ApiResponse< V11PortfolioFileResponse > ApiV11PortfoliosByPortfolioIdFilesByIdGetWithHttpInfo (Guid? portfolioId, Guid? id)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling PortfolioFileApi->ApiV11PortfoliosByPortfolioIdFilesByIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortfolioFileApi->ApiV11PortfoliosByPortfolioIdFilesByIdGet");

            var localVarPath = "/api/v1.1/portfolios/{portfolioId}/files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolioId", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosByPortfolioIdFilesByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V11PortfolioFileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V11PortfolioFileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(V11PortfolioFileResponse)));
        }

        /// <summary>
        /// Gets a portfolio file by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="id">The identifier of the portfolio file.</param>
        /// <returns>Task of V11PortfolioFileResponse</returns>
        public async System.Threading.Tasks.Task<V11PortfolioFileResponse> ApiV11PortfoliosByPortfolioIdFilesByIdGetAsync (Guid? portfolioId, Guid? id)
        {
             ApiResponse<V11PortfolioFileResponse> localVarResponse = await ApiV11PortfoliosByPortfolioIdFilesByIdGetAsyncWithHttpInfo(portfolioId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a portfolio file by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="id">The identifier of the portfolio file.</param>
        /// <returns>Task of ApiResponse (V11PortfolioFileResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V11PortfolioFileResponse>> ApiV11PortfoliosByPortfolioIdFilesByIdGetAsyncWithHttpInfo (Guid? portfolioId, Guid? id)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling PortfolioFileApi->ApiV11PortfoliosByPortfolioIdFilesByIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortfolioFileApi->ApiV11PortfoliosByPortfolioIdFilesByIdGet");

            var localVarPath = "/api/v1.1/portfolios/{portfolioId}/files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolioId", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosByPortfolioIdFilesByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V11PortfolioFileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V11PortfolioFileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(V11PortfolioFileResponse)));
        }

        /// <summary>
        /// Gets a portfolio file status by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file/[id]/status  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="id">The identifier of the portfolio file.</param>
        /// <returns>V11PortfolioFileStatusResponse</returns>
        public V11PortfolioFileStatusResponse ApiV11PortfoliosByPortfolioIdFilesByIdStatusGet (Guid? portfolioId, Guid? id)
        {
             ApiResponse<V11PortfolioFileStatusResponse> localVarResponse = ApiV11PortfoliosByPortfolioIdFilesByIdStatusGetWithHttpInfo(portfolioId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a portfolio file status by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file/[id]/status  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="id">The identifier of the portfolio file.</param>
        /// <returns>ApiResponse of V11PortfolioFileStatusResponse</returns>
        public ApiResponse< V11PortfolioFileStatusResponse > ApiV11PortfoliosByPortfolioIdFilesByIdStatusGetWithHttpInfo (Guid? portfolioId, Guid? id)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling PortfolioFileApi->ApiV11PortfoliosByPortfolioIdFilesByIdStatusGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortfolioFileApi->ApiV11PortfoliosByPortfolioIdFilesByIdStatusGet");

            var localVarPath = "/api/v1.1/portfolios/{portfolioId}/files/{id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolioId", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosByPortfolioIdFilesByIdStatusGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V11PortfolioFileStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V11PortfolioFileStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(V11PortfolioFileStatusResponse)));
        }

        /// <summary>
        /// Gets a portfolio file status by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file/[id]/status  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="id">The identifier of the portfolio file.</param>
        /// <returns>Task of V11PortfolioFileStatusResponse</returns>
        public async System.Threading.Tasks.Task<V11PortfolioFileStatusResponse> ApiV11PortfoliosByPortfolioIdFilesByIdStatusGetAsync (Guid? portfolioId, Guid? id)
        {
             ApiResponse<V11PortfolioFileStatusResponse> localVarResponse = await ApiV11PortfoliosByPortfolioIdFilesByIdStatusGetAsyncWithHttpInfo(portfolioId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a portfolio file status by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file/[id]/status  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="id">The identifier of the portfolio file.</param>
        /// <returns>Task of ApiResponse (V11PortfolioFileStatusResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V11PortfolioFileStatusResponse>> ApiV11PortfoliosByPortfolioIdFilesByIdStatusGetAsyncWithHttpInfo (Guid? portfolioId, Guid? id)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling PortfolioFileApi->ApiV11PortfoliosByPortfolioIdFilesByIdStatusGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortfolioFileApi->ApiV11PortfoliosByPortfolioIdFilesByIdStatusGet");

            var localVarPath = "/api/v1.1/portfolios/{portfolioId}/files/{id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolioId", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosByPortfolioIdFilesByIdStatusGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V11PortfolioFileStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V11PortfolioFileStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(V11PortfolioFileStatusResponse)));
        }

        /// <summary>
        /// Uploads a portfolio file. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[portfolioId]/file/upload  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The portfolio identifier.</param>
        /// <param name="id">The portfolio file identifier.</param>
        /// <param name="attachment">The attachment. (optional)</param>
        /// <returns></returns>
        public void ApiV11PortfoliosByPortfolioIdFilesByIdUploadPost (Guid? portfolioId, Guid? id, System.IO.Stream attachment = null)
        {
             ApiV11PortfoliosByPortfolioIdFilesByIdUploadPostWithHttpInfo(portfolioId, id, attachment);
        }

        /// <summary>
        /// Uploads a portfolio file. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[portfolioId]/file/upload  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The portfolio identifier.</param>
        /// <param name="id">The portfolio file identifier.</param>
        /// <param name="attachment">The attachment. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV11PortfoliosByPortfolioIdFilesByIdUploadPostWithHttpInfo (Guid? portfolioId, Guid? id, System.IO.Stream attachment = null)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling PortfolioFileApi->ApiV11PortfoliosByPortfolioIdFilesByIdUploadPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortfolioFileApi->ApiV11PortfoliosByPortfolioIdFilesByIdUploadPost");

            var localVarPath = "/api/v1.1/portfolios/{portfolioId}/files/{id}/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolioId", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (attachment != null) localVarFileParams.Add("attachment", this.Configuration.ApiClient.ParameterToFile("attachment", attachment));

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosByPortfolioIdFilesByIdUploadPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Uploads a portfolio file. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[portfolioId]/file/upload  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The portfolio identifier.</param>
        /// <param name="id">The portfolio file identifier.</param>
        /// <param name="attachment">The attachment. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV11PortfoliosByPortfolioIdFilesByIdUploadPostAsync (Guid? portfolioId, Guid? id, System.IO.Stream attachment = null)
        {
             await ApiV11PortfoliosByPortfolioIdFilesByIdUploadPostAsyncWithHttpInfo(portfolioId, id, attachment);

        }

        /// <summary>
        /// Uploads a portfolio file. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[portfolioId]/file/upload  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The portfolio identifier.</param>
        /// <param name="id">The portfolio file identifier.</param>
        /// <param name="attachment">The attachment. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV11PortfoliosByPortfolioIdFilesByIdUploadPostAsyncWithHttpInfo (Guid? portfolioId, Guid? id, System.IO.Stream attachment = null)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling PortfolioFileApi->ApiV11PortfoliosByPortfolioIdFilesByIdUploadPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortfolioFileApi->ApiV11PortfoliosByPortfolioIdFilesByIdUploadPost");

            var localVarPath = "/api/v1.1/portfolios/{portfolioId}/files/{id}/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolioId", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (attachment != null) localVarFileParams.Add("attachment", this.Configuration.ApiClient.ParameterToFile("attachment", attachment));

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosByPortfolioIdFilesByIdUploadPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets all portfolio files for a portfolio. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <returns>List&lt;V11PortfolioFileResponse&gt;</returns>
        public List<V11PortfolioFileResponse> ApiV11PortfoliosByPortfolioIdFilesGet (Guid? portfolioId)
        {
             ApiResponse<List<V11PortfolioFileResponse>> localVarResponse = ApiV11PortfoliosByPortfolioIdFilesGetWithHttpInfo(portfolioId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all portfolio files for a portfolio. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <returns>ApiResponse of List&lt;V11PortfolioFileResponse&gt;</returns>
        public ApiResponse< List<V11PortfolioFileResponse> > ApiV11PortfoliosByPortfolioIdFilesGetWithHttpInfo (Guid? portfolioId)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling PortfolioFileApi->ApiV11PortfoliosByPortfolioIdFilesGet");

            var localVarPath = "/api/v1.1/portfolios/{portfolioId}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolioId", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosByPortfolioIdFilesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V11PortfolioFileResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V11PortfolioFileResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V11PortfolioFileResponse>)));
        }

        /// <summary>
        /// Gets all portfolio files for a portfolio. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <returns>Task of List&lt;V11PortfolioFileResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<V11PortfolioFileResponse>> ApiV11PortfoliosByPortfolioIdFilesGetAsync (Guid? portfolioId)
        {
             ApiResponse<List<V11PortfolioFileResponse>> localVarResponse = await ApiV11PortfoliosByPortfolioIdFilesGetAsyncWithHttpInfo(portfolioId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all portfolio files for a portfolio. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/portfolios/[portfolioId]/file  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <returns>Task of ApiResponse (List&lt;V11PortfolioFileResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V11PortfolioFileResponse>>> ApiV11PortfoliosByPortfolioIdFilesGetAsyncWithHttpInfo (Guid? portfolioId)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling PortfolioFileApi->ApiV11PortfoliosByPortfolioIdFilesGet");

            var localVarPath = "/api/v1.1/portfolios/{portfolioId}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolioId", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosByPortfolioIdFilesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V11PortfolioFileResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V11PortfolioFileResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V11PortfolioFileResponse>)));
        }

        /// <summary>
        /// Adds a portfolio file. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[portfolioId]/file  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="portfolioFile">The portfolio file model. (optional)</param>
        /// <returns>V11PortfolioFileResponse</returns>
        public V11PortfolioFileResponse ApiV11PortfoliosByPortfolioIdFilesPost (Guid? portfolioId, V11PortfolioFileRequest portfolioFile = null)
        {
             ApiResponse<V11PortfolioFileResponse> localVarResponse = ApiV11PortfoliosByPortfolioIdFilesPostWithHttpInfo(portfolioId, portfolioFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a portfolio file. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[portfolioId]/file  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="portfolioFile">The portfolio file model. (optional)</param>
        /// <returns>ApiResponse of V11PortfolioFileResponse</returns>
        public ApiResponse< V11PortfolioFileResponse > ApiV11PortfoliosByPortfolioIdFilesPostWithHttpInfo (Guid? portfolioId, V11PortfolioFileRequest portfolioFile = null)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling PortfolioFileApi->ApiV11PortfoliosByPortfolioIdFilesPost");

            var localVarPath = "/api/v1.1/portfolios/{portfolioId}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolioId", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter
            if (portfolioFile != null && portfolioFile.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolioFile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolioFile; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosByPortfolioIdFilesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V11PortfolioFileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V11PortfolioFileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(V11PortfolioFileResponse)));
        }

        /// <summary>
        /// Adds a portfolio file. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[portfolioId]/file  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="portfolioFile">The portfolio file model. (optional)</param>
        /// <returns>Task of V11PortfolioFileResponse</returns>
        public async System.Threading.Tasks.Task<V11PortfolioFileResponse> ApiV11PortfoliosByPortfolioIdFilesPostAsync (Guid? portfolioId, V11PortfolioFileRequest portfolioFile = null)
        {
             ApiResponse<V11PortfolioFileResponse> localVarResponse = await ApiV11PortfoliosByPortfolioIdFilesPostAsyncWithHttpInfo(portfolioId, portfolioFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a portfolio file. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/portfolios/[portfolioId]/file  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">The identifier of the portfolio.</param>
        /// <param name="portfolioFile">The portfolio file model. (optional)</param>
        /// <returns>Task of ApiResponse (V11PortfolioFileResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V11PortfolioFileResponse>> ApiV11PortfoliosByPortfolioIdFilesPostAsyncWithHttpInfo (Guid? portfolioId, V11PortfolioFileRequest portfolioFile = null)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling PortfolioFileApi->ApiV11PortfoliosByPortfolioIdFilesPost");

            var localVarPath = "/api/v1.1/portfolios/{portfolioId}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolioId", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter
            if (portfolioFile != null && portfolioFile.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolioFile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolioFile; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11PortfoliosByPortfolioIdFilesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V11PortfolioFileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V11PortfolioFileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(V11PortfolioFileResponse)));
        }

    }
}
