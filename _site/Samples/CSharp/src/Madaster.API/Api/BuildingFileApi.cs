/* 
 * Madaster Private API
 *
 * The Madaster Private API endpoint.
 *
 * OpenAPI spec version: 1.1
 * Contact: service@madaster.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Madaster.API.Client;
using Madaster.API.Model;

namespace Madaster.API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBuildingFileApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Activates or deactivates a building file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/active  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <param name="isActive">The new active-status. (optional)</param>
        /// <returns>BuildingFileResponse</returns>
        BuildingFileResponse ApiV11BuildingsByBuildingIdFilesByIdActivePost (Guid? buildingId, Guid? id, bool? isActive = null);

        /// <summary>
        /// Activates or deactivates a building file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/active  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <param name="isActive">The new active-status. (optional)</param>
        /// <returns>ApiResponse of BuildingFileResponse</returns>
        ApiResponse<BuildingFileResponse> ApiV11BuildingsByBuildingIdFilesByIdActivePostWithHttpInfo (Guid? buildingId, Guid? id, bool? isActive = null);
        /// <summary>
        /// Deletes a building file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  DELETE api/[version]/buildings/[buildingId]/file/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The building identifier.</param>
        /// <param name="id">The identifier of the building.</param>
        /// <returns></returns>
        void ApiV11BuildingsByBuildingIdFilesByIdDelete (Guid? buildingId, Guid? id);

        /// <summary>
        /// Deletes a building file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  DELETE api/[version]/buildings/[buildingId]/file/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The building identifier.</param>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV11BuildingsByBuildingIdFilesByIdDeleteWithHttpInfo (Guid? buildingId, Guid? id);
        /// <summary>
        /// Gets a download url for the building file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/file/[id]/download  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>V11FileDownloadResponse</returns>
        V11FileDownloadResponse ApiV11BuildingsByBuildingIdFilesByIdDownloadGet (Guid? buildingId, Guid? id);

        /// <summary>
        /// Gets a download url for the building file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/file/[id]/download  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>ApiResponse of V11FileDownloadResponse</returns>
        ApiResponse<V11FileDownloadResponse> ApiV11BuildingsByBuildingIdFilesByIdDownloadGetWithHttpInfo (Guid? buildingId, Guid? id);
        /// <summary>
        /// Gets a building file by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/files/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>BuildingFileResponse</returns>
        BuildingFileResponse ApiV11BuildingsByBuildingIdFilesByIdGet (Guid? buildingId, Guid? id);

        /// <summary>
        /// Gets a building file by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/files/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>ApiResponse of BuildingFileResponse</returns>
        ApiResponse<BuildingFileResponse> ApiV11BuildingsByBuildingIdFilesByIdGetWithHttpInfo (Guid? buildingId, Guid? id);
        /// <summary>
        /// Sets the status of a file to &#39;importing&#39;, so element can be added or updated can be made.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/setimporting  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns></returns>
        void ApiV11BuildingsByBuildingIdFilesByIdSetimportingPost (Guid? buildingId, Guid? id);

        /// <summary>
        /// Sets the status of a file to &#39;importing&#39;, so element can be added or updated can be made.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/setimporting  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV11BuildingsByBuildingIdFilesByIdSetimportingPostWithHttpInfo (Guid? buildingId, Guid? id);
        /// <summary>
        /// Starts the refinement of a building file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/startrefinement  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns></returns>
        void ApiV11BuildingsByBuildingIdFilesByIdStartrefinementPost (Guid? buildingId, Guid? id);

        /// <summary>
        /// Starts the refinement of a building file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/startrefinement  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV11BuildingsByBuildingIdFilesByIdStartrefinementPostWithHttpInfo (Guid? buildingId, Guid? id);
        /// <summary>
        /// Gets a building file status by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/files/[id]/status  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>BuildingFileStatusResponse</returns>
        BuildingFileStatusResponse ApiV11BuildingsByBuildingIdFilesByIdStatusGet (Guid? buildingId, Guid? id);

        /// <summary>
        /// Gets a building file status by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/files/[id]/status  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>ApiResponse of BuildingFileStatusResponse</returns>
        ApiResponse<BuildingFileStatusResponse> ApiV11BuildingsByBuildingIdFilesByIdStatusGetWithHttpInfo (Guid? buildingId, Guid? id);
        /// <summary>
        /// Uploads a building file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/upload  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The building identifier.</param>
        /// <param name="id">The building file identifier.</param>
        /// <param name="attachment">The attachment. (optional)</param>
        /// <returns></returns>
        void ApiV11BuildingsByBuildingIdFilesByIdUploadPost (Guid? buildingId, Guid? id, System.IO.Stream attachment = null);

        /// <summary>
        /// Uploads a building file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/upload  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The building identifier.</param>
        /// <param name="id">The building file identifier.</param>
        /// <param name="attachment">The attachment. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV11BuildingsByBuildingIdFilesByIdUploadPostWithHttpInfo (Guid? buildingId, Guid? id, System.IO.Stream attachment = null);
        /// <summary>
        /// Gets all building files.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/files  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId"></param>
        /// <returns>List&lt;BuildingFileResponse&gt;</returns>
        List<BuildingFileResponse> ApiV11BuildingsByBuildingIdFilesGet (Guid? buildingId);

        /// <summary>
        /// Gets all building files.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/files  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId"></param>
        /// <returns>ApiResponse of List&lt;BuildingFileResponse&gt;</returns>
        ApiResponse<List<BuildingFileResponse>> ApiV11BuildingsByBuildingIdFilesGetWithHttpInfo (Guid? buildingId);
        /// <summary>
        /// Adds a building file.
        /// </summary>
        /// <remarks>
        /// Sample request:   &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The building identifier.</param>
        /// <param name="buildingFile">The building file model. (optional)</param>
        /// <returns>BuildingFileResponse</returns>
        BuildingFileResponse ApiV11BuildingsByBuildingIdFilesPost (Guid? buildingId, V11BuildingFileRequest buildingFile = null);

        /// <summary>
        /// Adds a building file.
        /// </summary>
        /// <remarks>
        /// Sample request:   &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The building identifier.</param>
        /// <param name="buildingFile">The building file model. (optional)</param>
        /// <returns>ApiResponse of BuildingFileResponse</returns>
        ApiResponse<BuildingFileResponse> ApiV11BuildingsByBuildingIdFilesPostWithHttpInfo (Guid? buildingId, V11BuildingFileRequest buildingFile = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Activates or deactivates a building file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/active  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <param name="isActive">The new active-status. (optional)</param>
        /// <returns>Task of BuildingFileResponse</returns>
        System.Threading.Tasks.Task<BuildingFileResponse> ApiV11BuildingsByBuildingIdFilesByIdActivePostAsync (Guid? buildingId, Guid? id, bool? isActive = null);

        /// <summary>
        /// Activates or deactivates a building file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/active  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <param name="isActive">The new active-status. (optional)</param>
        /// <returns>Task of ApiResponse (BuildingFileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildingFileResponse>> ApiV11BuildingsByBuildingIdFilesByIdActivePostAsyncWithHttpInfo (Guid? buildingId, Guid? id, bool? isActive = null);
        /// <summary>
        /// Deletes a building file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  DELETE api/[version]/buildings/[buildingId]/file/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The building identifier.</param>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV11BuildingsByBuildingIdFilesByIdDeleteAsync (Guid? buildingId, Guid? id);

        /// <summary>
        /// Deletes a building file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  DELETE api/[version]/buildings/[buildingId]/file/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The building identifier.</param>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV11BuildingsByBuildingIdFilesByIdDeleteAsyncWithHttpInfo (Guid? buildingId, Guid? id);
        /// <summary>
        /// Gets a download url for the building file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/file/[id]/download  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>Task of V11FileDownloadResponse</returns>
        System.Threading.Tasks.Task<V11FileDownloadResponse> ApiV11BuildingsByBuildingIdFilesByIdDownloadGetAsync (Guid? buildingId, Guid? id);

        /// <summary>
        /// Gets a download url for the building file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/file/[id]/download  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>Task of ApiResponse (V11FileDownloadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V11FileDownloadResponse>> ApiV11BuildingsByBuildingIdFilesByIdDownloadGetAsyncWithHttpInfo (Guid? buildingId, Guid? id);
        /// <summary>
        /// Gets a building file by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/files/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>Task of BuildingFileResponse</returns>
        System.Threading.Tasks.Task<BuildingFileResponse> ApiV11BuildingsByBuildingIdFilesByIdGetAsync (Guid? buildingId, Guid? id);

        /// <summary>
        /// Gets a building file by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/files/[id]  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>Task of ApiResponse (BuildingFileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildingFileResponse>> ApiV11BuildingsByBuildingIdFilesByIdGetAsyncWithHttpInfo (Guid? buildingId, Guid? id);
        /// <summary>
        /// Sets the status of a file to &#39;importing&#39;, so element can be added or updated can be made.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/setimporting  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV11BuildingsByBuildingIdFilesByIdSetimportingPostAsync (Guid? buildingId, Guid? id);

        /// <summary>
        /// Sets the status of a file to &#39;importing&#39;, so element can be added or updated can be made.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/setimporting  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV11BuildingsByBuildingIdFilesByIdSetimportingPostAsyncWithHttpInfo (Guid? buildingId, Guid? id);
        /// <summary>
        /// Starts the refinement of a building file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/startrefinement  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV11BuildingsByBuildingIdFilesByIdStartrefinementPostAsync (Guid? buildingId, Guid? id);

        /// <summary>
        /// Starts the refinement of a building file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/startrefinement  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV11BuildingsByBuildingIdFilesByIdStartrefinementPostAsyncWithHttpInfo (Guid? buildingId, Guid? id);
        /// <summary>
        /// Gets a building file status by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/files/[id]/status  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>Task of BuildingFileStatusResponse</returns>
        System.Threading.Tasks.Task<BuildingFileStatusResponse> ApiV11BuildingsByBuildingIdFilesByIdStatusGetAsync (Guid? buildingId, Guid? id);

        /// <summary>
        /// Gets a building file status by its identifier.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/files/[id]/status  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>Task of ApiResponse (BuildingFileStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildingFileStatusResponse>> ApiV11BuildingsByBuildingIdFilesByIdStatusGetAsyncWithHttpInfo (Guid? buildingId, Guid? id);
        /// <summary>
        /// Uploads a building file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/upload  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The building identifier.</param>
        /// <param name="id">The building file identifier.</param>
        /// <param name="attachment">The attachment. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV11BuildingsByBuildingIdFilesByIdUploadPostAsync (Guid? buildingId, Guid? id, System.IO.Stream attachment = null);

        /// <summary>
        /// Uploads a building file.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/upload  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The building identifier.</param>
        /// <param name="id">The building file identifier.</param>
        /// <param name="attachment">The attachment. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV11BuildingsByBuildingIdFilesByIdUploadPostAsyncWithHttpInfo (Guid? buildingId, Guid? id, System.IO.Stream attachment = null);
        /// <summary>
        /// Gets all building files.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/files  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId"></param>
        /// <returns>Task of List&lt;BuildingFileResponse&gt;</returns>
        System.Threading.Tasks.Task<List<BuildingFileResponse>> ApiV11BuildingsByBuildingIdFilesGetAsync (Guid? buildingId);

        /// <summary>
        /// Gets all building files.
        /// </summary>
        /// <remarks>
        /// Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/files  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId"></param>
        /// <returns>Task of ApiResponse (List&lt;BuildingFileResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BuildingFileResponse>>> ApiV11BuildingsByBuildingIdFilesGetAsyncWithHttpInfo (Guid? buildingId);
        /// <summary>
        /// Adds a building file.
        /// </summary>
        /// <remarks>
        /// Sample request:   &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The building identifier.</param>
        /// <param name="buildingFile">The building file model. (optional)</param>
        /// <returns>Task of BuildingFileResponse</returns>
        System.Threading.Tasks.Task<BuildingFileResponse> ApiV11BuildingsByBuildingIdFilesPostAsync (Guid? buildingId, V11BuildingFileRequest buildingFile = null);

        /// <summary>
        /// Adds a building file.
        /// </summary>
        /// <remarks>
        /// Sample request:   &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files  &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The building identifier.</param>
        /// <param name="buildingFile">The building file model. (optional)</param>
        /// <returns>Task of ApiResponse (BuildingFileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildingFileResponse>> ApiV11BuildingsByBuildingIdFilesPostAsyncWithHttpInfo (Guid? buildingId, V11BuildingFileRequest buildingFile = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BuildingFileApi : IBuildingFileApi
    {
        private Madaster.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BuildingFileApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BuildingFileApi(String basePath)
        {
            this.Configuration = new Madaster.API.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Madaster.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BuildingFileApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BuildingFileApi(Madaster.API.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Madaster.API.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Madaster.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Madaster.API.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Madaster.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Activates or deactivates a building file. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/active  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <param name="isActive">The new active-status. (optional)</param>
        /// <returns>BuildingFileResponse</returns>
        public BuildingFileResponse ApiV11BuildingsByBuildingIdFilesByIdActivePost (Guid? buildingId, Guid? id, bool? isActive = null)
        {
             ApiResponse<BuildingFileResponse> localVarResponse = ApiV11BuildingsByBuildingIdFilesByIdActivePostWithHttpInfo(buildingId, id, isActive);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Activates or deactivates a building file. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/active  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <param name="isActive">The new active-status. (optional)</param>
        /// <returns>ApiResponse of BuildingFileResponse</returns>
        public ApiResponse< BuildingFileResponse > ApiV11BuildingsByBuildingIdFilesByIdActivePostWithHttpInfo (Guid? buildingId, Guid? id, bool? isActive = null)
        {
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdActivePost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdActivePost");

            var localVarPath = "/api/v1.1/buildings/{buildingId}/files/{id}/active";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (isActive != null && isActive.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(isActive); // http body (model) parameter
            }
            else
            {
                localVarPostBody = isActive; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByBuildingIdFilesByIdActivePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildingFileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildingFileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildingFileResponse)));
        }

        /// <summary>
        /// Activates or deactivates a building file. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/active  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <param name="isActive">The new active-status. (optional)</param>
        /// <returns>Task of BuildingFileResponse</returns>
        public async System.Threading.Tasks.Task<BuildingFileResponse> ApiV11BuildingsByBuildingIdFilesByIdActivePostAsync (Guid? buildingId, Guid? id, bool? isActive = null)
        {
             ApiResponse<BuildingFileResponse> localVarResponse = await ApiV11BuildingsByBuildingIdFilesByIdActivePostAsyncWithHttpInfo(buildingId, id, isActive);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Activates or deactivates a building file. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/active  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <param name="isActive">The new active-status. (optional)</param>
        /// <returns>Task of ApiResponse (BuildingFileResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildingFileResponse>> ApiV11BuildingsByBuildingIdFilesByIdActivePostAsyncWithHttpInfo (Guid? buildingId, Guid? id, bool? isActive = null)
        {
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdActivePost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdActivePost");

            var localVarPath = "/api/v1.1/buildings/{buildingId}/files/{id}/active";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (isActive != null && isActive.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(isActive); // http body (model) parameter
            }
            else
            {
                localVarPostBody = isActive; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByBuildingIdFilesByIdActivePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildingFileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildingFileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildingFileResponse)));
        }

        /// <summary>
        /// Deletes a building file. Sample request:  &#x60;&#x60;&#x60;  DELETE api/[version]/buildings/[buildingId]/file/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The building identifier.</param>
        /// <param name="id">The identifier of the building.</param>
        /// <returns></returns>
        public void ApiV11BuildingsByBuildingIdFilesByIdDelete (Guid? buildingId, Guid? id)
        {
             ApiV11BuildingsByBuildingIdFilesByIdDeleteWithHttpInfo(buildingId, id);
        }

        /// <summary>
        /// Deletes a building file. Sample request:  &#x60;&#x60;&#x60;  DELETE api/[version]/buildings/[buildingId]/file/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The building identifier.</param>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV11BuildingsByBuildingIdFilesByIdDeleteWithHttpInfo (Guid? buildingId, Guid? id)
        {
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdDelete");

            var localVarPath = "/api/v1.1/buildings/{buildingId}/files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByBuildingIdFilesByIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a building file. Sample request:  &#x60;&#x60;&#x60;  DELETE api/[version]/buildings/[buildingId]/file/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The building identifier.</param>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV11BuildingsByBuildingIdFilesByIdDeleteAsync (Guid? buildingId, Guid? id)
        {
             await ApiV11BuildingsByBuildingIdFilesByIdDeleteAsyncWithHttpInfo(buildingId, id);

        }

        /// <summary>
        /// Deletes a building file. Sample request:  &#x60;&#x60;&#x60;  DELETE api/[version]/buildings/[buildingId]/file/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The building identifier.</param>
        /// <param name="id">The identifier of the building.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV11BuildingsByBuildingIdFilesByIdDeleteAsyncWithHttpInfo (Guid? buildingId, Guid? id)
        {
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdDelete");

            var localVarPath = "/api/v1.1/buildings/{buildingId}/files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByBuildingIdFilesByIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets a download url for the building file. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/file/[id]/download  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>V11FileDownloadResponse</returns>
        public V11FileDownloadResponse ApiV11BuildingsByBuildingIdFilesByIdDownloadGet (Guid? buildingId, Guid? id)
        {
             ApiResponse<V11FileDownloadResponse> localVarResponse = ApiV11BuildingsByBuildingIdFilesByIdDownloadGetWithHttpInfo(buildingId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a download url for the building file. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/file/[id]/download  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>ApiResponse of V11FileDownloadResponse</returns>
        public ApiResponse< V11FileDownloadResponse > ApiV11BuildingsByBuildingIdFilesByIdDownloadGetWithHttpInfo (Guid? buildingId, Guid? id)
        {
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdDownloadGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdDownloadGet");

            var localVarPath = "/api/v1.1/buildings/{buildingId}/files/{id}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByBuildingIdFilesByIdDownloadGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V11FileDownloadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V11FileDownloadResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(V11FileDownloadResponse)));
        }

        /// <summary>
        /// Gets a download url for the building file. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/file/[id]/download  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>Task of V11FileDownloadResponse</returns>
        public async System.Threading.Tasks.Task<V11FileDownloadResponse> ApiV11BuildingsByBuildingIdFilesByIdDownloadGetAsync (Guid? buildingId, Guid? id)
        {
             ApiResponse<V11FileDownloadResponse> localVarResponse = await ApiV11BuildingsByBuildingIdFilesByIdDownloadGetAsyncWithHttpInfo(buildingId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a download url for the building file. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/file/[id]/download  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>Task of ApiResponse (V11FileDownloadResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V11FileDownloadResponse>> ApiV11BuildingsByBuildingIdFilesByIdDownloadGetAsyncWithHttpInfo (Guid? buildingId, Guid? id)
        {
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdDownloadGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdDownloadGet");

            var localVarPath = "/api/v1.1/buildings/{buildingId}/files/{id}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByBuildingIdFilesByIdDownloadGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V11FileDownloadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V11FileDownloadResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(V11FileDownloadResponse)));
        }

        /// <summary>
        /// Gets a building file by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/files/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>BuildingFileResponse</returns>
        public BuildingFileResponse ApiV11BuildingsByBuildingIdFilesByIdGet (Guid? buildingId, Guid? id)
        {
             ApiResponse<BuildingFileResponse> localVarResponse = ApiV11BuildingsByBuildingIdFilesByIdGetWithHttpInfo(buildingId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a building file by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/files/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>ApiResponse of BuildingFileResponse</returns>
        public ApiResponse< BuildingFileResponse > ApiV11BuildingsByBuildingIdFilesByIdGetWithHttpInfo (Guid? buildingId, Guid? id)
        {
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdGet");

            var localVarPath = "/api/v1.1/buildings/{buildingId}/files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByBuildingIdFilesByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildingFileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildingFileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildingFileResponse)));
        }

        /// <summary>
        /// Gets a building file by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/files/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>Task of BuildingFileResponse</returns>
        public async System.Threading.Tasks.Task<BuildingFileResponse> ApiV11BuildingsByBuildingIdFilesByIdGetAsync (Guid? buildingId, Guid? id)
        {
             ApiResponse<BuildingFileResponse> localVarResponse = await ApiV11BuildingsByBuildingIdFilesByIdGetAsyncWithHttpInfo(buildingId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a building file by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/files/[id]  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>Task of ApiResponse (BuildingFileResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildingFileResponse>> ApiV11BuildingsByBuildingIdFilesByIdGetAsyncWithHttpInfo (Guid? buildingId, Guid? id)
        {
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdGet");

            var localVarPath = "/api/v1.1/buildings/{buildingId}/files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByBuildingIdFilesByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildingFileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildingFileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildingFileResponse)));
        }

        /// <summary>
        /// Sets the status of a file to &#39;importing&#39;, so element can be added or updated can be made. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/setimporting  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns></returns>
        public void ApiV11BuildingsByBuildingIdFilesByIdSetimportingPost (Guid? buildingId, Guid? id)
        {
             ApiV11BuildingsByBuildingIdFilesByIdSetimportingPostWithHttpInfo(buildingId, id);
        }

        /// <summary>
        /// Sets the status of a file to &#39;importing&#39;, so element can be added or updated can be made. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/setimporting  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV11BuildingsByBuildingIdFilesByIdSetimportingPostWithHttpInfo (Guid? buildingId, Guid? id)
        {
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdSetimportingPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdSetimportingPost");

            var localVarPath = "/api/v1.1/buildings/{buildingId}/files/{id}/setimporting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByBuildingIdFilesByIdSetimportingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sets the status of a file to &#39;importing&#39;, so element can be added or updated can be made. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/setimporting  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV11BuildingsByBuildingIdFilesByIdSetimportingPostAsync (Guid? buildingId, Guid? id)
        {
             await ApiV11BuildingsByBuildingIdFilesByIdSetimportingPostAsyncWithHttpInfo(buildingId, id);

        }

        /// <summary>
        /// Sets the status of a file to &#39;importing&#39;, so element can be added or updated can be made. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/setimporting  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV11BuildingsByBuildingIdFilesByIdSetimportingPostAsyncWithHttpInfo (Guid? buildingId, Guid? id)
        {
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdSetimportingPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdSetimportingPost");

            var localVarPath = "/api/v1.1/buildings/{buildingId}/files/{id}/setimporting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByBuildingIdFilesByIdSetimportingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Starts the refinement of a building file. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/startrefinement  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns></returns>
        public void ApiV11BuildingsByBuildingIdFilesByIdStartrefinementPost (Guid? buildingId, Guid? id)
        {
             ApiV11BuildingsByBuildingIdFilesByIdStartrefinementPostWithHttpInfo(buildingId, id);
        }

        /// <summary>
        /// Starts the refinement of a building file. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/startrefinement  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV11BuildingsByBuildingIdFilesByIdStartrefinementPostWithHttpInfo (Guid? buildingId, Guid? id)
        {
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdStartrefinementPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdStartrefinementPost");

            var localVarPath = "/api/v1.1/buildings/{buildingId}/files/{id}/startrefinement";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByBuildingIdFilesByIdStartrefinementPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Starts the refinement of a building file. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/startrefinement  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV11BuildingsByBuildingIdFilesByIdStartrefinementPostAsync (Guid? buildingId, Guid? id)
        {
             await ApiV11BuildingsByBuildingIdFilesByIdStartrefinementPostAsyncWithHttpInfo(buildingId, id);

        }

        /// <summary>
        /// Starts the refinement of a building file. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/startrefinement  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV11BuildingsByBuildingIdFilesByIdStartrefinementPostAsyncWithHttpInfo (Guid? buildingId, Guid? id)
        {
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdStartrefinementPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdStartrefinementPost");

            var localVarPath = "/api/v1.1/buildings/{buildingId}/files/{id}/startrefinement";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByBuildingIdFilesByIdStartrefinementPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets a building file status by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/files/[id]/status  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>BuildingFileStatusResponse</returns>
        public BuildingFileStatusResponse ApiV11BuildingsByBuildingIdFilesByIdStatusGet (Guid? buildingId, Guid? id)
        {
             ApiResponse<BuildingFileStatusResponse> localVarResponse = ApiV11BuildingsByBuildingIdFilesByIdStatusGetWithHttpInfo(buildingId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a building file status by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/files/[id]/status  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>ApiResponse of BuildingFileStatusResponse</returns>
        public ApiResponse< BuildingFileStatusResponse > ApiV11BuildingsByBuildingIdFilesByIdStatusGetWithHttpInfo (Guid? buildingId, Guid? id)
        {
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdStatusGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdStatusGet");

            var localVarPath = "/api/v1.1/buildings/{buildingId}/files/{id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByBuildingIdFilesByIdStatusGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildingFileStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildingFileStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildingFileStatusResponse)));
        }

        /// <summary>
        /// Gets a building file status by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/files/[id]/status  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>Task of BuildingFileStatusResponse</returns>
        public async System.Threading.Tasks.Task<BuildingFileStatusResponse> ApiV11BuildingsByBuildingIdFilesByIdStatusGetAsync (Guid? buildingId, Guid? id)
        {
             ApiResponse<BuildingFileStatusResponse> localVarResponse = await ApiV11BuildingsByBuildingIdFilesByIdStatusGetAsyncWithHttpInfo(buildingId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a building file status by its identifier. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/files/[id]/status  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The identifier of the building.</param>
        /// <param name="id">The identifier of the building file.</param>
        /// <returns>Task of ApiResponse (BuildingFileStatusResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildingFileStatusResponse>> ApiV11BuildingsByBuildingIdFilesByIdStatusGetAsyncWithHttpInfo (Guid? buildingId, Guid? id)
        {
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdStatusGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdStatusGet");

            var localVarPath = "/api/v1.1/buildings/{buildingId}/files/{id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByBuildingIdFilesByIdStatusGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildingFileStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildingFileStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildingFileStatusResponse)));
        }

        /// <summary>
        /// Uploads a building file. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/upload  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The building identifier.</param>
        /// <param name="id">The building file identifier.</param>
        /// <param name="attachment">The attachment. (optional)</param>
        /// <returns></returns>
        public void ApiV11BuildingsByBuildingIdFilesByIdUploadPost (Guid? buildingId, Guid? id, System.IO.Stream attachment = null)
        {
             ApiV11BuildingsByBuildingIdFilesByIdUploadPostWithHttpInfo(buildingId, id, attachment);
        }

        /// <summary>
        /// Uploads a building file. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/upload  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The building identifier.</param>
        /// <param name="id">The building file identifier.</param>
        /// <param name="attachment">The attachment. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV11BuildingsByBuildingIdFilesByIdUploadPostWithHttpInfo (Guid? buildingId, Guid? id, System.IO.Stream attachment = null)
        {
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdUploadPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdUploadPost");

            var localVarPath = "/api/v1.1/buildings/{buildingId}/files/{id}/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (attachment != null) localVarFileParams.Add("attachment", this.Configuration.ApiClient.ParameterToFile("attachment", attachment));

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByBuildingIdFilesByIdUploadPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Uploads a building file. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/upload  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The building identifier.</param>
        /// <param name="id">The building file identifier.</param>
        /// <param name="attachment">The attachment. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV11BuildingsByBuildingIdFilesByIdUploadPostAsync (Guid? buildingId, Guid? id, System.IO.Stream attachment = null)
        {
             await ApiV11BuildingsByBuildingIdFilesByIdUploadPostAsyncWithHttpInfo(buildingId, id, attachment);

        }

        /// <summary>
        /// Uploads a building file. Sample request:  &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files/[id]/upload  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The building identifier.</param>
        /// <param name="id">The building file identifier.</param>
        /// <param name="attachment">The attachment. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV11BuildingsByBuildingIdFilesByIdUploadPostAsyncWithHttpInfo (Guid? buildingId, Guid? id, System.IO.Stream attachment = null)
        {
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdUploadPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesByIdUploadPost");

            var localVarPath = "/api/v1.1/buildings/{buildingId}/files/{id}/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (attachment != null) localVarFileParams.Add("attachment", this.Configuration.ApiClient.ParameterToFile("attachment", attachment));

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByBuildingIdFilesByIdUploadPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets all building files. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/files  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId"></param>
        /// <returns>List&lt;BuildingFileResponse&gt;</returns>
        public List<BuildingFileResponse> ApiV11BuildingsByBuildingIdFilesGet (Guid? buildingId)
        {
             ApiResponse<List<BuildingFileResponse>> localVarResponse = ApiV11BuildingsByBuildingIdFilesGetWithHttpInfo(buildingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all building files. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/files  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId"></param>
        /// <returns>ApiResponse of List&lt;BuildingFileResponse&gt;</returns>
        public ApiResponse< List<BuildingFileResponse> > ApiV11BuildingsByBuildingIdFilesGetWithHttpInfo (Guid? buildingId)
        {
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesGet");

            var localVarPath = "/api/v1.1/buildings/{buildingId}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByBuildingIdFilesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BuildingFileResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BuildingFileResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BuildingFileResponse>)));
        }

        /// <summary>
        /// Gets all building files. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/files  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId"></param>
        /// <returns>Task of List&lt;BuildingFileResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<BuildingFileResponse>> ApiV11BuildingsByBuildingIdFilesGetAsync (Guid? buildingId)
        {
             ApiResponse<List<BuildingFileResponse>> localVarResponse = await ApiV11BuildingsByBuildingIdFilesGetAsyncWithHttpInfo(buildingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all building files. Sample request:  &#x60;&#x60;&#x60;  GET api/[version]/buildings/[buildingId]/files  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId"></param>
        /// <returns>Task of ApiResponse (List&lt;BuildingFileResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BuildingFileResponse>>> ApiV11BuildingsByBuildingIdFilesGetAsyncWithHttpInfo (Guid? buildingId)
        {
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesGet");

            var localVarPath = "/api/v1.1/buildings/{buildingId}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByBuildingIdFilesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BuildingFileResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BuildingFileResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BuildingFileResponse>)));
        }

        /// <summary>
        /// Adds a building file. Sample request:   &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The building identifier.</param>
        /// <param name="buildingFile">The building file model. (optional)</param>
        /// <returns>BuildingFileResponse</returns>
        public BuildingFileResponse ApiV11BuildingsByBuildingIdFilesPost (Guid? buildingId, V11BuildingFileRequest buildingFile = null)
        {
             ApiResponse<BuildingFileResponse> localVarResponse = ApiV11BuildingsByBuildingIdFilesPostWithHttpInfo(buildingId, buildingFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a building file. Sample request:   &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The building identifier.</param>
        /// <param name="buildingFile">The building file model. (optional)</param>
        /// <returns>ApiResponse of BuildingFileResponse</returns>
        public ApiResponse< BuildingFileResponse > ApiV11BuildingsByBuildingIdFilesPostWithHttpInfo (Guid? buildingId, V11BuildingFileRequest buildingFile = null)
        {
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesPost");

            var localVarPath = "/api/v1.1/buildings/{buildingId}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (buildingFile != null && buildingFile.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(buildingFile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = buildingFile; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByBuildingIdFilesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildingFileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildingFileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildingFileResponse)));
        }

        /// <summary>
        /// Adds a building file. Sample request:   &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The building identifier.</param>
        /// <param name="buildingFile">The building file model. (optional)</param>
        /// <returns>Task of BuildingFileResponse</returns>
        public async System.Threading.Tasks.Task<BuildingFileResponse> ApiV11BuildingsByBuildingIdFilesPostAsync (Guid? buildingId, V11BuildingFileRequest buildingFile = null)
        {
             ApiResponse<BuildingFileResponse> localVarResponse = await ApiV11BuildingsByBuildingIdFilesPostAsyncWithHttpInfo(buildingId, buildingFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a building file. Sample request:   &#x60;&#x60;&#x60;  POST api/[version]/buildings/[buildingId]/files  &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Madaster.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildingId">The building identifier.</param>
        /// <param name="buildingFile">The building file model. (optional)</param>
        /// <returns>Task of ApiResponse (BuildingFileResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildingFileResponse>> ApiV11BuildingsByBuildingIdFilesPostAsyncWithHttpInfo (Guid? buildingId, V11BuildingFileRequest buildingFile = null)
        {
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling BuildingFileApi->ApiV11BuildingsByBuildingIdFilesPost");

            var localVarPath = "/api/v1.1/buildings/{buildingId}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (buildingFile != null && buildingFile.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(buildingFile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = buildingFile; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV11BuildingsByBuildingIdFilesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildingFileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildingFileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildingFileResponse)));
        }

    }
}
