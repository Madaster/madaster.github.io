/* 
 * Madaster Private API
 *
 * The Madaster Private API endpoint.
 *
 * OpenAPI spec version: 1.1
 * Contact: service@madaster.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Madaster.API.Client.SwaggerDateConverter;

namespace Madaster.API.Model
{
    /// <summary>
    /// A material
    /// </summary>
    [DataContract]
    public partial class Material :  IEquatable<Material>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Material" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Material() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Material" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="elementFamily">The element family (required).</param>
        /// <param name="description">description.</param>
        /// <param name="supplier">The supplier of the material.</param>
        /// <param name="specificWeight">The specific weight of the material, in kg / m3 (required).</param>
        /// <param name="lifeTime">The lifetime of the material, in years.</param>
        /// <param name="circular">The circular properties of the material.</param>
        /// <param name="financial">The financial properties of the material.</param>
        /// <param name="id">The unique identifier.</param>
        public Material(MultiLingualString name = default(MultiLingualString), string elementFamily = default(string), MultiLingualString1 description = default(MultiLingualString1), string supplier = default(string), double? specificWeight = default(double?), int? lifeTime = default(int?), MaterialCircularInformation circular = default(MaterialCircularInformation), MaterialFinancialInformation financial = default(MaterialFinancialInformation), Guid? id = default(Guid?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Material and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "elementFamily" is required (not null)
            if (elementFamily == null)
            {
                throw new InvalidDataException("elementFamily is a required property for Material and cannot be null");
            }
            else
            {
                this.ElementFamily = elementFamily;
            }
            // to ensure "specificWeight" is required (not null)
            if (specificWeight == null)
            {
                throw new InvalidDataException("specificWeight is a required property for Material and cannot be null");
            }
            else
            {
                this.SpecificWeight = specificWeight;
            }
            this.Description = description;
            this.Supplier = supplier;
            this.LifeTime = lifeTime;
            this.Circular = circular;
            this.Financial = financial;
            this.Id = id;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public MultiLingualString Name { get; set; }

        /// <summary>
        /// The element family
        /// </summary>
        /// <value>The element family</value>
        [DataMember(Name="elementFamily", EmitDefaultValue=false)]
        public string ElementFamily { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public MultiLingualString1 Description { get; set; }

        /// <summary>
        /// The supplier of the material
        /// </summary>
        /// <value>The supplier of the material</value>
        [DataMember(Name="supplier", EmitDefaultValue=false)]
        public string Supplier { get; set; }

        /// <summary>
        /// The specific weight of the material, in kg / m3
        /// </summary>
        /// <value>The specific weight of the material, in kg / m3</value>
        [DataMember(Name="specificWeight", EmitDefaultValue=false)]
        public double? SpecificWeight { get; set; }

        /// <summary>
        /// The lifetime of the material, in years
        /// </summary>
        /// <value>The lifetime of the material, in years</value>
        [DataMember(Name="lifeTime", EmitDefaultValue=false)]
        public int? LifeTime { get; set; }

        /// <summary>
        /// The circular properties of the material
        /// </summary>
        /// <value>The circular properties of the material</value>
        [DataMember(Name="circular", EmitDefaultValue=false)]
        public MaterialCircularInformation Circular { get; set; }

        /// <summary>
        /// The financial properties of the material
        /// </summary>
        /// <value>The financial properties of the material</value>
        [DataMember(Name="financial", EmitDefaultValue=false)]
        public MaterialFinancialInformation Financial { get; set; }

        /// <summary>
        /// The unique identifier
        /// </summary>
        /// <value>The unique identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Material {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ElementFamily: ").Append(ElementFamily).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Supplier: ").Append(Supplier).Append("\n");
            sb.Append("  SpecificWeight: ").Append(SpecificWeight).Append("\n");
            sb.Append("  LifeTime: ").Append(LifeTime).Append("\n");
            sb.Append("  Circular: ").Append(Circular).Append("\n");
            sb.Append("  Financial: ").Append(Financial).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Material);
        }

        /// <summary>
        /// Returns true if Material instances are equal
        /// </summary>
        /// <param name="input">Instance of Material to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Material input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ElementFamily == input.ElementFamily ||
                    (this.ElementFamily != null &&
                    this.ElementFamily.Equals(input.ElementFamily))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Supplier == input.Supplier ||
                    (this.Supplier != null &&
                    this.Supplier.Equals(input.Supplier))
                ) && 
                (
                    this.SpecificWeight == input.SpecificWeight ||
                    (this.SpecificWeight != null &&
                    this.SpecificWeight.Equals(input.SpecificWeight))
                ) && 
                (
                    this.LifeTime == input.LifeTime ||
                    (this.LifeTime != null &&
                    this.LifeTime.Equals(input.LifeTime))
                ) && 
                (
                    this.Circular == input.Circular ||
                    (this.Circular != null &&
                    this.Circular.Equals(input.Circular))
                ) && 
                (
                    this.Financial == input.Financial ||
                    (this.Financial != null &&
                    this.Financial.Equals(input.Financial))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ElementFamily != null)
                    hashCode = hashCode * 59 + this.ElementFamily.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Supplier != null)
                    hashCode = hashCode * 59 + this.Supplier.GetHashCode();
                if (this.SpecificWeight != null)
                    hashCode = hashCode * 59 + this.SpecificWeight.GetHashCode();
                if (this.LifeTime != null)
                    hashCode = hashCode * 59 + this.LifeTime.GetHashCode();
                if (this.Circular != null)
                    hashCode = hashCode * 59 + this.Circular.GetHashCode();
                if (this.Financial != null)
                    hashCode = hashCode * 59 + this.Financial.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
