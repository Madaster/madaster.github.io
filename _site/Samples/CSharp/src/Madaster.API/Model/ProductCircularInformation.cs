/* 
 * Madaster Private API
 *
 * The Madaster Private API endpoint.
 *
 * OpenAPI spec version: 1.1
 * Contact: service@madaster.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Madaster.API.Client.SwaggerDateConverter;

namespace Madaster.API.Model
{
    /// <summary>
    /// The circular properties of the element
    /// </summary>
    [DataContract]
    public partial class ProductCircularInformation :  IEquatable<ProductCircularInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductCircularInformation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductCircularInformation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductCircularInformation" /> class.
        /// </summary>
        /// <param name="recycledPercentageFeedstock">The percentage of the material&#39;s feedstock that comes from recycled sources.</param>
        /// <param name="rapidRenewablesPercentageFeedstock">The percentage of the material&#39;s feedstock that comes from rapidly renewable sources.</param>
        /// <param name="recycledPercentageEndOfLife">The percentage of the material that can be recycled at its end of life.</param>
        /// <param name="landfillPercentageEndOfLife">The percentage of the material that will go to the landfill at its end of life.</param>
        /// <param name="efficiencyPercentageRecyclingFeedstock">The efficiency of the recycling process that led to the feedstock.</param>
        /// <param name="efficiencyPercentageRecyclingEndOfLife">The efficiency of the recycling process when the material reaches its end of life.</param>
        /// <param name="technicalLifetime">The technical lifetime of the product.</param>
        /// <param name="functionalLifetime">The functional lifetime of the product.</param>
        /// <param name="productReusedPercentageFeedstock">The percentage of the product&#39;s feedstock that is re-used from other sources (required).</param>
        /// <param name="productReusedPercentageEndOfLife">The percentage of the product that can be re-used at its end of life (required).</param>
        public ProductCircularInformation(double? recycledPercentageFeedstock = default(double?), double? rapidRenewablesPercentageFeedstock = default(double?), double? recycledPercentageEndOfLife = default(double?), double? landfillPercentageEndOfLife = default(double?), double? efficiencyPercentageRecyclingFeedstock = default(double?), double? efficiencyPercentageRecyclingEndOfLife = default(double?), int? technicalLifetime = default(int?), int? functionalLifetime = default(int?), double? productReusedPercentageFeedstock = default(double?), double? productReusedPercentageEndOfLife = default(double?))
        {
            // to ensure "productReusedPercentageFeedstock" is required (not null)
            if (productReusedPercentageFeedstock == null)
            {
                throw new InvalidDataException("productReusedPercentageFeedstock is a required property for ProductCircularInformation and cannot be null");
            }
            else
            {
                this.ProductReusedPercentageFeedstock = productReusedPercentageFeedstock;
            }
            // to ensure "productReusedPercentageEndOfLife" is required (not null)
            if (productReusedPercentageEndOfLife == null)
            {
                throw new InvalidDataException("productReusedPercentageEndOfLife is a required property for ProductCircularInformation and cannot be null");
            }
            else
            {
                this.ProductReusedPercentageEndOfLife = productReusedPercentageEndOfLife;
            }
            this.RecycledPercentageFeedstock = recycledPercentageFeedstock;
            this.RapidRenewablesPercentageFeedstock = rapidRenewablesPercentageFeedstock;
            this.RecycledPercentageEndOfLife = recycledPercentageEndOfLife;
            this.LandfillPercentageEndOfLife = landfillPercentageEndOfLife;
            this.EfficiencyPercentageRecyclingFeedstock = efficiencyPercentageRecyclingFeedstock;
            this.EfficiencyPercentageRecyclingEndOfLife = efficiencyPercentageRecyclingEndOfLife;
            this.TechnicalLifetime = technicalLifetime;
            this.FunctionalLifetime = functionalLifetime;
        }
        
        /// <summary>
        /// The percentage of the material&#39;s feedstock that comes from recycled sources
        /// </summary>
        /// <value>The percentage of the material&#39;s feedstock that comes from recycled sources</value>
        [DataMember(Name="recycledPercentageFeedstock", EmitDefaultValue=false)]
        public double? RecycledPercentageFeedstock { get; set; }

        /// <summary>
        /// The percentage of the material&#39;s feedstock that comes from rapidly renewable sources
        /// </summary>
        /// <value>The percentage of the material&#39;s feedstock that comes from rapidly renewable sources</value>
        [DataMember(Name="rapidRenewablesPercentageFeedstock", EmitDefaultValue=false)]
        public double? RapidRenewablesPercentageFeedstock { get; set; }

        /// <summary>
        /// The percentage of the material&#39;s feedstock that comes from virgin sources
        /// </summary>
        /// <value>The percentage of the material&#39;s feedstock that comes from virgin sources</value>
        [DataMember(Name="virginPercentageFeedstock", EmitDefaultValue=false)]
        public double? VirginPercentageFeedstock { get; private set; }

        /// <summary>
        /// The percentage of the material that can be recycled at its end of life
        /// </summary>
        /// <value>The percentage of the material that can be recycled at its end of life</value>
        [DataMember(Name="recycledPercentageEndOfLife", EmitDefaultValue=false)]
        public double? RecycledPercentageEndOfLife { get; set; }

        /// <summary>
        /// The percentage of the material that will go to the landfill at its end of life
        /// </summary>
        /// <value>The percentage of the material that will go to the landfill at its end of life</value>
        [DataMember(Name="landfillPercentageEndOfLife", EmitDefaultValue=false)]
        public double? LandfillPercentageEndOfLife { get; set; }

        /// <summary>
        /// The percentage of the material that will be incinerated at its end of life
        /// </summary>
        /// <value>The percentage of the material that will be incinerated at its end of life</value>
        [DataMember(Name="incinerationPercentageEndOfLife", EmitDefaultValue=false)]
        public double? IncinerationPercentageEndOfLife { get; private set; }

        /// <summary>
        /// The efficiency of the recycling process that led to the feedstock
        /// </summary>
        /// <value>The efficiency of the recycling process that led to the feedstock</value>
        [DataMember(Name="efficiencyPercentageRecyclingFeedstock", EmitDefaultValue=false)]
        public double? EfficiencyPercentageRecyclingFeedstock { get; set; }

        /// <summary>
        /// The efficiency of the recycling process when the material reaches its end of life
        /// </summary>
        /// <value>The efficiency of the recycling process when the material reaches its end of life</value>
        [DataMember(Name="efficiencyPercentageRecyclingEndOfLife", EmitDefaultValue=false)]
        public double? EfficiencyPercentageRecyclingEndOfLife { get; set; }

        /// <summary>
        /// The technical lifetime of the product
        /// </summary>
        /// <value>The technical lifetime of the product</value>
        [DataMember(Name="technicalLifetime", EmitDefaultValue=false)]
        public int? TechnicalLifetime { get; set; }

        /// <summary>
        /// The functional lifetime of the product
        /// </summary>
        /// <value>The functional lifetime of the product</value>
        [DataMember(Name="functionalLifetime", EmitDefaultValue=false)]
        public int? FunctionalLifetime { get; set; }

        /// <summary>
        /// The percentage of the product&#39;s feedstock that is re-used from other sources
        /// </summary>
        /// <value>The percentage of the product&#39;s feedstock that is re-used from other sources</value>
        [DataMember(Name="productReusedPercentageFeedstock", EmitDefaultValue=false)]
        public double? ProductReusedPercentageFeedstock { get; set; }

        /// <summary>
        /// The percentage of the product&#39;s feedstock that comes from recycled sources
        /// </summary>
        /// <value>The percentage of the product&#39;s feedstock that comes from recycled sources</value>
        [DataMember(Name="productRecycledPercentageFeedstock", EmitDefaultValue=false)]
        public double? ProductRecycledPercentageFeedstock { get; private set; }

        /// <summary>
        /// The percentage of the product&#39;s feedstock that comes from rapidly renewable sources
        /// </summary>
        /// <value>The percentage of the product&#39;s feedstock that comes from rapidly renewable sources</value>
        [DataMember(Name="productRapidRenewablesPercentageFeedstock", EmitDefaultValue=false)]
        public double? ProductRapidRenewablesPercentageFeedstock { get; private set; }

        /// <summary>
        /// The percentage of the product&#39;s feedstock that comes from virgin sources
        /// </summary>
        /// <value>The percentage of the product&#39;s feedstock that comes from virgin sources</value>
        [DataMember(Name="productVirginPercentageFeedstock", EmitDefaultValue=false)]
        public double? ProductVirginPercentageFeedstock { get; private set; }

        /// <summary>
        /// The percentage of the product that can be re-used at its end of life
        /// </summary>
        /// <value>The percentage of the product that can be re-used at its end of life</value>
        [DataMember(Name="productReusedPercentageEndOfLife", EmitDefaultValue=false)]
        public double? ProductReusedPercentageEndOfLife { get; set; }

        /// <summary>
        /// The percentage of the product that can be recycled at its end of life
        /// </summary>
        /// <value>The percentage of the product that can be recycled at its end of life</value>
        [DataMember(Name="productRecycledPercentageEndOfLife", EmitDefaultValue=false)]
        public double? ProductRecycledPercentageEndOfLife { get; private set; }

        /// <summary>
        /// The percentage of the product that will go to the landfill at its end of life
        /// </summary>
        /// <value>The percentage of the product that will go to the landfill at its end of life</value>
        [DataMember(Name="productLandfillPercentageEndOfLife", EmitDefaultValue=false)]
        public double? ProductLandfillPercentageEndOfLife { get; private set; }

        /// <summary>
        /// The percentage of the product that will be incinerated at its end of life
        /// </summary>
        /// <value>The percentage of the product that will be incinerated at its end of life</value>
        [DataMember(Name="productIncinerationPercentageEndOfLife", EmitDefaultValue=false)]
        public double? ProductIncinerationPercentageEndOfLife { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductCircularInformation {\n");
            sb.Append("  RecycledPercentageFeedstock: ").Append(RecycledPercentageFeedstock).Append("\n");
            sb.Append("  RapidRenewablesPercentageFeedstock: ").Append(RapidRenewablesPercentageFeedstock).Append("\n");
            sb.Append("  VirginPercentageFeedstock: ").Append(VirginPercentageFeedstock).Append("\n");
            sb.Append("  RecycledPercentageEndOfLife: ").Append(RecycledPercentageEndOfLife).Append("\n");
            sb.Append("  LandfillPercentageEndOfLife: ").Append(LandfillPercentageEndOfLife).Append("\n");
            sb.Append("  IncinerationPercentageEndOfLife: ").Append(IncinerationPercentageEndOfLife).Append("\n");
            sb.Append("  EfficiencyPercentageRecyclingFeedstock: ").Append(EfficiencyPercentageRecyclingFeedstock).Append("\n");
            sb.Append("  EfficiencyPercentageRecyclingEndOfLife: ").Append(EfficiencyPercentageRecyclingEndOfLife).Append("\n");
            sb.Append("  TechnicalLifetime: ").Append(TechnicalLifetime).Append("\n");
            sb.Append("  FunctionalLifetime: ").Append(FunctionalLifetime).Append("\n");
            sb.Append("  ProductReusedPercentageFeedstock: ").Append(ProductReusedPercentageFeedstock).Append("\n");
            sb.Append("  ProductRecycledPercentageFeedstock: ").Append(ProductRecycledPercentageFeedstock).Append("\n");
            sb.Append("  ProductRapidRenewablesPercentageFeedstock: ").Append(ProductRapidRenewablesPercentageFeedstock).Append("\n");
            sb.Append("  ProductVirginPercentageFeedstock: ").Append(ProductVirginPercentageFeedstock).Append("\n");
            sb.Append("  ProductReusedPercentageEndOfLife: ").Append(ProductReusedPercentageEndOfLife).Append("\n");
            sb.Append("  ProductRecycledPercentageEndOfLife: ").Append(ProductRecycledPercentageEndOfLife).Append("\n");
            sb.Append("  ProductLandfillPercentageEndOfLife: ").Append(ProductLandfillPercentageEndOfLife).Append("\n");
            sb.Append("  ProductIncinerationPercentageEndOfLife: ").Append(ProductIncinerationPercentageEndOfLife).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductCircularInformation);
        }

        /// <summary>
        /// Returns true if ProductCircularInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductCircularInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductCircularInformation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RecycledPercentageFeedstock == input.RecycledPercentageFeedstock ||
                    (this.RecycledPercentageFeedstock != null &&
                    this.RecycledPercentageFeedstock.Equals(input.RecycledPercentageFeedstock))
                ) && 
                (
                    this.RapidRenewablesPercentageFeedstock == input.RapidRenewablesPercentageFeedstock ||
                    (this.RapidRenewablesPercentageFeedstock != null &&
                    this.RapidRenewablesPercentageFeedstock.Equals(input.RapidRenewablesPercentageFeedstock))
                ) && 
                (
                    this.VirginPercentageFeedstock == input.VirginPercentageFeedstock ||
                    (this.VirginPercentageFeedstock != null &&
                    this.VirginPercentageFeedstock.Equals(input.VirginPercentageFeedstock))
                ) && 
                (
                    this.RecycledPercentageEndOfLife == input.RecycledPercentageEndOfLife ||
                    (this.RecycledPercentageEndOfLife != null &&
                    this.RecycledPercentageEndOfLife.Equals(input.RecycledPercentageEndOfLife))
                ) && 
                (
                    this.LandfillPercentageEndOfLife == input.LandfillPercentageEndOfLife ||
                    (this.LandfillPercentageEndOfLife != null &&
                    this.LandfillPercentageEndOfLife.Equals(input.LandfillPercentageEndOfLife))
                ) && 
                (
                    this.IncinerationPercentageEndOfLife == input.IncinerationPercentageEndOfLife ||
                    (this.IncinerationPercentageEndOfLife != null &&
                    this.IncinerationPercentageEndOfLife.Equals(input.IncinerationPercentageEndOfLife))
                ) && 
                (
                    this.EfficiencyPercentageRecyclingFeedstock == input.EfficiencyPercentageRecyclingFeedstock ||
                    (this.EfficiencyPercentageRecyclingFeedstock != null &&
                    this.EfficiencyPercentageRecyclingFeedstock.Equals(input.EfficiencyPercentageRecyclingFeedstock))
                ) && 
                (
                    this.EfficiencyPercentageRecyclingEndOfLife == input.EfficiencyPercentageRecyclingEndOfLife ||
                    (this.EfficiencyPercentageRecyclingEndOfLife != null &&
                    this.EfficiencyPercentageRecyclingEndOfLife.Equals(input.EfficiencyPercentageRecyclingEndOfLife))
                ) && 
                (
                    this.TechnicalLifetime == input.TechnicalLifetime ||
                    (this.TechnicalLifetime != null &&
                    this.TechnicalLifetime.Equals(input.TechnicalLifetime))
                ) && 
                (
                    this.FunctionalLifetime == input.FunctionalLifetime ||
                    (this.FunctionalLifetime != null &&
                    this.FunctionalLifetime.Equals(input.FunctionalLifetime))
                ) && 
                (
                    this.ProductReusedPercentageFeedstock == input.ProductReusedPercentageFeedstock ||
                    (this.ProductReusedPercentageFeedstock != null &&
                    this.ProductReusedPercentageFeedstock.Equals(input.ProductReusedPercentageFeedstock))
                ) && 
                (
                    this.ProductRecycledPercentageFeedstock == input.ProductRecycledPercentageFeedstock ||
                    (this.ProductRecycledPercentageFeedstock != null &&
                    this.ProductRecycledPercentageFeedstock.Equals(input.ProductRecycledPercentageFeedstock))
                ) && 
                (
                    this.ProductRapidRenewablesPercentageFeedstock == input.ProductRapidRenewablesPercentageFeedstock ||
                    (this.ProductRapidRenewablesPercentageFeedstock != null &&
                    this.ProductRapidRenewablesPercentageFeedstock.Equals(input.ProductRapidRenewablesPercentageFeedstock))
                ) && 
                (
                    this.ProductVirginPercentageFeedstock == input.ProductVirginPercentageFeedstock ||
                    (this.ProductVirginPercentageFeedstock != null &&
                    this.ProductVirginPercentageFeedstock.Equals(input.ProductVirginPercentageFeedstock))
                ) && 
                (
                    this.ProductReusedPercentageEndOfLife == input.ProductReusedPercentageEndOfLife ||
                    (this.ProductReusedPercentageEndOfLife != null &&
                    this.ProductReusedPercentageEndOfLife.Equals(input.ProductReusedPercentageEndOfLife))
                ) && 
                (
                    this.ProductRecycledPercentageEndOfLife == input.ProductRecycledPercentageEndOfLife ||
                    (this.ProductRecycledPercentageEndOfLife != null &&
                    this.ProductRecycledPercentageEndOfLife.Equals(input.ProductRecycledPercentageEndOfLife))
                ) && 
                (
                    this.ProductLandfillPercentageEndOfLife == input.ProductLandfillPercentageEndOfLife ||
                    (this.ProductLandfillPercentageEndOfLife != null &&
                    this.ProductLandfillPercentageEndOfLife.Equals(input.ProductLandfillPercentageEndOfLife))
                ) && 
                (
                    this.ProductIncinerationPercentageEndOfLife == input.ProductIncinerationPercentageEndOfLife ||
                    (this.ProductIncinerationPercentageEndOfLife != null &&
                    this.ProductIncinerationPercentageEndOfLife.Equals(input.ProductIncinerationPercentageEndOfLife))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RecycledPercentageFeedstock != null)
                    hashCode = hashCode * 59 + this.RecycledPercentageFeedstock.GetHashCode();
                if (this.RapidRenewablesPercentageFeedstock != null)
                    hashCode = hashCode * 59 + this.RapidRenewablesPercentageFeedstock.GetHashCode();
                if (this.VirginPercentageFeedstock != null)
                    hashCode = hashCode * 59 + this.VirginPercentageFeedstock.GetHashCode();
                if (this.RecycledPercentageEndOfLife != null)
                    hashCode = hashCode * 59 + this.RecycledPercentageEndOfLife.GetHashCode();
                if (this.LandfillPercentageEndOfLife != null)
                    hashCode = hashCode * 59 + this.LandfillPercentageEndOfLife.GetHashCode();
                if (this.IncinerationPercentageEndOfLife != null)
                    hashCode = hashCode * 59 + this.IncinerationPercentageEndOfLife.GetHashCode();
                if (this.EfficiencyPercentageRecyclingFeedstock != null)
                    hashCode = hashCode * 59 + this.EfficiencyPercentageRecyclingFeedstock.GetHashCode();
                if (this.EfficiencyPercentageRecyclingEndOfLife != null)
                    hashCode = hashCode * 59 + this.EfficiencyPercentageRecyclingEndOfLife.GetHashCode();
                if (this.TechnicalLifetime != null)
                    hashCode = hashCode * 59 + this.TechnicalLifetime.GetHashCode();
                if (this.FunctionalLifetime != null)
                    hashCode = hashCode * 59 + this.FunctionalLifetime.GetHashCode();
                if (this.ProductReusedPercentageFeedstock != null)
                    hashCode = hashCode * 59 + this.ProductReusedPercentageFeedstock.GetHashCode();
                if (this.ProductRecycledPercentageFeedstock != null)
                    hashCode = hashCode * 59 + this.ProductRecycledPercentageFeedstock.GetHashCode();
                if (this.ProductRapidRenewablesPercentageFeedstock != null)
                    hashCode = hashCode * 59 + this.ProductRapidRenewablesPercentageFeedstock.GetHashCode();
                if (this.ProductVirginPercentageFeedstock != null)
                    hashCode = hashCode * 59 + this.ProductVirginPercentageFeedstock.GetHashCode();
                if (this.ProductReusedPercentageEndOfLife != null)
                    hashCode = hashCode * 59 + this.ProductReusedPercentageEndOfLife.GetHashCode();
                if (this.ProductRecycledPercentageEndOfLife != null)
                    hashCode = hashCode * 59 + this.ProductRecycledPercentageEndOfLife.GetHashCode();
                if (this.ProductLandfillPercentageEndOfLife != null)
                    hashCode = hashCode * 59 + this.ProductLandfillPercentageEndOfLife.GetHashCode();
                if (this.ProductIncinerationPercentageEndOfLife != null)
                    hashCode = hashCode * 59 + this.ProductIncinerationPercentageEndOfLife.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TechnicalLifetime (int?) maximum
            if(this.TechnicalLifetime > (int?)1000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TechnicalLifetime, must be a value less than or equal to 1000.", new [] { "TechnicalLifetime" });
            }

            // TechnicalLifetime (int?) minimum
            if(this.TechnicalLifetime < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TechnicalLifetime, must be a value greater than or equal to 0.", new [] { "TechnicalLifetime" });
            }

            // FunctionalLifetime (int?) maximum
            if(this.FunctionalLifetime > (int?)1000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FunctionalLifetime, must be a value less than or equal to 1000.", new [] { "FunctionalLifetime" });
            }

            // FunctionalLifetime (int?) minimum
            if(this.FunctionalLifetime < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FunctionalLifetime, must be a value greater than or equal to 0.", new [] { "FunctionalLifetime" });
            }

            // ProductReusedPercentageFeedstock (double?) maximum
            if(this.ProductReusedPercentageFeedstock > (double?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductReusedPercentageFeedstock, must be a value less than or equal to 1.", new [] { "ProductReusedPercentageFeedstock" });
            }

            // ProductReusedPercentageFeedstock (double?) minimum
            if(this.ProductReusedPercentageFeedstock < (double?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductReusedPercentageFeedstock, must be a value greater than or equal to 0.", new [] { "ProductReusedPercentageFeedstock" });
            }

            // ProductReusedPercentageEndOfLife (double?) maximum
            if(this.ProductReusedPercentageEndOfLife > (double?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductReusedPercentageEndOfLife, must be a value less than or equal to 1.", new [] { "ProductReusedPercentageEndOfLife" });
            }

            // ProductReusedPercentageEndOfLife (double?) minimum
            if(this.ProductReusedPercentageEndOfLife < (double?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductReusedPercentageEndOfLife, must be a value greater than or equal to 0.", new [] { "ProductReusedPercentageEndOfLife" });
            }

            yield break;
        }
    }

}
